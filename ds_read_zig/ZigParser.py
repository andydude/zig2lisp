# Generated from ZigParser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,101,1164,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,1,0,5,0,216,8,0,10,0,12,0,219,
        9,0,1,0,1,0,1,1,3,1,224,8,1,1,1,5,1,227,8,1,10,1,12,1,230,9,1,1,
        2,1,2,1,2,3,2,235,8,2,1,2,3,2,238,8,2,1,2,3,2,241,8,2,1,3,1,3,3,
        3,245,8,3,1,3,1,3,1,4,1,4,1,4,1,5,3,5,253,8,5,1,5,1,5,1,5,3,5,258,
        8,5,1,5,3,5,261,8,5,1,5,3,5,264,8,5,1,5,1,5,1,5,1,5,1,5,3,5,271,
        8,5,1,6,1,6,1,6,3,6,276,8,6,1,6,1,6,3,6,280,8,6,1,7,1,7,1,7,3,7,
        285,8,7,3,7,287,8,7,1,8,3,8,290,8,8,1,8,1,8,1,9,1,9,3,9,296,8,9,
        1,9,1,9,1,9,1,9,3,9,302,8,9,1,9,3,9,305,8,9,1,9,3,9,308,8,9,1,9,
        3,9,311,8,9,1,9,1,9,3,9,315,8,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
        1,11,3,11,325,8,11,1,11,3,11,328,8,11,1,11,3,11,331,8,11,1,11,3,
        11,334,8,11,1,11,1,11,3,11,338,8,11,1,11,1,11,1,12,1,12,1,13,3,13,
        345,8,13,1,13,3,13,348,8,13,1,13,1,13,1,13,3,13,353,8,13,1,13,3,
        13,356,8,13,1,13,1,13,3,13,360,8,13,1,14,3,14,363,8,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,376,8,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,3,14,385,8,14,1,15,1,15,1,16,1,16,
        1,16,1,16,3,16,393,8,16,1,16,3,16,396,8,16,1,16,1,16,1,16,1,16,1,
        16,3,16,403,8,16,1,16,3,16,406,8,16,3,16,408,8,16,1,17,3,17,411,
        8,17,1,17,1,17,3,17,415,8,17,1,18,1,18,1,18,3,18,420,8,18,1,19,1,
        19,1,19,1,19,3,19,426,8,19,1,19,1,19,1,19,1,19,1,19,3,19,433,8,19,
        3,19,435,8,19,1,20,1,20,1,20,1,20,3,20,441,8,20,1,20,1,20,1,20,1,
        20,1,20,3,20,448,8,20,3,20,450,8,20,1,21,1,21,1,21,1,21,3,21,456,
        8,21,1,22,3,22,459,8,22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,467,8,
        23,1,24,1,24,1,25,1,25,1,25,5,25,474,8,25,10,25,12,25,477,9,25,1,
        26,1,26,1,26,5,26,482,8,26,10,26,12,26,485,9,26,1,27,1,27,1,27,1,
        27,5,27,491,8,27,10,27,12,27,494,9,27,1,28,1,28,1,28,1,28,5,28,500,
        8,28,10,28,12,28,503,9,28,1,29,1,29,1,29,5,29,508,8,29,10,29,12,
        29,511,9,29,1,30,1,30,1,30,5,30,516,8,30,10,30,12,30,519,9,30,1,
        31,1,31,1,31,5,31,524,8,31,10,31,12,31,527,9,31,1,32,5,32,530,8,
        32,10,32,12,32,533,9,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,
        1,35,1,35,1,35,3,35,546,8,35,1,35,3,35,549,8,35,1,35,1,35,1,35,1,
        35,1,35,1,35,3,35,557,8,35,1,35,1,35,1,35,1,35,3,35,563,8,35,1,35,
        3,35,566,8,35,1,35,1,35,1,35,3,35,571,8,35,1,36,1,36,1,37,1,37,1,
        38,1,38,1,38,1,38,3,38,581,8,38,1,38,3,38,584,8,38,1,39,1,39,5,39,
        588,8,39,10,39,12,39,591,9,39,1,39,1,39,1,40,3,40,596,8,40,1,40,
        1,40,3,40,600,8,40,1,41,1,41,1,41,1,41,3,41,606,8,41,1,42,1,42,1,
        42,1,42,3,42,612,8,42,1,42,3,42,615,8,42,1,43,1,43,3,43,619,8,43,
        1,44,1,44,1,44,1,44,5,44,625,8,44,10,44,12,44,628,9,44,1,44,3,44,
        631,8,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,639,8,44,10,44,12,44,
        642,9,44,1,44,3,44,645,8,44,1,44,1,44,1,44,1,44,3,44,651,8,44,1,
        45,5,45,654,8,45,10,45,12,45,657,9,45,1,45,1,45,1,46,1,46,1,46,3,
        46,664,8,46,1,47,1,47,1,47,5,47,669,8,47,10,47,12,47,672,9,47,1,
        47,1,47,1,47,1,47,5,47,678,8,47,10,47,12,47,681,9,47,3,47,683,8,
        47,1,48,1,48,3,48,687,8,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,716,8,51,1,52,1,52,1,52,1,
        53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,
        58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,3,60,744,8,60,1,
        60,3,60,747,8,60,1,61,1,61,1,61,1,61,3,61,753,8,61,1,61,3,61,756,
        8,61,1,62,1,62,1,62,3,62,761,8,62,1,63,1,63,1,63,1,63,3,63,767,8,
        63,1,64,1,64,1,64,1,64,3,64,773,8,64,1,64,3,64,776,8,64,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,
        1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,
        1,70,1,70,1,70,1,70,1,70,1,71,3,71,812,8,71,1,71,3,71,815,8,71,1,
        71,1,71,3,71,819,8,71,1,71,1,71,3,71,823,8,71,1,72,1,72,3,72,827,
        8,72,1,73,1,73,1,74,1,74,1,74,1,74,1,74,3,74,836,8,74,1,75,1,75,
        1,75,1,75,1,75,3,75,843,8,75,1,75,3,75,846,8,75,1,76,1,76,1,76,1,
        76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,3,78,860,8,78,1,78,1,
        78,1,78,1,79,1,79,3,79,867,8,79,1,79,1,79,1,79,3,79,872,8,79,1,79,
        1,79,1,80,1,80,3,80,878,8,80,1,80,1,80,1,80,3,80,883,8,80,1,80,5,
        80,886,8,80,10,80,12,80,889,9,80,1,80,3,80,892,8,80,1,80,1,80,1,
        81,3,81,897,8,81,1,81,1,81,1,81,3,81,902,8,81,1,81,1,81,1,82,1,82,
        1,82,5,82,909,8,82,10,82,12,82,912,9,82,1,82,3,82,915,8,82,1,82,
        3,82,918,8,82,1,83,1,83,1,83,3,83,923,8,83,1,84,1,84,1,84,5,84,928,
        8,84,10,84,12,84,931,9,84,1,84,3,84,934,8,84,1,85,1,85,1,85,3,85,
        939,8,85,3,85,941,8,85,1,86,1,86,1,87,1,87,1,88,1,88,3,88,949,8,
        88,1,89,1,89,1,89,3,89,954,8,89,3,89,956,8,89,1,90,1,90,1,90,1,90,
        1,90,5,90,963,8,90,10,90,12,90,966,9,90,1,90,1,90,5,90,970,8,90,
        10,90,12,90,973,9,90,1,90,3,90,976,8,90,1,91,1,91,1,91,1,91,1,91,
        3,91,983,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,
        994,8,92,1,92,1,92,1,92,1,92,1,92,3,92,1001,8,92,1,93,1,93,1,93,
        1,93,1,93,1,93,3,93,1009,8,93,3,93,1011,8,93,3,93,1013,8,93,1,93,
        1,93,1,93,1,93,1,93,1,93,3,93,1021,8,93,1,94,1,94,1,94,1,94,1,95,
        1,95,1,95,3,95,1030,8,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,3,96,1042,8,96,1,96,3,96,1045,8,96,1,97,1,97,1,97,1,97,
        3,97,1051,8,97,1,97,1,97,1,98,1,98,1,98,3,98,1058,8,98,1,98,1,98,
        1,98,1,99,1,99,1,99,1,99,1,99,3,99,1068,8,99,1,99,1,99,1,99,1,99,
        1,99,1,99,3,99,1076,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,
        1085,8,99,1,99,3,99,1088,8,99,1,99,3,99,1091,8,99,3,99,1093,8,99,
        1,100,1,100,1,100,1,100,1,100,1,101,1,101,1,101,5,101,1103,8,101,
        10,101,12,101,1106,9,101,1,101,1,101,3,101,1110,8,101,1,102,1,102,
        1,102,5,102,1115,8,102,10,102,12,102,1118,9,102,1,102,3,102,1121,
        8,102,1,103,1,103,5,103,1125,8,103,10,103,12,103,1128,9,103,1,103,
        3,103,1131,8,103,1,104,1,104,1,104,5,104,1136,8,104,10,104,12,104,
        1139,9,104,1,104,3,104,1142,8,104,1,105,1,105,1,105,5,105,1147,8,
        105,10,105,12,105,1150,9,105,1,105,1,105,1,106,1,106,1,106,5,106,
        1157,8,106,10,106,12,106,1160,9,106,1,106,1,106,1,106,0,0,107,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,0,6,2,0,60,60,64,
        64,2,0,22,22,36,36,2,0,14,14,49,49,2,0,13,13,29,29,2,0,52,52,82,
        82,2,0,53,53,83,83,1264,0,217,1,0,0,0,2,223,1,0,0,0,4,240,1,0,0,
        0,6,242,1,0,0,0,8,248,1,0,0,0,10,270,1,0,0,0,12,279,1,0,0,0,14,286,
        1,0,0,0,16,289,1,0,0,0,18,293,1,0,0,0,20,318,1,0,0,0,22,320,1,0,
        0,0,24,341,1,0,0,0,26,344,1,0,0,0,28,384,1,0,0,0,30,386,1,0,0,0,
        32,407,1,0,0,0,34,410,1,0,0,0,36,416,1,0,0,0,38,434,1,0,0,0,40,449,
        1,0,0,0,42,455,1,0,0,0,44,458,1,0,0,0,46,462,1,0,0,0,48,468,1,0,
        0,0,50,470,1,0,0,0,52,478,1,0,0,0,54,486,1,0,0,0,56,495,1,0,0,0,
        58,504,1,0,0,0,60,512,1,0,0,0,62,520,1,0,0,0,64,531,1,0,0,0,66,536,
        1,0,0,0,68,539,1,0,0,0,70,570,1,0,0,0,72,572,1,0,0,0,74,574,1,0,
        0,0,76,576,1,0,0,0,78,585,1,0,0,0,80,595,1,0,0,0,82,601,1,0,0,0,
        84,607,1,0,0,0,86,616,1,0,0,0,88,650,1,0,0,0,90,655,1,0,0,0,92,660,
        1,0,0,0,94,682,1,0,0,0,96,686,1,0,0,0,98,688,1,0,0,0,100,690,1,0,
        0,0,102,715,1,0,0,0,104,717,1,0,0,0,106,720,1,0,0,0,108,722,1,0,
        0,0,110,724,1,0,0,0,112,726,1,0,0,0,114,728,1,0,0,0,116,730,1,0,
        0,0,118,735,1,0,0,0,120,739,1,0,0,0,122,755,1,0,0,0,124,757,1,0,
        0,0,126,762,1,0,0,0,128,768,1,0,0,0,130,777,1,0,0,0,132,785,1,0,
        0,0,134,790,1,0,0,0,136,795,1,0,0,0,138,800,1,0,0,0,140,805,1,0,
        0,0,142,822,1,0,0,0,144,826,1,0,0,0,146,828,1,0,0,0,148,830,1,0,
        0,0,150,837,1,0,0,0,152,847,1,0,0,0,154,853,1,0,0,0,156,857,1,0,
        0,0,158,864,1,0,0,0,160,875,1,0,0,0,162,896,1,0,0,0,164,917,1,0,
        0,0,166,919,1,0,0,0,168,924,1,0,0,0,170,935,1,0,0,0,172,942,1,0,
        0,0,174,944,1,0,0,0,176,948,1,0,0,0,178,955,1,0,0,0,180,975,1,0,
        0,0,182,982,1,0,0,0,184,1000,1,0,0,0,186,1020,1,0,0,0,188,1022,1,
        0,0,0,190,1026,1,0,0,0,192,1044,1,0,0,0,194,1046,1,0,0,0,196,1054,
        1,0,0,0,198,1092,1,0,0,0,200,1094,1,0,0,0,202,1104,1,0,0,0,204,1116,
        1,0,0,0,206,1126,1,0,0,0,208,1137,1,0,0,0,210,1148,1,0,0,0,212,1158,
        1,0,0,0,214,216,5,98,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,
        1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,
        3,2,1,0,221,1,1,0,0,0,222,224,3,212,106,0,223,222,1,0,0,0,223,224,
        1,0,0,0,224,228,1,0,0,0,225,227,3,4,2,0,226,225,1,0,0,0,227,230,
        1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,3,1,0,0,0,230,228,1,
        0,0,0,231,241,3,6,3,0,232,241,3,8,4,0,233,235,5,99,0,0,234,233,1,
        0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,238,5,37,0,0,237,234,1,
        0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,241,3,10,5,0,240,231,1,
        0,0,0,240,232,1,0,0,0,240,237,1,0,0,0,241,5,1,0,0,0,242,244,5,43,
        0,0,243,245,7,0,0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,
        0,0,246,247,3,78,39,0,247,7,1,0,0,0,248,249,5,13,0,0,249,250,3,78,
        39,0,250,9,1,0,0,0,251,253,3,12,6,0,252,251,1,0,0,0,252,253,1,0,
        0,0,253,254,1,0,0,0,254,257,3,18,9,0,255,258,5,91,0,0,256,258,3,
        78,39,0,257,255,1,0,0,0,257,256,1,0,0,0,258,271,1,0,0,0,259,261,
        3,14,7,0,260,259,1,0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,262,264,
        5,44,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,271,
        3,22,11,0,266,267,5,48,0,0,267,268,3,48,24,0,268,269,5,91,0,0,269,
        271,1,0,0,0,270,252,1,0,0,0,270,260,1,0,0,0,270,266,1,0,0,0,271,
        11,1,0,0,0,272,280,5,21,0,0,273,275,5,22,0,0,274,276,5,64,0,0,275,
        274,1,0,0,0,275,276,1,0,0,0,276,280,1,0,0,0,277,280,5,26,0,0,278,
        280,5,30,0,0,279,272,1,0,0,0,279,273,1,0,0,0,279,277,1,0,0,0,279,
        278,1,0,0,0,280,13,1,0,0,0,281,287,5,21,0,0,282,284,5,22,0,0,283,
        285,5,64,0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,
        281,1,0,0,0,286,282,1,0,0,0,287,15,1,0,0,0,288,290,7,1,0,0,289,288,
        1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,292,3,196,98,0,292,17,
        1,0,0,0,293,295,5,23,0,0,294,296,5,60,0,0,295,294,1,0,0,0,295,296,
        1,0,0,0,296,297,1,0,0,0,297,298,5,66,0,0,298,299,3,208,104,0,299,
        301,5,67,0,0,300,302,3,200,100,0,301,300,1,0,0,0,301,302,1,0,0,0,
        302,304,1,0,0,0,303,305,3,138,69,0,304,303,1,0,0,0,304,305,1,0,0,
        0,305,307,1,0,0,0,306,308,3,136,68,0,307,306,1,0,0,0,307,308,1,0,
        0,0,308,310,1,0,0,0,309,311,3,140,70,0,310,309,1,0,0,0,310,311,1,
        0,0,0,311,314,1,0,0,0,312,313,5,6,0,0,313,315,5,75,0,0,314,312,1,
        0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,3,90,45,0,317,19,1,
        0,0,0,318,319,5,60,0,0,319,21,1,0,0,0,320,321,7,2,0,0,321,324,3,
        20,10,0,322,323,5,77,0,0,323,325,3,90,45,0,324,322,1,0,0,0,324,325,
        1,0,0,0,325,327,1,0,0,0,326,328,3,200,100,0,327,326,1,0,0,0,327,
        328,1,0,0,0,328,330,1,0,0,0,329,331,3,138,69,0,330,329,1,0,0,0,330,
        331,1,0,0,0,331,333,1,0,0,0,332,334,3,136,68,0,333,332,1,0,0,0,333,
        334,1,0,0,0,334,337,1,0,0,0,335,336,5,82,0,0,336,338,3,48,24,0,337,
        335,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,340,5,91,0,0,340,
        23,1,0,0,0,341,342,5,60,0,0,342,25,1,0,0,0,343,345,5,99,0,0,344,
        343,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,348,5,13,0,0,347,
        346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,352,3,24,12,0,350,
        351,5,77,0,0,351,353,3,90,45,0,352,350,1,0,0,0,352,353,1,0,0,0,353,
        355,1,0,0,0,354,356,3,200,100,0,355,354,1,0,0,0,355,356,1,0,0,0,
        356,359,1,0,0,0,357,358,5,82,0,0,358,360,3,48,24,0,359,357,1,0,0,
        0,359,360,1,0,0,0,360,27,1,0,0,0,361,363,5,13,0,0,362,361,1,0,0,
        0,362,363,1,0,0,0,363,364,1,0,0,0,364,385,3,22,11,0,365,366,5,13,
        0,0,366,385,3,42,21,0,367,368,5,32,0,0,368,385,3,42,21,0,369,370,
        5,41,0,0,370,385,3,42,21,0,371,372,5,16,0,0,372,385,3,42,21,0,373,
        375,5,19,0,0,374,376,3,154,77,0,375,374,1,0,0,0,375,376,1,0,0,0,
        376,377,1,0,0,0,377,385,3,42,21,0,378,385,3,32,16,0,379,385,3,34,
        17,0,380,385,3,130,65,0,381,382,3,46,23,0,382,383,5,91,0,0,383,385,
        1,0,0,0,384,362,1,0,0,0,384,365,1,0,0,0,384,367,1,0,0,0,384,369,
        1,0,0,0,384,371,1,0,0,0,384,373,1,0,0,0,384,378,1,0,0,0,384,379,
        1,0,0,0,384,380,1,0,0,0,384,381,1,0,0,0,385,29,1,0,0,0,386,387,3,
        28,14,0,387,31,1,0,0,0,388,389,3,148,74,0,389,395,3,44,22,0,390,
        392,5,17,0,0,391,393,3,154,77,0,392,391,1,0,0,0,392,393,1,0,0,0,
        393,394,1,0,0,0,394,396,3,30,15,0,395,390,1,0,0,0,395,396,1,0,0,
        0,396,408,1,0,0,0,397,398,3,148,74,0,398,405,3,46,23,0,399,406,5,
        91,0,0,400,402,5,17,0,0,401,403,3,154,77,0,402,401,1,0,0,0,402,403,
        1,0,0,0,403,404,1,0,0,0,404,406,3,30,15,0,405,399,1,0,0,0,405,400,
        1,0,0,0,406,408,1,0,0,0,407,388,1,0,0,0,407,397,1,0,0,0,408,33,1,
        0,0,0,409,411,3,68,34,0,410,409,1,0,0,0,410,411,1,0,0,0,411,414,
        1,0,0,0,412,415,3,78,39,0,413,415,3,36,18,0,414,412,1,0,0,0,414,
        413,1,0,0,0,415,35,1,0,0,0,416,419,5,26,0,0,417,420,3,38,19,0,418,
        420,3,40,20,0,419,417,1,0,0,0,419,418,1,0,0,0,420,37,1,0,0,0,421,
        422,3,152,76,0,422,425,3,44,22,0,423,424,5,17,0,0,424,426,3,28,14,
        0,425,423,1,0,0,0,425,426,1,0,0,0,426,435,1,0,0,0,427,428,3,152,
        76,0,428,432,3,46,23,0,429,433,5,91,0,0,430,431,5,17,0,0,431,433,
        3,28,14,0,432,429,1,0,0,0,432,430,1,0,0,0,433,435,1,0,0,0,434,421,
        1,0,0,0,434,427,1,0,0,0,435,39,1,0,0,0,436,437,3,150,75,0,437,440,
        3,44,22,0,438,439,5,17,0,0,439,441,3,28,14,0,440,438,1,0,0,0,440,
        441,1,0,0,0,441,450,1,0,0,0,442,443,3,150,75,0,443,447,3,46,23,0,
        444,448,5,91,0,0,445,446,5,17,0,0,446,448,3,28,14,0,447,444,1,0,
        0,0,447,445,1,0,0,0,448,450,1,0,0,0,449,436,1,0,0,0,449,442,1,0,
        0,0,450,41,1,0,0,0,451,456,3,44,22,0,452,453,3,46,23,0,453,454,5,
        91,0,0,454,456,1,0,0,0,455,451,1,0,0,0,455,452,1,0,0,0,456,43,1,
        0,0,0,457,459,3,68,34,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,
        1,0,0,0,460,461,3,78,39,0,461,45,1,0,0,0,462,466,3,48,24,0,463,464,
        3,172,86,0,464,465,3,48,24,0,465,467,1,0,0,0,466,463,1,0,0,0,466,
        467,1,0,0,0,467,47,1,0,0,0,468,469,3,50,25,0,469,49,1,0,0,0,470,
        475,3,52,26,0,471,472,5,34,0,0,472,474,3,52,26,0,473,471,1,0,0,0,
        474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,51,1,0,0,0,477,
        475,1,0,0,0,478,483,3,54,27,0,479,480,5,4,0,0,480,482,3,54,27,0,
        481,479,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,
        484,53,1,0,0,0,485,483,1,0,0,0,486,492,3,56,28,0,487,488,3,174,87,
        0,488,489,3,56,28,0,489,491,1,0,0,0,490,487,1,0,0,0,491,494,1,0,
        0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,55,1,0,0,0,494,492,1,0,0,
        0,495,501,3,58,29,0,496,497,3,176,88,0,497,498,3,58,29,0,498,500,
        1,0,0,0,499,496,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,
        1,0,0,0,502,57,1,0,0,0,503,501,1,0,0,0,504,509,3,60,30,0,505,506,
        5,55,0,0,506,508,3,60,30,0,507,505,1,0,0,0,508,511,1,0,0,0,509,507,
        1,0,0,0,509,510,1,0,0,0,510,59,1,0,0,0,511,509,1,0,0,0,512,517,3,
        62,31,0,513,514,5,56,0,0,514,516,3,62,31,0,515,513,1,0,0,0,516,519,
        1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,61,1,0,0,0,519,517,1,
        0,0,0,520,525,3,64,32,0,521,522,5,57,0,0,522,524,3,64,32,0,523,521,
        1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,63,1,
        0,0,0,527,525,1,0,0,0,528,530,5,58,0,0,529,528,1,0,0,0,530,533,1,
        0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,531,1,
        0,0,0,534,535,3,70,35,0,535,65,1,0,0,0,536,537,5,77,0,0,537,538,
        5,60,0,0,538,67,1,0,0,0,539,540,5,60,0,0,540,541,5,77,0,0,541,69,
        1,0,0,0,542,571,3,76,38,0,543,545,5,10,0,0,544,546,3,66,33,0,545,
        544,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,549,3,48,24,0,548,
        547,1,0,0,0,548,549,1,0,0,0,549,571,1,0,0,0,550,551,5,13,0,0,551,
        571,3,48,24,0,552,553,5,32,0,0,553,571,3,48,24,0,554,556,5,15,0,
        0,555,557,3,66,33,0,556,555,1,0,0,0,556,557,1,0,0,0,557,571,1,0,
        0,0,558,559,5,38,0,0,559,571,3,48,24,0,560,562,5,39,0,0,561,563,
        3,48,24,0,562,561,1,0,0,0,562,563,1,0,0,0,563,571,1,0,0,0,564,566,
        3,68,34,0,565,564,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,571,
        3,80,40,0,568,571,3,78,39,0,569,571,3,86,43,0,570,542,1,0,0,0,570,
        543,1,0,0,0,570,550,1,0,0,0,570,552,1,0,0,0,570,554,1,0,0,0,570,
        558,1,0,0,0,570,560,1,0,0,0,570,565,1,0,0,0,570,568,1,0,0,0,570,
        569,1,0,0,0,571,71,1,0,0,0,572,573,3,48,24,0,573,73,1,0,0,0,574,
        575,3,48,24,0,575,75,1,0,0,0,576,577,3,148,74,0,577,583,3,72,36,
        0,578,580,5,17,0,0,579,581,3,154,77,0,580,579,1,0,0,0,580,581,1,
        0,0,0,581,582,1,0,0,0,582,584,3,74,37,0,583,578,1,0,0,0,583,584,
        1,0,0,0,584,77,1,0,0,0,585,589,5,68,0,0,586,588,3,28,14,0,587,586,
        1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,592,
        1,0,0,0,591,589,1,0,0,0,592,593,5,69,0,0,593,79,1,0,0,0,594,596,
        5,26,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,599,1,0,0,0,597,600,
        3,82,41,0,598,600,3,84,42,0,599,597,1,0,0,0,599,598,1,0,0,0,600,
        81,1,0,0,0,601,602,3,152,76,0,602,605,3,48,24,0,603,604,5,17,0,0,
        604,606,3,48,24,0,605,603,1,0,0,0,605,606,1,0,0,0,606,83,1,0,0,0,
        607,608,3,150,75,0,608,614,3,48,24,0,609,611,5,17,0,0,610,612,3,
        154,77,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,615,
        3,48,24,0,614,609,1,0,0,0,614,615,1,0,0,0,615,85,1,0,0,0,616,618,
        3,90,45,0,617,619,3,88,44,0,618,617,1,0,0,0,618,619,1,0,0,0,619,
        87,1,0,0,0,620,621,5,68,0,0,621,626,3,132,66,0,622,623,5,78,0,0,
        623,625,3,132,66,0,624,622,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,
        0,626,627,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,629,631,5,78,0,
        0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,5,69,0,
        0,633,651,1,0,0,0,634,635,5,68,0,0,635,640,3,48,24,0,636,637,5,78,
        0,0,637,639,3,48,24,0,638,636,1,0,0,0,639,642,1,0,0,0,640,638,1,
        0,0,0,640,641,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,643,645,5,
        78,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,647,5,
        69,0,0,647,651,1,0,0,0,648,649,5,68,0,0,649,651,5,69,0,0,650,620,
        1,0,0,0,650,634,1,0,0,0,650,648,1,0,0,0,651,89,1,0,0,0,652,654,3,
        180,90,0,653,652,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,
        1,0,0,0,656,658,1,0,0,0,657,655,1,0,0,0,658,659,3,92,46,0,659,91,
        1,0,0,0,660,663,3,94,47,0,661,662,5,75,0,0,662,664,3,90,45,0,663,
        661,1,0,0,0,663,664,1,0,0,0,664,93,1,0,0,0,665,666,5,8,0,0,666,670,
        3,102,51,0,667,669,3,186,93,0,668,667,1,0,0,0,669,672,1,0,0,0,670,
        668,1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,670,1,0,0,0,673,
        674,3,188,94,0,674,683,1,0,0,0,675,679,3,102,51,0,676,678,3,96,48,
        0,677,676,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,
        0,680,683,1,0,0,0,681,679,1,0,0,0,682,665,1,0,0,0,682,675,1,0,0,
        0,683,95,1,0,0,0,684,687,3,186,93,0,685,687,3,188,94,0,686,684,1,
        0,0,0,686,685,1,0,0,0,687,97,1,0,0,0,688,689,5,60,0,0,689,99,1,0,
        0,0,690,691,5,13,0,0,691,692,3,90,45,0,692,101,1,0,0,0,693,716,3,
        104,52,0,694,716,3,110,55,0,695,716,3,10,5,0,696,697,5,79,0,0,697,
        716,5,60,0,0,698,716,3,116,58,0,699,716,3,108,54,0,700,716,3,18,
        9,0,701,716,3,118,59,0,702,716,3,122,61,0,703,716,3,98,49,0,704,
        716,3,120,60,0,705,716,3,106,53,0,706,716,3,100,50,0,707,708,5,20,
        0,0,708,709,5,79,0,0,709,716,5,60,0,0,710,716,5,5,0,0,711,716,5,
        47,0,0,712,716,3,112,56,0,713,716,3,114,57,0,714,716,3,130,65,0,
        715,693,1,0,0,0,715,694,1,0,0,0,715,695,1,0,0,0,715,696,1,0,0,0,
        715,698,1,0,0,0,715,699,1,0,0,0,715,700,1,0,0,0,715,701,1,0,0,0,
        715,702,1,0,0,0,715,703,1,0,0,0,715,704,1,0,0,0,715,705,1,0,0,0,
        715,706,1,0,0,0,715,707,1,0,0,0,715,710,1,0,0,0,715,711,1,0,0,0,
        715,712,1,0,0,0,715,713,1,0,0,0,715,714,1,0,0,0,716,103,1,0,0,0,
        717,718,5,59,0,0,718,719,3,188,94,0,719,105,1,0,0,0,720,721,5,61,
        0,0,721,107,1,0,0,0,722,723,5,62,0,0,723,109,1,0,0,0,724,725,5,63,
        0,0,725,111,1,0,0,0,726,727,5,64,0,0,727,113,1,0,0,0,728,729,5,65,
        0,0,729,115,1,0,0,0,730,731,5,20,0,0,731,732,5,68,0,0,732,733,3,
        202,101,0,733,734,5,69,0,0,734,117,1,0,0,0,735,736,5,66,0,0,736,
        737,3,48,24,0,737,738,5,67,0,0,738,119,1,0,0,0,739,740,3,148,74,
        0,740,746,3,90,45,0,741,743,5,17,0,0,742,744,3,154,77,0,743,742,
        1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,747,3,90,45,0,746,741,
        1,0,0,0,746,747,1,0,0,0,747,121,1,0,0,0,748,749,3,68,34,0,749,750,
        3,78,39,0,750,756,1,0,0,0,751,753,3,68,34,0,752,751,1,0,0,0,752,
        753,1,0,0,0,753,754,1,0,0,0,754,756,3,124,62,0,755,748,1,0,0,0,755,
        752,1,0,0,0,756,123,1,0,0,0,757,760,5,26,0,0,758,761,3,126,63,0,
        759,761,3,128,64,0,760,758,1,0,0,0,760,759,1,0,0,0,761,125,1,0,0,
        0,762,763,3,152,76,0,763,766,3,90,45,0,764,765,5,17,0,0,765,767,
        3,90,45,0,766,764,1,0,0,0,766,767,1,0,0,0,767,127,1,0,0,0,768,769,
        3,150,75,0,769,775,3,90,45,0,770,772,5,17,0,0,771,773,3,154,77,0,
        772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,776,3,90,45,
        0,775,770,1,0,0,0,775,776,1,0,0,0,776,129,1,0,0,0,777,778,5,42,0,
        0,778,779,5,66,0,0,779,780,3,48,24,0,780,781,5,67,0,0,781,782,5,
        68,0,0,782,783,3,204,102,0,783,784,5,69,0,0,784,131,1,0,0,0,785,
        786,5,79,0,0,786,787,5,60,0,0,787,788,5,82,0,0,788,789,3,48,24,0,
        789,133,1,0,0,0,790,791,5,77,0,0,791,792,5,66,0,0,792,793,3,46,23,
        0,793,794,5,67,0,0,794,135,1,0,0,0,795,796,5,28,0,0,796,797,5,66,
        0,0,797,798,3,48,24,0,798,799,5,67,0,0,799,137,1,0,0,0,800,801,5,
        1,0,0,801,802,5,66,0,0,802,803,3,48,24,0,803,804,5,67,0,0,804,139,
        1,0,0,0,805,806,5,11,0,0,806,807,5,66,0,0,807,808,3,48,24,0,808,
        809,5,67,0,0,809,141,1,0,0,0,810,812,5,99,0,0,811,810,1,0,0,0,811,
        812,1,0,0,0,812,814,1,0,0,0,813,815,7,3,0,0,814,813,1,0,0,0,814,
        815,1,0,0,0,815,818,1,0,0,0,816,817,5,60,0,0,817,819,5,77,0,0,818,
        816,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,823,3,144,72,0,821,
        823,5,81,0,0,822,811,1,0,0,0,822,821,1,0,0,0,823,143,1,0,0,0,824,
        827,5,7,0,0,825,827,3,90,45,0,826,824,1,0,0,0,826,825,1,0,0,0,827,
        145,1,0,0,0,828,829,3,48,24,0,829,147,1,0,0,0,830,831,5,25,0,0,831,
        832,5,66,0,0,832,833,3,146,73,0,833,835,5,67,0,0,834,836,3,156,78,
        0,835,834,1,0,0,0,835,836,1,0,0,0,836,149,1,0,0,0,837,838,5,51,0,
        0,838,839,5,66,0,0,839,840,3,146,73,0,840,842,5,67,0,0,841,843,3,
        156,78,0,842,841,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,846,
        3,134,67,0,845,844,1,0,0,0,845,846,1,0,0,0,846,151,1,0,0,0,847,848,
        5,24,0,0,848,849,5,66,0,0,849,850,3,168,84,0,850,851,5,67,0,0,851,
        852,3,160,80,0,852,153,1,0,0,0,853,854,5,89,0,0,854,855,5,60,0,0,
        855,856,5,89,0,0,856,155,1,0,0,0,857,859,5,89,0,0,858,860,5,93,0,
        0,859,858,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,862,5,60,0,
        0,862,863,5,89,0,0,863,157,1,0,0,0,864,866,5,89,0,0,865,867,5,93,
        0,0,866,865,1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,871,5,60,
        0,0,869,870,5,78,0,0,870,872,5,60,0,0,871,869,1,0,0,0,871,872,1,
        0,0,0,872,873,1,0,0,0,873,874,5,89,0,0,874,159,1,0,0,0,875,877,5,
        89,0,0,876,878,5,93,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,
        1,0,0,0,879,887,5,60,0,0,880,882,5,78,0,0,881,883,5,93,0,0,882,881,
        1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,886,5,60,0,0,885,880,
        1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,891,
        1,0,0,0,889,887,1,0,0,0,890,892,5,78,0,0,891,890,1,0,0,0,891,892,
        1,0,0,0,892,893,1,0,0,0,893,894,5,89,0,0,894,161,1,0,0,0,895,897,
        5,26,0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,899,
        3,164,82,0,899,901,5,84,0,0,900,902,3,158,79,0,901,900,1,0,0,0,901,
        902,1,0,0,0,902,903,1,0,0,0,903,904,3,46,23,0,904,163,1,0,0,0,905,
        910,3,166,83,0,906,907,5,78,0,0,907,909,3,166,83,0,908,906,1,0,0,
        0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,914,1,0,0,
        0,912,910,1,0,0,0,913,915,5,78,0,0,914,913,1,0,0,0,914,915,1,0,0,
        0,915,918,1,0,0,0,916,918,5,17,0,0,917,905,1,0,0,0,917,916,1,0,0,
        0,918,165,1,0,0,0,919,922,3,48,24,0,920,921,5,81,0,0,921,923,3,48,
        24,0,922,920,1,0,0,0,922,923,1,0,0,0,923,167,1,0,0,0,924,929,3,170,
        85,0,925,926,5,78,0,0,926,928,3,170,85,0,927,925,1,0,0,0,928,931,
        1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,933,1,0,0,0,931,929,
        1,0,0,0,932,934,5,78,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,169,
        1,0,0,0,935,940,3,48,24,0,936,938,5,80,0,0,937,939,3,48,24,0,938,
        937,1,0,0,0,938,939,1,0,0,0,939,941,1,0,0,0,940,936,1,0,0,0,940,
        941,1,0,0,0,941,171,1,0,0,0,942,943,7,4,0,0,943,173,1,0,0,0,944,
        945,7,5,0,0,945,175,1,0,0,0,946,949,5,54,0,0,947,949,3,178,89,0,
        948,946,1,0,0,0,948,947,1,0,0,0,949,177,1,0,0,0,950,956,5,35,0,0,
        951,953,5,12,0,0,952,954,3,154,77,0,953,952,1,0,0,0,953,954,1,0,
        0,0,954,956,1,0,0,0,955,950,1,0,0,0,955,951,1,0,0,0,956,179,1,0,
        0,0,957,976,5,95,0,0,958,959,5,5,0,0,959,976,5,87,0,0,960,964,3,
        190,95,0,961,963,3,182,91,0,962,961,1,0,0,0,963,966,1,0,0,0,964,
        962,1,0,0,0,964,965,1,0,0,0,965,976,1,0,0,0,966,964,1,0,0,0,967,
        971,3,192,96,0,968,970,3,184,92,0,969,968,1,0,0,0,970,973,1,0,0,
        0,971,969,1,0,0,0,971,972,1,0,0,0,972,976,1,0,0,0,973,971,1,0,0,
        0,974,976,3,194,97,0,975,957,1,0,0,0,975,958,1,0,0,0,975,960,1,0,
        0,0,975,967,1,0,0,0,975,974,1,0,0,0,976,181,1,0,0,0,977,983,3,200,
        100,0,978,983,3,138,69,0,979,983,5,14,0,0,980,983,5,50,0,0,981,983,
        5,3,0,0,982,977,1,0,0,0,982,978,1,0,0,0,982,979,1,0,0,0,982,980,
        1,0,0,0,982,981,1,0,0,0,983,183,1,0,0,0,984,1001,3,138,69,0,985,
        986,5,2,0,0,986,987,5,66,0,0,987,993,3,48,24,0,988,989,5,77,0,0,
        989,990,3,48,24,0,990,991,5,77,0,0,991,992,3,48,24,0,992,994,1,0,
        0,0,993,988,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,67,
        0,0,996,1001,1,0,0,0,997,1001,5,14,0,0,998,1001,5,50,0,0,999,1001,
        5,3,0,0,1000,984,1,0,0,0,1000,985,1,0,0,0,1000,997,1,0,0,0,1000,
        998,1,0,0,0,1000,999,1,0,0,0,1001,185,1,0,0,0,1002,1003,5,70,0,0,
        1003,1012,3,48,24,0,1004,1010,5,80,0,0,1005,1008,3,48,24,0,1006,
        1007,5,77,0,0,1007,1009,3,48,24,0,1008,1006,1,0,0,0,1008,1009,1,
        0,0,0,1009,1011,1,0,0,0,1010,1005,1,0,0,0,1010,1011,1,0,0,0,1011,
        1013,1,0,0,0,1012,1004,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,
        0,1014,1015,5,71,0,0,1015,1021,1,0,0,0,1016,1017,5,79,0,0,1017,1021,
        5,60,0,0,1018,1021,5,96,0,0,1019,1021,5,97,0,0,1020,1002,1,0,0,0,
        1020,1016,1,0,0,0,1020,1018,1,0,0,0,1020,1019,1,0,0,0,1021,187,1,
        0,0,0,1022,1023,5,66,0,0,1023,1024,3,210,105,0,1024,1025,5,67,0,
        0,1025,189,1,0,0,0,1026,1029,5,70,0,0,1027,1028,5,77,0,0,1028,1030,
        3,48,24,0,1029,1027,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,
        1031,1032,5,71,0,0,1032,191,1,0,0,0,1033,1045,5,93,0,0,1034,1035,
        5,93,0,0,1035,1045,5,93,0,0,1036,1037,5,70,0,0,1037,1041,5,93,0,
        0,1038,1042,5,27,0,0,1039,1040,5,77,0,0,1040,1042,3,48,24,0,1041,
        1038,1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,
        0,1043,1045,5,71,0,0,1044,1033,1,0,0,0,1044,1034,1,0,0,0,1044,1036,
        1,0,0,0,1045,193,1,0,0,0,1046,1047,5,70,0,0,1047,1050,3,48,24,0,
        1048,1049,5,77,0,0,1049,1051,3,48,24,0,1050,1048,1,0,0,0,1050,1051,
        1,0,0,0,1051,1052,1,0,0,0,1052,1053,5,71,0,0,1053,195,1,0,0,0,1054,
        1055,3,198,99,0,1055,1057,5,68,0,0,1056,1058,5,99,0,0,1057,1056,
        1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1060,3,2,1,0,1060,
        1061,5,69,0,0,1061,197,1,0,0,0,1062,1067,5,40,0,0,1063,1064,5,66,
        0,0,1064,1065,3,48,24,0,1065,1066,5,67,0,0,1066,1068,1,0,0,0,1067,
        1063,1,0,0,0,1067,1068,1,0,0,0,1068,1093,1,0,0,0,1069,1093,5,33,
        0,0,1070,1075,5,18,0,0,1071,1072,5,66,0,0,1072,1073,3,48,24,0,1073,
        1074,5,67,0,0,1074,1076,1,0,0,0,1075,1071,1,0,0,0,1075,1076,1,0,
        0,0,1076,1093,1,0,0,0,1077,1090,5,46,0,0,1078,1087,5,66,0,0,1079,
        1084,5,18,0,0,1080,1081,5,66,0,0,1081,1082,3,48,24,0,1082,1083,5,
        67,0,0,1083,1085,1,0,0,0,1084,1080,1,0,0,0,1084,1085,1,0,0,0,1085,
        1088,1,0,0,0,1086,1088,3,48,24,0,1087,1079,1,0,0,0,1087,1086,1,0,
        0,0,1088,1089,1,0,0,0,1089,1091,5,67,0,0,1090,1078,1,0,0,0,1090,
        1091,1,0,0,0,1091,1093,1,0,0,0,1092,1062,1,0,0,0,1092,1069,1,0,0,
        0,1092,1070,1,0,0,0,1092,1077,1,0,0,0,1093,199,1,0,0,0,1094,1095,
        5,2,0,0,1095,1096,5,66,0,0,1096,1097,3,48,24,0,1097,1098,5,67,0,
        0,1098,201,1,0,0,0,1099,1100,5,99,0,0,1100,1101,5,60,0,0,1101,1103,
        5,78,0,0,1102,1099,1,0,0,0,1103,1106,1,0,0,0,1104,1102,1,0,0,0,1104,
        1105,1,0,0,0,1105,1109,1,0,0,0,1106,1104,1,0,0,0,1107,1108,5,99,
        0,0,1108,1110,5,60,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,
        203,1,0,0,0,1111,1112,3,162,81,0,1112,1113,5,78,0,0,1113,1115,1,
        0,0,0,1114,1111,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,
        1117,1,0,0,0,1117,1120,1,0,0,0,1118,1116,1,0,0,0,1119,1121,3,162,
        81,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,205,1,0,0,0,1122,1123,
        5,64,0,0,1123,1125,5,78,0,0,1124,1122,1,0,0,0,1125,1128,1,0,0,0,
        1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,1130,1,0,0,0,1128,1126,
        1,0,0,0,1129,1131,5,64,0,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,
        207,1,0,0,0,1132,1133,3,142,71,0,1133,1134,5,78,0,0,1134,1136,1,
        0,0,0,1135,1132,1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,1137,
        1138,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1140,1142,3,142,
        71,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,209,1,0,0,0,1143,1144,
        3,48,24,0,1144,1145,5,78,0,0,1145,1147,1,0,0,0,1146,1143,1,0,0,0,
        1147,1150,1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1151,
        1,0,0,0,1150,1148,1,0,0,0,1151,1152,3,48,24,0,1152,211,1,0,0,0,1153,
        1154,3,26,13,0,1154,1155,5,78,0,0,1155,1157,1,0,0,0,1156,1153,1,
        0,0,0,1157,1160,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,
        1161,1,0,0,0,1160,1158,1,0,0,0,1161,1162,3,26,13,0,1162,213,1,0,
        0,0,155,217,223,228,234,237,240,244,252,257,260,263,270,275,279,
        284,286,289,295,301,304,307,310,314,324,327,330,333,337,344,347,
        352,355,359,362,375,384,392,395,402,405,407,410,414,419,425,432,
        434,440,447,449,455,458,466,475,483,492,501,509,517,525,531,545,
        548,556,562,565,570,580,583,589,595,599,605,611,614,618,626,630,
        640,644,650,655,663,670,679,682,686,715,743,746,752,755,760,766,
        772,775,811,814,818,822,826,835,842,845,859,866,871,877,882,887,
        891,896,901,910,914,917,922,929,933,938,940,948,953,955,964,971,
        975,982,993,1000,1008,1010,1012,1020,1029,1041,1044,1050,1057,1067,
        1075,1084,1087,1090,1092,1104,1109,1116,1120,1126,1130,1137,1141,
        1148,1158
    ]

class ZigParser ( Parser ):

    grammarFileName = "ZigParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'addrspace'", "'align'", "'allowzero'", 
                     "'and'", "'anyframe'", "'anyerror'", "'anytype'", "'async'", 
                     "'await'", "'break'", "'callconv'", "'catch'", "'comptime'", 
                     "'const'", "'continue'", "'defer'", "'else'", "'enum'", 
                     "'errdefer'", "'error'", "'export'", "'extern'", "'fn'", 
                     "'for'", "'if'", "'inline'", "'c'", "'linksection'", 
                     "'noalias'", "'noinline'", "'noreturn'", "'nosuspend'", 
                     "'opaque'", "'or'", "'orelse'", "'packed'", "'pub'", 
                     "'resume'", "'return'", "'struct'", "'suspend'", "'switch'", 
                     "'test'", "'threadlocal'", "'try'", "'union'", "'unreachable'", 
                     "'usingnamespace'", "'var'", "'volatile'", "'while'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "'&'", "'@'", "'\\\\'", "'!'", "'^'", 
                     "':'", "','", "'.'", "'..'", "'...'", "'='", "'=='", 
                     "'=>'", "'\\'", "'-'", "'->'", "'-%'", "'|'", "'+'", 
                     "';'", "'/'", "'*'", "'~'", "'?'", "'.*'", "'.?'" ]

    symbolicNames = [ "<INVALID>", "AddrSpace", "Align", "AllowZero", "And", 
                      "AnyFrame", "AnyError", "AnyType", "Async", "Await", 
                      "Break", "CallConv", "Catch", "CompTime", "Const", 
                      "Continue", "Defer", "Else", "Enum", "ErrDefer", "Error", 
                      "Export", "Extern", "Fn", "For", "If", "Inline", "LetterC", 
                      "LinkSection", "NoAlias", "NoInline", "NoReturn", 
                      "NoSuspend", "Opaque", "Or", "OrElse", "Packed", "Pub", 
                      "Resume", "Return", "Struct", "Suspend", "Switch", 
                      "Test", "ThreadLocal", "Try", "Union", "Unreachable", 
                      "UsingNamespace", "Var", "Volatile", "While", "AssignOp", 
                      "CompareOp", "BitwiseOp", "BitShiftOp", "AdditionOp", 
                      "MultiplyOp", "PrefixOp", "BuiltinIdent", "Ident", 
                      "Integer", "Float", "Char", "SingleString", "LineString", 
                      "LParen", "RParen", "LBrace", "RBrace", "LBrack", 
                      "RBrack", "Amp", "At", "BackSlash2", "Bang", "Caret", 
                      "Colon", "Comma", "Dot", "Dot2", "Ellipsis", "Equal", 
                      "Equal2", "EqualArrow", "Esc", "Minus", "MinusArrow", 
                      "MinusPct", "Pipe", "Plus", "Semi", "Slash", "Star", 
                      "Tilde", "Question", "DotStar", "DotQue", "ContainerDocComment", 
                      "DocComment", "LineComment", "Ws" ]

    RULE_start = 0
    RULE_members = 1
    RULE_declaration = 2
    RULE_testDecl = 3
    RULE_comptimeDecl = 4
    RULE_decl = 5
    RULE_fnProtoDeclEx = 6
    RULE_varDeclEx = 7
    RULE_decl2 = 8
    RULE_fnProto = 9
    RULE_varName = 10
    RULE_varDecl = 11
    RULE_fieldName = 12
    RULE_field = 13
    RULE_stmt = 14
    RULE_elseStmt = 15
    RULE_ifStmt = 16
    RULE_labeledStmt = 17
    RULE_loopStmt = 18
    RULE_forStmt = 19
    RULE_whileStmt = 20
    RULE_blockExprStmt = 21
    RULE_blockExpr = 22
    RULE_assignExpr = 23
    RULE_expr = 24
    RULE_boolOrExpr = 25
    RULE_boolAndExpr = 26
    RULE_compareExpr = 27
    RULE_bitwiseExpr = 28
    RULE_bitShiftExpr = 29
    RULE_additionExpr = 30
    RULE_multiplyExpr = 31
    RULE_prefixExpr = 32
    RULE_breakLabel = 33
    RULE_blockLabel = 34
    RULE_primaryExpr = 35
    RULE_thenExpr = 36
    RULE_elseExpr = 37
    RULE_ifExpr = 38
    RULE_block = 39
    RULE_loopExpr = 40
    RULE_forExpr = 41
    RULE_whileExpr = 42
    RULE_curlySuffixExpr = 43
    RULE_initList = 44
    RULE_typeExpr = 45
    RULE_errorUnionExpr = 46
    RULE_suffixExpr = 47
    RULE_designatorExpr = 48
    RULE_typeName = 49
    RULE_compTimeTypeExpr = 50
    RULE_primaryTypeExpr = 51
    RULE_primaryBiCall = 52
    RULE_integerLiteral = 53
    RULE_floatingLiteral = 54
    RULE_charLiteral = 55
    RULE_singleStringLiteral = 56
    RULE_lineStringLiteral = 57
    RULE_errorSetDecl = 58
    RULE_groupedExpr = 59
    RULE_ifTypeExpr = 60
    RULE_labeledTypeExpr = 61
    RULE_loopTypeExpr = 62
    RULE_forTypeExpr = 63
    RULE_whileTypeExpr = 64
    RULE_switchExpr = 65
    RULE_fieldInit = 66
    RULE_whileContinueExpr = 67
    RULE_linkSection = 68
    RULE_addrSpace = 69
    RULE_callConv = 70
    RULE_paramDecl = 71
    RULE_paramType = 72
    RULE_condExpr = 73
    RULE_ifPrefix = 74
    RULE_whilePrefix = 75
    RULE_forPrefix = 76
    RULE_payload = 77
    RULE_ptrPayload = 78
    RULE_ptrIndexPayload = 79
    RULE_ptrListPayload = 80
    RULE_switchProng = 81
    RULE_switchCase = 82
    RULE_switchItem = 83
    RULE_forArgumentsList = 84
    RULE_forItem = 85
    RULE_assignOpExpr = 86
    RULE_compareOpExpr = 87
    RULE_bitwiseOpExpr = 88
    RULE_bitwiseKwExpr = 89
    RULE_prefixTypeOp = 90
    RULE_sliceTypeRest = 91
    RULE_ptrTypeRest = 92
    RULE_suffixOp = 93
    RULE_fnCallArguments = 94
    RULE_sliceTypeStart = 95
    RULE_ptrTypeStart = 96
    RULE_arrayTypeStart = 97
    RULE_declAuto = 98
    RULE_declType = 99
    RULE_byteAlign = 100
    RULE_identList = 101
    RULE_switchProngList = 102
    RULE_stringList = 103
    RULE_paramDeclList = 104
    RULE_exprList = 105
    RULE_fieldList = 106

    ruleNames =  [ "start", "members", "declaration", "testDecl", "comptimeDecl", 
                   "decl", "fnProtoDeclEx", "varDeclEx", "decl2", "fnProto", 
                   "varName", "varDecl", "fieldName", "field", "stmt", "elseStmt", 
                   "ifStmt", "labeledStmt", "loopStmt", "forStmt", "whileStmt", 
                   "blockExprStmt", "blockExpr", "assignExpr", "expr", "boolOrExpr", 
                   "boolAndExpr", "compareExpr", "bitwiseExpr", "bitShiftExpr", 
                   "additionExpr", "multiplyExpr", "prefixExpr", "breakLabel", 
                   "blockLabel", "primaryExpr", "thenExpr", "elseExpr", 
                   "ifExpr", "block", "loopExpr", "forExpr", "whileExpr", 
                   "curlySuffixExpr", "initList", "typeExpr", "errorUnionExpr", 
                   "suffixExpr", "designatorExpr", "typeName", "compTimeTypeExpr", 
                   "primaryTypeExpr", "primaryBiCall", "integerLiteral", 
                   "floatingLiteral", "charLiteral", "singleStringLiteral", 
                   "lineStringLiteral", "errorSetDecl", "groupedExpr", "ifTypeExpr", 
                   "labeledTypeExpr", "loopTypeExpr", "forTypeExpr", "whileTypeExpr", 
                   "switchExpr", "fieldInit", "whileContinueExpr", "linkSection", 
                   "addrSpace", "callConv", "paramDecl", "paramType", "condExpr", 
                   "ifPrefix", "whilePrefix", "forPrefix", "payload", "ptrPayload", 
                   "ptrIndexPayload", "ptrListPayload", "switchProng", "switchCase", 
                   "switchItem", "forArgumentsList", "forItem", "assignOpExpr", 
                   "compareOpExpr", "bitwiseOpExpr", "bitwiseKwExpr", "prefixTypeOp", 
                   "sliceTypeRest", "ptrTypeRest", "suffixOp", "fnCallArguments", 
                   "sliceTypeStart", "ptrTypeStart", "arrayTypeStart", "declAuto", 
                   "declType", "byteAlign", "identList", "switchProngList", 
                   "stringList", "paramDeclList", "exprList", "fieldList" ]

    EOF = Token.EOF
    AddrSpace=1
    Align=2
    AllowZero=3
    And=4
    AnyFrame=5
    AnyError=6
    AnyType=7
    Async=8
    Await=9
    Break=10
    CallConv=11
    Catch=12
    CompTime=13
    Const=14
    Continue=15
    Defer=16
    Else=17
    Enum=18
    ErrDefer=19
    Error=20
    Export=21
    Extern=22
    Fn=23
    For=24
    If=25
    Inline=26
    LetterC=27
    LinkSection=28
    NoAlias=29
    NoInline=30
    NoReturn=31
    NoSuspend=32
    Opaque=33
    Or=34
    OrElse=35
    Packed=36
    Pub=37
    Resume=38
    Return=39
    Struct=40
    Suspend=41
    Switch=42
    Test=43
    ThreadLocal=44
    Try=45
    Union=46
    Unreachable=47
    UsingNamespace=48
    Var=49
    Volatile=50
    While=51
    AssignOp=52
    CompareOp=53
    BitwiseOp=54
    BitShiftOp=55
    AdditionOp=56
    MultiplyOp=57
    PrefixOp=58
    BuiltinIdent=59
    Ident=60
    Integer=61
    Float=62
    Char=63
    SingleString=64
    LineString=65
    LParen=66
    RParen=67
    LBrace=68
    RBrace=69
    LBrack=70
    RBrack=71
    Amp=72
    At=73
    BackSlash2=74
    Bang=75
    Caret=76
    Colon=77
    Comma=78
    Dot=79
    Dot2=80
    Ellipsis=81
    Equal=82
    Equal2=83
    EqualArrow=84
    Esc=85
    Minus=86
    MinusArrow=87
    MinusPct=88
    Pipe=89
    Plus=90
    Semi=91
    Slash=92
    Star=93
    Tilde=94
    Question=95
    DotStar=96
    DotQue=97
    ContainerDocComment=98
    DocComment=99
    LineComment=100
    Ws=101

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def members(self):
            return self.getTypedRuleContext(ZigParser.MembersContext,0)


        def ContainerDocComment(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.ContainerDocComment)
            else:
                return self.getToken(ZigParser.ContainerDocComment, i)

        def getRuleIndex(self):
            return ZigParser.RULE_start

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart" ):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)




    def start(self):

        localctx = ZigParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 214
                self.match(ZigParser.ContainerDocComment)
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self.members()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldList(self):
            return self.getTypedRuleContext(ZigParser.FieldListContext,0)


        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(ZigParser.DeclarationContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_members

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMembers" ):
                return visitor.visitMembers(self)
            else:
                return visitor.visitChildren(self)




    def members(self):

        localctx = ZigParser.MembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 222
                self.fieldList()


            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 870951803707392) != 0) or _la==99:
                self.state = 225
                self.declaration()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testDecl(self):
            return self.getTypedRuleContext(ZigParser.TestDeclContext,0)


        def comptimeDecl(self):
            return self.getTypedRuleContext(ZigParser.ComptimeDeclContext,0)


        def decl(self):
            return self.getTypedRuleContext(ZigParser.DeclContext,0)


        def Pub(self):
            return self.getToken(ZigParser.Pub, 0)

        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = ZigParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                self.testDecl()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self.comptimeDecl()
                pass
            elif token in [14, 21, 22, 23, 26, 30, 37, 44, 48, 49, 99]:
                self.enterOuterAlt(localctx, 3)
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37 or _la==99:
                    self.state = 234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==99:
                        self.state = 233
                        self.match(ZigParser.DocComment)


                    self.state = 236
                    self.match(ZigParser.Pub)


                self.state = 239
                self.decl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Test(self):
            return self.getToken(ZigParser.Test, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_testDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestDecl" ):
                return visitor.visitTestDecl(self)
            else:
                return visitor.visitChildren(self)




    def testDecl(self):

        localctx = ZigParser.TestDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_testDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(ZigParser.Test)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60 or _la==64:
                self.state = 243
                _la = self._input.LA(1)
                if not(_la==60 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 246
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComptimeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_comptimeDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComptimeDecl" ):
                return visitor.visitComptimeDecl(self)
            else:
                return visitor.visitChildren(self)




    def comptimeDecl(self):

        localctx = ZigParser.ComptimeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_comptimeDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(ZigParser.CompTime)
            self.state = 249
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fnProto(self):
            return self.getTypedRuleContext(ZigParser.FnProtoContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def fnProtoDeclEx(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclExContext,0)


        def varDecl(self):
            return self.getTypedRuleContext(ZigParser.VarDeclContext,0)


        def varDeclEx(self):
            return self.getTypedRuleContext(ZigParser.VarDeclExContext,0)


        def ThreadLocal(self):
            return self.getToken(ZigParser.ThreadLocal, 0)

        def UsingNamespace(self):
            return self.getToken(ZigParser.UsingNamespace, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_decl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl" ):
                return visitor.visitDecl(self)
            else:
                return visitor.visitChildren(self)




    def decl(self):

        localctx = ZigParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decl)
        self._la = 0 # Token type
        try:
            self.state = 270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1147142144) != 0):
                    self.state = 251
                    self.fnProtoDeclEx()


                self.state = 254
                self.fnProto()
                self.state = 257
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 255
                    self.match(ZigParser.Semi)
                    pass
                elif token in [68]:
                    self.state = 256
                    self.block()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21 or _la==22:
                    self.state = 259
                    self.varDeclEx()


                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 262
                    self.match(ZigParser.ThreadLocal)


                self.state = 265
                self.varDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 266
                self.match(ZigParser.UsingNamespace)
                self.state = 267
                self.expr()
                self.state = 268
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclExContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Export(self):
            return self.getToken(ZigParser.Export, 0)

        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def NoInline(self):
            return self.getToken(ZigParser.NoInline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclEx

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclEx" ):
                return visitor.visitFnProtoDeclEx(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclEx(self):

        localctx = ZigParser.FnProtoDeclExContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fnProtoDeclEx)
        self._la = 0 # Token type
        try:
            self.state = 279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.match(ZigParser.Export)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.match(ZigParser.Extern)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 274
                    self.match(ZigParser.SingleString)


                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 277
                self.match(ZigParser.Inline)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self.match(ZigParser.NoInline)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclExContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Export(self):
            return self.getToken(ZigParser.Export, 0)

        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_varDeclEx

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclEx" ):
                return visitor.visitVarDeclEx(self)
            else:
                return visitor.visitChildren(self)




    def varDeclEx(self):

        localctx = ZigParser.VarDeclExContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_varDeclEx)
        self._la = 0 # Token type
        try:
            self.state = 286
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.match(ZigParser.Export)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.match(ZigParser.Extern)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 283
                    self.match(ZigParser.SingleString)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decl2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declAuto(self):
            return self.getTypedRuleContext(ZigParser.DeclAutoContext,0)


        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def Packed(self):
            return self.getToken(ZigParser.Packed, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_decl2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecl2" ):
                return visitor.visitDecl2(self)
            else:
                return visitor.visitChildren(self)




    def decl2(self):

        localctx = ZigParser.Decl2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_decl2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==36:
                self.state = 288
                _la = self._input.LA(1)
                if not(_la==22 or _la==36):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 291
            self.declAuto()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Fn(self):
            return self.getToken(ZigParser.Fn, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def paramDeclList(self):
            return self.getTypedRuleContext(ZigParser.ParamDeclListContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(ZigParser.TypeExprContext,0)


        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def linkSection(self):
            return self.getTypedRuleContext(ZigParser.LinkSectionContext,0)


        def callConv(self):
            return self.getTypedRuleContext(ZigParser.CallConvContext,0)


        def AnyError(self):
            return self.getToken(ZigParser.AnyError, 0)

        def Bang(self):
            return self.getToken(ZigParser.Bang, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnProto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProto" ):
                return visitor.visitFnProto(self)
            else:
                return visitor.visitChildren(self)




    def fnProto(self):

        localctx = ZigParser.FnProtoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fnProto)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(ZigParser.Fn)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 294
                self.match(ZigParser.Ident)


            self.state = 297
            self.match(ZigParser.LParen)
            self.state = 298
            self.paramDeclList()
            self.state = 299
            self.match(ZigParser.RParen)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 300
                self.byteAlign()


            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 303
                self.addrSpace()


            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 306
                self.linkSection()


            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 309
                self.callConv()


            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 312
                self.match(ZigParser.AnyError)
                self.state = 313
                self.match(ZigParser.Bang)


            self.state = 316
            self.typeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_varName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarName" ):
                return visitor.visitVarName(self)
            else:
                return visitor.visitChildren(self)




    def varName(self):

        localctx = ZigParser.VarNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varName(self):
            return self.getTypedRuleContext(ZigParser.VarNameContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Var(self):
            return self.getToken(ZigParser.Var, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(ZigParser.TypeExprContext,0)


        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def linkSection(self):
            return self.getTypedRuleContext(ZigParser.LinkSectionContext,0)


        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = ZigParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            _la = self._input.LA(1)
            if not(_la==14 or _la==49):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 321
            self.varName()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 322
                self.match(ZigParser.Colon)
                self.state = 323
                self.typeExpr()


            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 326
                self.byteAlign()


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 329
                self.addrSpace()


            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 332
                self.linkSection()


            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 335
                self.match(ZigParser.Equal)
                self.state = 336
                self.expr()


            self.state = 339
            self.match(ZigParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fieldName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldName" ):
                return visitor.visitFieldName(self)
            else:
                return visitor.visitChildren(self)




    def fieldName(self):

        localctx = ZigParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ZigParser.FieldNameContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(ZigParser.TypeExprContext,0)


        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_field

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField" ):
                return visitor.visitField(self)
            else:
                return visitor.visitChildren(self)




    def field(self):

        localctx = ZigParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 343
                self.match(ZigParser.DocComment)


            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 346
                self.match(ZigParser.CompTime)


            self.state = 349
            self.fieldName()
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 350
                self.match(ZigParser.Colon)
                self.state = 351
                self.typeExpr()


            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 354
                self.byteAlign()


            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 357
                self.match(ZigParser.Equal)
                self.state = 358
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(ZigParser.VarDeclContext,0)


        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def blockExprStmt(self):
            return self.getTypedRuleContext(ZigParser.BlockExprStmtContext,0)


        def NoSuspend(self):
            return self.getToken(ZigParser.NoSuspend, 0)

        def Suspend(self):
            return self.getToken(ZigParser.Suspend, 0)

        def Defer(self):
            return self.getToken(ZigParser.Defer, 0)

        def ErrDefer(self):
            return self.getToken(ZigParser.ErrDefer, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(ZigParser.IfStmtContext,0)


        def labeledStmt(self):
            return self.getTypedRuleContext(ZigParser.LabeledStmtContext,0)


        def switchExpr(self):
            return self.getTypedRuleContext(ZigParser.SwitchExprContext,0)


        def assignExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignExprContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = ZigParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_stmt)
        self._la = 0 # Token type
        try:
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 361
                    self.match(ZigParser.CompTime)


                self.state = 364
                self.varDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 365
                self.match(ZigParser.CompTime)
                self.state = 366
                self.blockExprStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 367
                self.match(ZigParser.NoSuspend)
                self.state = 368
                self.blockExprStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 369
                self.match(ZigParser.Suspend)
                self.state = 370
                self.blockExprStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 371
                self.match(ZigParser.Defer)
                self.state = 372
                self.blockExprStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 373
                self.match(ZigParser.ErrDefer)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 374
                    self.payload()


                self.state = 377
                self.blockExprStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 378
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 379
                self.labeledStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 380
                self.switchExpr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 381
                self.assignExpr()
                self.state = 382
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self):
            return self.getTypedRuleContext(ZigParser.StmtContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_elseStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseStmt" ):
                return visitor.visitElseStmt(self)
            else:
                return visitor.visitChildren(self)




    def elseStmt(self):

        localctx = ZigParser.ElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_elseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def blockExpr(self):
            return self.getTypedRuleContext(ZigParser.BlockExprContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def elseStmt(self):
            return self.getTypedRuleContext(ZigParser.ElseStmtContext,0)


        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def assignExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignExprContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = ZigParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                self.ifPrefix()
                self.state = 389
                self.blockExpr()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 390
                    self.match(ZigParser.Else)
                    self.state = 392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 391
                        self.payload()


                    self.state = 394
                    self.elseStmt()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.ifPrefix()
                self.state = 398
                self.assignExpr()
                self.state = 405
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 399
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 400
                    self.match(ZigParser.Else)
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 401
                        self.payload()


                    self.state = 404
                    self.elseStmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(ZigParser.LoopStmtContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStmt" ):
                return visitor.visitLabeledStmt(self)
            else:
                return visitor.visitChildren(self)




    def labeledStmt(self):

        localctx = ZigParser.LabeledStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_labeledStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 409
                self.blockLabel()


            self.state = 414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.state = 412
                self.block()
                pass
            elif token in [26]:
                self.state = 413
                self.loopStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def forStmt(self):
            return self.getTypedRuleContext(ZigParser.ForStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(ZigParser.WhileStmtContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_loopStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = ZigParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(ZigParser.Inline)
            self.state = 419
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 417
                self.forStmt()
                pass
            elif token in [51]:
                self.state = 418
                self.whileStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def blockExpr(self):
            return self.getTypedRuleContext(ZigParser.BlockExprContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def stmt(self):
            return self.getTypedRuleContext(ZigParser.StmtContext,0)


        def assignExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignExprContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = ZigParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.forPrefix()
                self.state = 422
                self.blockExpr()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 423
                    self.match(ZigParser.Else)
                    self.state = 424
                    self.stmt()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.forPrefix()
                self.state = 428
                self.assignExpr()
                self.state = 432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 429
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 430
                    self.match(ZigParser.Else)
                    self.state = 431
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def blockExpr(self):
            return self.getTypedRuleContext(ZigParser.BlockExprContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def stmt(self):
            return self.getTypedRuleContext(ZigParser.StmtContext,0)


        def assignExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignExprContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = ZigParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_whileStmt)
        self._la = 0 # Token type
        try:
            self.state = 449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.whilePrefix()
                self.state = 437
                self.blockExpr()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 438
                    self.match(ZigParser.Else)
                    self.state = 439
                    self.stmt()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.whilePrefix()
                self.state = 443
                self.assignExpr()
                self.state = 447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 444
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 445
                    self.match(ZigParser.Else)
                    self.state = 446
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpr(self):
            return self.getTypedRuleContext(ZigParser.BlockExprContext,0)


        def assignExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignExprContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_blockExprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockExprStmt" ):
                return visitor.visitBlockExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def blockExprStmt(self):

        localctx = ZigParser.BlockExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_blockExprStmt)
        try:
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.blockExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.assignExpr()
                self.state = 453
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_blockExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockExpr" ):
                return visitor.visitBlockExpr(self)
            else:
                return visitor.visitChildren(self)




    def blockExpr(self):

        localctx = ZigParser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_blockExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 457
                self.blockLabel()


            self.state = 460
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def assignOpExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignOpExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_assignExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignExpr" ):
                return visitor.visitAssignExpr(self)
            else:
                return visitor.visitChildren(self)




    def assignExpr(self):

        localctx = ZigParser.AssignExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.expr()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52 or _la==82:
                self.state = 463
                self.assignOpExpr()
                self.state = 464
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolOrExpr(self):
            return self.getTypedRuleContext(ZigParser.BoolOrExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = ZigParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.boolOrExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolOrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolAndExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BoolAndExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.BoolAndExprContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Or)
            else:
                return self.getToken(ZigParser.Or, i)

        def getRuleIndex(self):
            return ZigParser.RULE_boolOrExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolOrExpr" ):
                return visitor.visitBoolOrExpr(self)
            else:
                return visitor.visitChildren(self)




    def boolOrExpr(self):

        localctx = ZigParser.BoolOrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_boolOrExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.boolAndExpr()
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 471
                    self.match(ZigParser.Or)
                    self.state = 472
                    self.boolAndExpr() 
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolAndExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compareExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.CompareExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.CompareExprContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.And)
            else:
                return self.getToken(ZigParser.And, i)

        def getRuleIndex(self):
            return ZigParser.RULE_boolAndExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolAndExpr" ):
                return visitor.visitBoolAndExpr(self)
            else:
                return visitor.visitChildren(self)




    def boolAndExpr(self):

        localctx = ZigParser.BoolAndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_boolAndExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.compareExpr()
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 479
                    self.match(ZigParser.And)
                    self.state = 480
                    self.compareExpr() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitwiseExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitwiseExprContext,i)


        def compareOpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.CompareOpExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.CompareOpExprContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_compareExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareExpr" ):
                return visitor.visitCompareExpr(self)
            else:
                return visitor.visitChildren(self)




    def compareExpr(self):

        localctx = ZigParser.CompareExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_compareExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.bitwiseExpr()
            self.state = 492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.compareOpExpr()
                    self.state = 488
                    self.bitwiseExpr() 
                self.state = 494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitShiftExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitShiftExprContext,i)


        def bitwiseOpExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitwiseOpExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitwiseOpExprContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseExpr" ):
                return visitor.visitBitwiseExpr(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseExpr(self):

        localctx = ZigParser.BitwiseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_bitwiseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.bitShiftExpr()
            self.state = 501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 496
                    self.bitwiseOpExpr()
                    self.state = 497
                    self.bitShiftExpr() 
                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitShiftExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additionExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AdditionExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.AdditionExprContext,i)


        def BitShiftOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.BitShiftOp)
            else:
                return self.getToken(ZigParser.BitShiftOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_bitShiftExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpr" ):
                return visitor.visitBitShiftExpr(self)
            else:
                return visitor.visitChildren(self)




    def bitShiftExpr(self):

        localctx = ZigParser.BitShiftExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_bitShiftExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.additionExpr()
            self.state = 509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 505
                    self.match(ZigParser.BitShiftOp)
                    self.state = 506
                    self.additionExpr() 
                self.state = 511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplyExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.MultiplyExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.MultiplyExprContext,i)


        def AdditionOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.AdditionOp)
            else:
                return self.getToken(ZigParser.AdditionOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_additionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditionExpr" ):
                return visitor.visitAdditionExpr(self)
            else:
                return visitor.visitChildren(self)




    def additionExpr(self):

        localctx = ZigParser.AdditionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_additionExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.multiplyExpr()
            self.state = 517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 513
                    self.match(ZigParser.AdditionOp)
                    self.state = 514
                    self.multiplyExpr() 
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PrefixExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.PrefixExprContext,i)


        def MultiplyOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.MultiplyOp)
            else:
                return self.getToken(ZigParser.MultiplyOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_multiplyExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyExpr" ):
                return visitor.visitMultiplyExpr(self)
            else:
                return visitor.visitChildren(self)




    def multiplyExpr(self):

        localctx = ZigParser.MultiplyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_multiplyExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.prefixExpr()
            self.state = 525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 521
                    self.match(ZigParser.MultiplyOp)
                    self.state = 522
                    self.prefixExpr() 
                self.state = 527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr(self):
            return self.getTypedRuleContext(ZigParser.PrimaryExprContext,0)


        def PrefixOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.PrefixOp)
            else:
                return self.getToken(ZigParser.PrefixOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_prefixExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpr" ):
                return visitor.visitPrefixExpr(self)
            else:
                return visitor.visitChildren(self)




    def prefixExpr(self):

        localctx = ZigParser.PrefixExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_prefixExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 528
                self.match(ZigParser.PrefixOp)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 534
            self.primaryExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_breakLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakLabel" ):
                return visitor.visitBreakLabel(self)
            else:
                return visitor.visitChildren(self)




    def breakLabel(self):

        localctx = ZigParser.BreakLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_breakLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(ZigParser.Colon)
            self.state = 537
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_blockLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockLabel" ):
                return visitor.visitBlockLabel(self)
            else:
                return visitor.visitChildren(self)




    def blockLabel(self):

        localctx = ZigParser.BlockLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_blockLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(ZigParser.Ident)
            self.state = 540
            self.match(ZigParser.Colon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpr(self):
            return self.getTypedRuleContext(ZigParser.IfExprContext,0)


        def Break(self):
            return self.getToken(ZigParser.Break, 0)

        def breakLabel(self):
            return self.getTypedRuleContext(ZigParser.BreakLabelContext,0)


        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def NoSuspend(self):
            return self.getToken(ZigParser.NoSuspend, 0)

        def Continue(self):
            return self.getToken(ZigParser.Continue, 0)

        def Resume(self):
            return self.getToken(ZigParser.Resume, 0)

        def Return(self):
            return self.getToken(ZigParser.Return, 0)

        def loopExpr(self):
            return self.getTypedRuleContext(ZigParser.LoopExprContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def curlySuffixExpr(self):
            return self.getTypedRuleContext(ZigParser.CurlySuffixExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpr" ):
                return visitor.visitPrimaryExpr(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpr(self):

        localctx = ZigParser.PrimaryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_primaryExpr)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.ifExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.match(ZigParser.Break)
                self.state = 545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 544
                    self.breakLabel()


                self.state = 548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 547
                    self.expr()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 550
                self.match(ZigParser.CompTime)
                self.state = 551
                self.expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 552
                self.match(ZigParser.NoSuspend)
                self.state = 553
                self.expr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 554
                self.match(ZigParser.Continue)
                self.state = 556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 555
                    self.breakLabel()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 558
                self.match(ZigParser.Resume)
                self.state = 559
                self.expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 560
                self.match(ZigParser.Return)
                self.state = 562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 561
                    self.expr()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 564
                    self.blockLabel()


                self.state = 567
                self.loopExpr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 568
                self.block()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 569
                self.curlySuffixExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_thenExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThenExpr" ):
                return visitor.visitThenExpr(self)
            else:
                return visitor.visitChildren(self)




    def thenExpr(self):

        localctx = ZigParser.ThenExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_thenExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_elseExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseExpr" ):
                return visitor.visitElseExpr(self)
            else:
                return visitor.visitChildren(self)




    def elseExpr(self):

        localctx = ZigParser.ElseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_elseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def thenExpr(self):
            return self.getTypedRuleContext(ZigParser.ThenExprContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def elseExpr(self):
            return self.getTypedRuleContext(ZigParser.ElseExprContext,0)


        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpr" ):
                return visitor.visitIfExpr(self)
            else:
                return visitor.visitChildren(self)




    def ifExpr(self):

        localctx = ZigParser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ifExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.ifPrefix()
            self.state = 577
            self.thenExpr()
            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 578
                self.match(ZigParser.Else)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 579
                    self.payload()


                self.state = 582
                self.elseExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.StmtContext)
            else:
                return self.getTypedRuleContext(ZigParser.StmtContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ZigParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(ZigParser.LBrace)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -284968394527480544) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2684387415) != 0):
                self.state = 586
                self.stmt()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 592
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpr(self):
            return self.getTypedRuleContext(ZigParser.ForExprContext,0)


        def whileExpr(self):
            return self.getTypedRuleContext(ZigParser.WhileExprContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_loopExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopExpr" ):
                return visitor.visitLoopExpr(self)
            else:
                return visitor.visitChildren(self)




    def loopExpr(self):

        localctx = ZigParser.LoopExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_loopExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 594
                self.match(ZigParser.Inline)


            self.state = 599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 597
                self.forExpr()
                pass
            elif token in [51]:
                self.state = 598
                self.whileExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpr" ):
                return visitor.visitForExpr(self)
            else:
                return visitor.visitChildren(self)




    def forExpr(self):

        localctx = ZigParser.ForExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_forExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.forPrefix()
            self.state = 602
            self.expr()
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 603
                self.match(ZigParser.Else)
                self.state = 604
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whileExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileExpr" ):
                return visitor.visitWhileExpr(self)
            else:
                return visitor.visitChildren(self)




    def whileExpr(self):

        localctx = ZigParser.WhileExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_whileExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.whilePrefix()
            self.state = 608
            self.expr()
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 609
                self.match(ZigParser.Else)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 610
                    self.payload()


                self.state = 613
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurlySuffixExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(ZigParser.TypeExprContext,0)


        def initList(self):
            return self.getTypedRuleContext(ZigParser.InitListContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_curlySuffixExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurlySuffixExpr" ):
                return visitor.visitCurlySuffixExpr(self)
            else:
                return visitor.visitChildren(self)




    def curlySuffixExpr(self):

        localctx = ZigParser.CurlySuffixExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_curlySuffixExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.typeExpr()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 617
                self.initList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def fieldInit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.FieldInitContext)
            else:
                return self.getTypedRuleContext(ZigParser.FieldInitContext,i)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_initList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitList" ):
                return visitor.visitInitList(self)
            else:
                return visitor.visitChildren(self)




    def initList(self):

        localctx = ZigParser.InitListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_initList)
        self._la = 0 # Token type
        try:
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 620
                self.match(ZigParser.LBrace)
                self.state = 621
                self.fieldInit()
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 622
                        self.match(ZigParser.Comma)
                        self.state = 623
                        self.fieldInit() 
                    self.state = 628
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 629
                    self.match(ZigParser.Comma)


                self.state = 632
                self.match(ZigParser.RBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(ZigParser.LBrace)
                self.state = 635
                self.expr()
                self.state = 640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 636
                        self.match(ZigParser.Comma)
                        self.state = 637
                        self.expr() 
                    self.state = 642
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 643
                    self.match(ZigParser.Comma)


                self.state = 646
                self.match(ZigParser.RBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 648
                self.match(ZigParser.LBrace)
                self.state = 649
                self.match(ZigParser.RBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def errorUnionExpr(self):
            return self.getTypedRuleContext(ZigParser.ErrorUnionExprContext,0)


        def prefixTypeOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PrefixTypeOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.PrefixTypeOpContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_typeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpr" ):
                return visitor.visitTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def typeExpr(self):

        localctx = ZigParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 652
                    self.prefixTypeOp() 
                self.state = 657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 658
            self.errorUnionExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorUnionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suffixExpr(self):
            return self.getTypedRuleContext(ZigParser.SuffixExprContext,0)


        def Bang(self):
            return self.getToken(ZigParser.Bang, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(ZigParser.TypeExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_errorUnionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorUnionExpr" ):
                return visitor.visitErrorUnionExpr(self)
            else:
                return visitor.visitChildren(self)




    def errorUnionExpr(self):

        localctx = ZigParser.ErrorUnionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_errorUnionExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.suffixExpr()
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 661
                self.match(ZigParser.Bang)
                self.state = 662
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Async(self):
            return self.getToken(ZigParser.Async, 0)

        def primaryTypeExpr(self):
            return self.getTypedRuleContext(ZigParser.PrimaryTypeExprContext,0)


        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def suffixOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SuffixOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.SuffixOpContext,i)


        def designatorExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.DesignatorExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.DesignatorExprContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_suffixExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixExpr" ):
                return visitor.visitSuffixExpr(self)
            else:
                return visitor.visitChildren(self)




    def suffixExpr(self):

        localctx = ZigParser.SuffixExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_suffixExpr)
        self._la = 0 # Token type
        try:
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.match(ZigParser.Async)
                self.state = 666
                self.primaryTypeExpr()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 201327105) != 0):
                    self.state = 667
                    self.suffixOp()
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 673
                self.fnCallArguments()
                pass
            elif token in [5, 13, 14, 20, 21, 22, 23, 25, 26, 30, 42, 44, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.primaryTypeExpr()
                self.state = 679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 676
                        self.designatorExpr() 
                    self.state = 681
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suffixOp(self):
            return self.getTypedRuleContext(ZigParser.SuffixOpContext,0)


        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_designatorExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorExpr" ):
                return visitor.visitDesignatorExpr(self)
            else:
                return visitor.visitChildren(self)




    def designatorExpr(self):

        localctx = ZigParser.DesignatorExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_designatorExpr)
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 79, 96, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.suffixOp()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.fnCallArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_typeName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = ZigParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompTimeTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(ZigParser.TypeExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compTimeTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompTimeTypeExpr" ):
                return visitor.visitCompTimeTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def compTimeTypeExpr(self):

        localctx = ZigParser.CompTimeTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_compTimeTypeExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(ZigParser.CompTime)
            self.state = 691
            self.typeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryBiCall(self):
            return self.getTypedRuleContext(ZigParser.PrimaryBiCallContext,0)


        def charLiteral(self):
            return self.getTypedRuleContext(ZigParser.CharLiteralContext,0)


        def decl(self):
            return self.getTypedRuleContext(ZigParser.DeclContext,0)


        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def errorSetDecl(self):
            return self.getTypedRuleContext(ZigParser.ErrorSetDeclContext,0)


        def floatingLiteral(self):
            return self.getTypedRuleContext(ZigParser.FloatingLiteralContext,0)


        def fnProto(self):
            return self.getTypedRuleContext(ZigParser.FnProtoContext,0)


        def groupedExpr(self):
            return self.getTypedRuleContext(ZigParser.GroupedExprContext,0)


        def labeledTypeExpr(self):
            return self.getTypedRuleContext(ZigParser.LabeledTypeExprContext,0)


        def typeName(self):
            return self.getTypedRuleContext(ZigParser.TypeNameContext,0)


        def ifTypeExpr(self):
            return self.getTypedRuleContext(ZigParser.IfTypeExprContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(ZigParser.IntegerLiteralContext,0)


        def compTimeTypeExpr(self):
            return self.getTypedRuleContext(ZigParser.CompTimeTypeExprContext,0)


        def Error(self):
            return self.getToken(ZigParser.Error, 0)

        def AnyFrame(self):
            return self.getToken(ZigParser.AnyFrame, 0)

        def Unreachable(self):
            return self.getToken(ZigParser.Unreachable, 0)

        def singleStringLiteral(self):
            return self.getTypedRuleContext(ZigParser.SingleStringLiteralContext,0)


        def lineStringLiteral(self):
            return self.getTypedRuleContext(ZigParser.LineStringLiteralContext,0)


        def switchExpr(self):
            return self.getTypedRuleContext(ZigParser.SwitchExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryTypeExpr" ):
                return visitor.visitPrimaryTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def primaryTypeExpr(self):

        localctx = ZigParser.PrimaryTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_primaryTypeExpr)
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.primaryBiCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.charLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 695
                self.decl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 696
                self.match(ZigParser.Dot)
                self.state = 697
                self.match(ZigParser.Ident)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 698
                self.errorSetDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 699
                self.floatingLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 700
                self.fnProto()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 701
                self.groupedExpr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 702
                self.labeledTypeExpr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 703
                self.typeName()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 704
                self.ifTypeExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 705
                self.integerLiteral()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 706
                self.compTimeTypeExpr()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 707
                self.match(ZigParser.Error)
                self.state = 708
                self.match(ZigParser.Dot)
                self.state = 709
                self.match(ZigParser.Ident)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 710
                self.match(ZigParser.AnyFrame)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 711
                self.match(ZigParser.Unreachable)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 712
                self.singleStringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 713
                self.lineStringLiteral()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 714
                self.switchExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryBiCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BuiltinIdent(self):
            return self.getToken(ZigParser.BuiltinIdent, 0)

        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryBiCall

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryBiCall" ):
                return visitor.visitPrimaryBiCall(self)
            else:
                return visitor.visitChildren(self)




    def primaryBiCall(self):

        localctx = ZigParser.PrimaryBiCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_primaryBiCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(ZigParser.BuiltinIdent)
            self.state = 718
            self.fnCallArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(ZigParser.Integer, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_integerLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = ZigParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_integerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(ZigParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Float(self):
            return self.getToken(ZigParser.Float, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = ZigParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_floatingLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(ZigParser.Float)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Char(self):
            return self.getToken(ZigParser.Char, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_charLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharLiteral" ):
                return visitor.visitCharLiteral(self)
            else:
                return visitor.visitChildren(self)




    def charLiteral(self):

        localctx = ZigParser.CharLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_charLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(ZigParser.Char)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_singleStringLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStringLiteral" ):
                return visitor.visitSingleStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def singleStringLiteral(self):

        localctx = ZigParser.SingleStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_singleStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(ZigParser.SingleString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineString(self):
            return self.getToken(ZigParser.LineString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_lineStringLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringLiteral" ):
                return visitor.visitLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def lineStringLiteral(self):

        localctx = ZigParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_lineStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(ZigParser.LineString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorSetDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Error(self):
            return self.getToken(ZigParser.Error, 0)

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def identList(self):
            return self.getTypedRuleContext(ZigParser.IdentListContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_errorSetDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorSetDecl" ):
                return visitor.visitErrorSetDecl(self)
            else:
                return visitor.visitChildren(self)




    def errorSetDecl(self):

        localctx = ZigParser.ErrorSetDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_errorSetDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(ZigParser.Error)
            self.state = 731
            self.match(ZigParser.LBrace)
            self.state = 732
            self.identList()
            self.state = 733
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupedExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_groupedExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupedExpr" ):
                return visitor.visitGroupedExpr(self)
            else:
                return visitor.visitChildren(self)




    def groupedExpr(self):

        localctx = ZigParser.GroupedExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_groupedExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(ZigParser.LParen)
            self.state = 736
            self.expr()
            self.state = 737
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExprContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfTypeExpr" ):
                return visitor.visitIfTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def ifTypeExpr(self):

        localctx = ZigParser.IfTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ifTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.ifPrefix()
            self.state = 740
            self.typeExpr()
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 741
                self.match(ZigParser.Else)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 742
                    self.payload()


                self.state = 745
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def loopTypeExpr(self):
            return self.getTypedRuleContext(ZigParser.LoopTypeExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledTypeExpr" ):
                return visitor.visitLabeledTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def labeledTypeExpr(self):

        localctx = ZigParser.LabeledTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_labeledTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.blockLabel()
                self.state = 749
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 751
                    self.blockLabel()


                self.state = 754
                self.loopTypeExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def forTypeExpr(self):
            return self.getTypedRuleContext(ZigParser.ForTypeExprContext,0)


        def whileTypeExpr(self):
            return self.getTypedRuleContext(ZigParser.WhileTypeExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_loopTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopTypeExpr" ):
                return visitor.visitLoopTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def loopTypeExpr(self):

        localctx = ZigParser.LoopTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_loopTypeExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(ZigParser.Inline)
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 758
                self.forTypeExpr()
                pass
            elif token in [51]:
                self.state = 759
                self.whileTypeExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExprContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForTypeExpr" ):
                return visitor.visitForTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def forTypeExpr(self):

        localctx = ZigParser.ForTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_forTypeExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.forPrefix()
            self.state = 763
            self.typeExpr()
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 764
                self.match(ZigParser.Else)
                self.state = 765
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExprContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whileTypeExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileTypeExpr" ):
                return visitor.visitWhileTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def whileTypeExpr(self):

        localctx = ZigParser.WhileTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_whileTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.whilePrefix()
            self.state = 769
            self.typeExpr()
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 770
                self.match(ZigParser.Else)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 771
                    self.payload()


                self.state = 774
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(ZigParser.Switch, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def switchProngList(self):
            return self.getTypedRuleContext(ZigParser.SwitchProngListContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpr" ):
                return visitor.visitSwitchExpr(self)
            else:
                return visitor.visitChildren(self)




    def switchExpr(self):

        localctx = ZigParser.SwitchExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_switchExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(ZigParser.Switch)
            self.state = 778
            self.match(ZigParser.LParen)
            self.state = 779
            self.expr()
            self.state = 780
            self.match(ZigParser.RParen)
            self.state = 781
            self.match(ZigParser.LBrace)
            self.state = 782
            self.switchProngList()
            self.state = 783
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fieldInit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldInit" ):
                return visitor.visitFieldInit(self)
            else:
                return visitor.visitChildren(self)




    def fieldInit(self):

        localctx = ZigParser.FieldInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fieldInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(ZigParser.Dot)
            self.state = 786
            self.match(ZigParser.Ident)
            self.state = 787
            self.match(ZigParser.Equal)
            self.state = 788
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileContinueExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def assignExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_whileContinueExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileContinueExpr" ):
                return visitor.visitWhileContinueExpr(self)
            else:
                return visitor.visitChildren(self)




    def whileContinueExpr(self):

        localctx = ZigParser.WhileContinueExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_whileContinueExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(ZigParser.Colon)
            self.state = 791
            self.match(ZigParser.LParen)
            self.state = 792
            self.assignExpr()
            self.state = 793
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LinkSection(self):
            return self.getToken(ZigParser.LinkSection, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_linkSection

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkSection" ):
                return visitor.visitLinkSection(self)
            else:
                return visitor.visitChildren(self)




    def linkSection(self):

        localctx = ZigParser.LinkSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_linkSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(ZigParser.LinkSection)
            self.state = 796
            self.match(ZigParser.LParen)
            self.state = 797
            self.expr()
            self.state = 798
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AddrSpace(self):
            return self.getToken(ZigParser.AddrSpace, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_addrSpace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddrSpace" ):
                return visitor.visitAddrSpace(self)
            else:
                return visitor.visitChildren(self)




    def addrSpace(self):

        localctx = ZigParser.AddrSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_addrSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(ZigParser.AddrSpace)
            self.state = 801
            self.match(ZigParser.LParen)
            self.state = 802
            self.expr()
            self.state = 803
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallConvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CallConv(self):
            return self.getToken(ZigParser.CallConv, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_callConv

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallConv" ):
                return visitor.visitCallConv(self)
            else:
                return visitor.visitChildren(self)




    def callConv(self):

        localctx = ZigParser.CallConvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_callConv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(ZigParser.CallConv)
            self.state = 806
            self.match(ZigParser.LParen)
            self.state = 807
            self.expr()
            self.state = 808
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramType(self):
            return self.getTypedRuleContext(ZigParser.ParamTypeContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def NoAlias(self):
            return self.getToken(ZigParser.NoAlias, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def Ellipsis(self):
            return self.getToken(ZigParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_paramDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamDecl" ):
                return visitor.visitParamDecl(self)
            else:
                return visitor.visitChildren(self)




    def paramDecl(self):

        localctx = ZigParser.ParamDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_paramDecl)
        self._la = 0 # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 8, 13, 14, 20, 21, 22, 23, 25, 26, 29, 30, 42, 44, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 70, 79, 93, 95, 99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 810
                    self.match(ZigParser.DocComment)


                self.state = 814
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 813
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==29):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 816
                    self.match(ZigParser.Ident)
                    self.state = 817
                    self.match(ZigParser.Colon)


                self.state = 820
                self.paramType()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.match(ZigParser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnyType(self):
            return self.getToken(ZigParser.AnyType, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(ZigParser.TypeExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_paramType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamType" ):
                return visitor.visitParamType(self)
            else:
                return visitor.visitChildren(self)




    def paramType(self):

        localctx = ZigParser.ParamTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_paramType)
        try:
            self.state = 826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.match(ZigParser.AnyType)
                pass
            elif token in [5, 8, 13, 14, 20, 21, 22, 23, 25, 26, 30, 42, 44, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 70, 79, 93, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.typeExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_condExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondExpr" ):
                return visitor.visitCondExpr(self)
            else:
                return visitor.visitChildren(self)




    def condExpr(self):

        localctx = ZigParser.CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_condExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ZigParser.If, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def condExpr(self):
            return self.getTypedRuleContext(ZigParser.CondExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def ptrPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifPrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfPrefix" ):
                return visitor.visitIfPrefix(self)
            else:
                return visitor.visitChildren(self)




    def ifPrefix(self):

        localctx = ZigParser.IfPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ifPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(ZigParser.If)
            self.state = 831
            self.match(ZigParser.LParen)
            self.state = 832
            self.condExpr()
            self.state = 833
            self.match(ZigParser.RParen)
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 834
                self.ptrPayload()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhilePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ZigParser.While, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def condExpr(self):
            return self.getTypedRuleContext(ZigParser.CondExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def ptrPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrPayloadContext,0)


        def whileContinueExpr(self):
            return self.getTypedRuleContext(ZigParser.WhileContinueExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whilePrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhilePrefix" ):
                return visitor.visitWhilePrefix(self)
            else:
                return visitor.visitChildren(self)




    def whilePrefix(self):

        localctx = ZigParser.WhilePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_whilePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(ZigParser.While)
            self.state = 838
            self.match(ZigParser.LParen)
            self.state = 839
            self.condExpr()
            self.state = 840
            self.match(ZigParser.RParen)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 841
                self.ptrPayload()


            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 844
                self.whileContinueExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(ZigParser.For, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def forArgumentsList(self):
            return self.getTypedRuleContext(ZigParser.ForArgumentsListContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def ptrListPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrListPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_forPrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForPrefix" ):
                return visitor.visitForPrefix(self)
            else:
                return visitor.visitChildren(self)




    def forPrefix(self):

        localctx = ZigParser.ForPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_forPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(ZigParser.For)
            self.state = 848
            self.match(ZigParser.LParen)
            self.state = 849
            self.forArgumentsList()
            self.state = 850
            self.match(ZigParser.RParen)
            self.state = 851
            self.ptrListPayload()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_payload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPayload" ):
                return visitor.visitPayload(self)
            else:
                return visitor.visitChildren(self)




    def payload(self):

        localctx = ZigParser.PayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_payload)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(ZigParser.Pipe)
            self.state = 854
            self.match(ZigParser.Ident)
            self.state = 855
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrPayload" ):
                return visitor.visitPtrPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrPayload(self):

        localctx = ZigParser.PtrPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_ptrPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(ZigParser.Pipe)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 858
                self.match(ZigParser.Star)


            self.state = 861
            self.match(ZigParser.Ident)
            self.state = 862
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrIndexPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def Comma(self):
            return self.getToken(ZigParser.Comma, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrIndexPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrIndexPayload" ):
                return visitor.visitPtrIndexPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrIndexPayload(self):

        localctx = ZigParser.PtrIndexPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_ptrIndexPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(ZigParser.Pipe)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 865
                self.match(ZigParser.Star)


            self.state = 868
            self.match(ZigParser.Ident)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 869
                self.match(ZigParser.Comma)
                self.state = 870
                self.match(ZigParser.Ident)


            self.state = 873
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrListPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Star)
            else:
                return self.getToken(ZigParser.Star, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrListPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrListPayload" ):
                return visitor.visitPtrListPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrListPayload(self):

        localctx = ZigParser.PtrListPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_ptrListPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(ZigParser.Pipe)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 876
                self.match(ZigParser.Star)


            self.state = 879
            self.match(ZigParser.Ident)
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self.match(ZigParser.Comma)
                    self.state = 882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==93:
                        self.state = 881
                        self.match(ZigParser.Star)


                    self.state = 884
                    self.match(ZigParser.Ident) 
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 890
                self.match(ZigParser.Comma)


            self.state = 893
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchProngContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchCase(self):
            return self.getTypedRuleContext(ZigParser.SwitchCaseContext,0)


        def EqualArrow(self):
            return self.getToken(ZigParser.EqualArrow, 0)

        def assignExpr(self):
            return self.getTypedRuleContext(ZigParser.AssignExprContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def ptrIndexPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrIndexPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_switchProng

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchProng" ):
                return visitor.visitSwitchProng(self)
            else:
                return visitor.visitChildren(self)




    def switchProng(self):

        localctx = ZigParser.SwitchProngContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_switchProng)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 895
                self.match(ZigParser.Inline)


            self.state = 898
            self.switchCase()
            self.state = 899
            self.match(ZigParser.EqualArrow)
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 900
                self.ptrIndexPayload()


            self.state = 903
            self.assignExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SwitchItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.SwitchItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchCase

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchCase" ):
                return visitor.visitSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def switchCase(self):

        localctx = ZigParser.SwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_switchCase)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 8, 10, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 30, 32, 38, 39, 42, 44, 47, 48, 49, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 79, 93, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.switchItem()
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 906
                        self.match(ZigParser.Comma)
                        self.state = 907
                        self.switchItem() 
                    self.state = 912
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 913
                    self.match(ZigParser.Comma)


                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.match(ZigParser.Else)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def Ellipsis(self):
            return self.getToken(ZigParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchItem" ):
                return visitor.visitSwitchItem(self)
            else:
                return visitor.visitChildren(self)




    def switchItem(self):

        localctx = ZigParser.SwitchItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_switchItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.expr()
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 920
                self.match(ZigParser.Ellipsis)
                self.state = 921
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForArgumentsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ForItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.ForItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_forArgumentsList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForArgumentsList" ):
                return visitor.visitForArgumentsList(self)
            else:
                return visitor.visitChildren(self)




    def forArgumentsList(self):

        localctx = ZigParser.ForArgumentsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forArgumentsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.forItem()
            self.state = 929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 925
                    self.match(ZigParser.Comma)
                    self.state = 926
                    self.forItem() 
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 932
                self.match(ZigParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def Dot2(self):
            return self.getToken(ZigParser.Dot2, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForItem" ):
                return visitor.visitForItem(self)
            else:
                return visitor.visitChildren(self)




    def forItem(self):

        localctx = ZigParser.ForItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_forItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.expr()
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 936
                self.match(ZigParser.Dot2)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -284970593551325920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2684387415) != 0):
                    self.state = 937
                    self.expr()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignOpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def AssignOp(self):
            return self.getToken(ZigParser.AssignOp, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_assignOpExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignOpExpr" ):
                return visitor.visitAssignOpExpr(self)
            else:
                return visitor.visitChildren(self)




    def assignOpExpr(self):

        localctx = ZigParser.AssignOpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assignOpExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            _la = self._input.LA(1)
            if not(_la==52 or _la==82):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareOpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal2(self):
            return self.getToken(ZigParser.Equal2, 0)

        def CompareOp(self):
            return self.getToken(ZigParser.CompareOp, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_compareOpExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareOpExpr" ):
                return visitor.visitCompareOpExpr(self)
            else:
                return visitor.visitChildren(self)




    def compareOpExpr(self):

        localctx = ZigParser.CompareOpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_compareOpExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            _la = self._input.LA(1)
            if not(_la==53 or _la==83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseOpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BitwiseOp(self):
            return self.getToken(ZigParser.BitwiseOp, 0)

        def bitwiseKwExpr(self):
            return self.getTypedRuleContext(ZigParser.BitwiseKwExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseOpExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseOpExpr" ):
                return visitor.visitBitwiseOpExpr(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseOpExpr(self):

        localctx = ZigParser.BitwiseOpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_bitwiseOpExpr)
        try:
            self.state = 948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 946
                self.match(ZigParser.BitwiseOp)
                pass
            elif token in [12, 35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.bitwiseKwExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseKwExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OrElse(self):
            return self.getToken(ZigParser.OrElse, 0)

        def Catch(self):
            return self.getToken(ZigParser.Catch, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseKwExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseKwExpr" ):
                return visitor.visitBitwiseKwExpr(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseKwExpr(self):

        localctx = ZigParser.BitwiseKwExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_bitwiseKwExpr)
        self._la = 0 # Token type
        try:
            self.state = 955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.match(ZigParser.OrElse)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 951
                self.match(ZigParser.Catch)
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 952
                    self.payload()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixTypeOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Question(self):
            return self.getToken(ZigParser.Question, 0)

        def AnyFrame(self):
            return self.getToken(ZigParser.AnyFrame, 0)

        def MinusArrow(self):
            return self.getToken(ZigParser.MinusArrow, 0)

        def sliceTypeStart(self):
            return self.getTypedRuleContext(ZigParser.SliceTypeStartContext,0)


        def sliceTypeRest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SliceTypeRestContext)
            else:
                return self.getTypedRuleContext(ZigParser.SliceTypeRestContext,i)


        def ptrTypeStart(self):
            return self.getTypedRuleContext(ZigParser.PtrTypeStartContext,0)


        def ptrTypeRest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PtrTypeRestContext)
            else:
                return self.getTypedRuleContext(ZigParser.PtrTypeRestContext,i)


        def arrayTypeStart(self):
            return self.getTypedRuleContext(ZigParser.ArrayTypeStartContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_prefixTypeOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixTypeOp" ):
                return visitor.visitPrefixTypeOp(self)
            else:
                return visitor.visitChildren(self)




    def prefixTypeOp(self):

        localctx = ZigParser.PrefixTypeOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_prefixTypeOp)
        try:
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.match(ZigParser.Question)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.match(ZigParser.AnyFrame)
                self.state = 959
                self.match(ZigParser.MinusArrow)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 960
                self.sliceTypeStart()
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 961
                        self.sliceTypeRest() 
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 967
                self.ptrTypeStart()
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 968
                        self.ptrTypeRest() 
                    self.state = 973
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 974
                self.arrayTypeStart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def AllowZero(self):
            return self.getToken(ZigParser.AllowZero, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_sliceTypeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceTypeRest" ):
                return visitor.visitSliceTypeRest(self)
            else:
                return visitor.visitChildren(self)




    def sliceTypeRest(self):

        localctx = ZigParser.SliceTypeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_sliceTypeRest)
        try:
            self.state = 982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.byteAlign()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.addrSpace()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(ZigParser.Const)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 980
                self.match(ZigParser.Volatile)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 5)
                self.state = 981
                self.match(ZigParser.AllowZero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrTypeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def Align(self):
            return self.getToken(ZigParser.Align, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Colon)
            else:
                return self.getToken(ZigParser.Colon, i)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def AllowZero(self):
            return self.getToken(ZigParser.AllowZero, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrTypeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrTypeRest" ):
                return visitor.visitPtrTypeRest(self)
            else:
                return visitor.visitChildren(self)




    def ptrTypeRest(self):

        localctx = ZigParser.PtrTypeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ptrTypeRest)
        self._la = 0 # Token type
        try:
            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.addrSpace()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(ZigParser.Align)
                self.state = 986
                self.match(ZigParser.LParen)
                self.state = 987
                self.expr()
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 988
                    self.match(ZigParser.Colon)
                    self.state = 989
                    self.expr()
                    self.state = 990
                    self.match(ZigParser.Colon)
                    self.state = 991
                    self.expr()


                self.state = 995
                self.match(ZigParser.RParen)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 997
                self.match(ZigParser.Const)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 998
                self.match(ZigParser.Volatile)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 5)
                self.state = 999
                self.match(ZigParser.AllowZero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Dot2(self):
            return self.getToken(ZigParser.Dot2, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def DotStar(self):
            return self.getToken(ZigParser.DotStar, 0)

        def DotQue(self):
            return self.getToken(ZigParser.DotQue, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_suffixOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixOp" ):
                return visitor.visitSuffixOp(self)
            else:
                return visitor.visitChildren(self)




    def suffixOp(self):

        localctx = ZigParser.SuffixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_suffixOp)
        self._la = 0 # Token type
        try:
            self.state = 1020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.match(ZigParser.LBrack)
                self.state = 1003
                self.expr()
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 1004
                    self.match(ZigParser.Dot2)
                    self.state = 1010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -284970593551325920) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2684387415) != 0):
                        self.state = 1005
                        self.expr()
                        self.state = 1008
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==77:
                            self.state = 1006
                            self.match(ZigParser.Colon)
                            self.state = 1007
                            self.expr()






                self.state = 1014
                self.match(ZigParser.RBrack)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.match(ZigParser.Dot)
                self.state = 1017
                self.match(ZigParser.Ident)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1018
                self.match(ZigParser.DotStar)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self.match(ZigParser.DotQue)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def exprList(self):
            return self.getTypedRuleContext(ZigParser.ExprListContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnCallArguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnCallArguments" ):
                return visitor.visitFnCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def fnCallArguments(self):

        localctx = ZigParser.FnCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_fnCallArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(ZigParser.LParen)
            self.state = 1023
            self.exprList()
            self.state = 1024
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_sliceTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceTypeStart" ):
                return visitor.visitSliceTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def sliceTypeStart(self):

        localctx = ZigParser.SliceTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_sliceTypeStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(ZigParser.LBrack)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1027
                self.match(ZigParser.Colon)
                self.state = 1028
                self.expr()


            self.state = 1031
            self.match(ZigParser.RBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Star)
            else:
                return self.getToken(ZigParser.Star, i)

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def LetterC(self):
            return self.getToken(ZigParser.LetterC, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ptrTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrTypeStart" ):
                return visitor.visitPtrTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def ptrTypeStart(self):

        localctx = ZigParser.PtrTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_ptrTypeStart)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.match(ZigParser.Star)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.match(ZigParser.Star)
                self.state = 1035
                self.match(ZigParser.Star)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1036
                self.match(ZigParser.LBrack)
                self.state = 1037
                self.match(ZigParser.Star)
                self.state = 1041
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 1038
                    self.match(ZigParser.LetterC)
                    pass
                elif token in [77]:
                    self.state = 1039
                    self.match(ZigParser.Colon)
                    self.state = 1040
                    self.expr()
                    pass
                elif token in [71]:
                    pass
                else:
                    pass
                self.state = 1043
                self.match(ZigParser.RBrack)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_arrayTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayTypeStart" ):
                return visitor.visitArrayTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def arrayTypeStart(self):

        localctx = ZigParser.ArrayTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_arrayTypeStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(ZigParser.LBrack)
            self.state = 1047
            self.expr()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1048
                self.match(ZigParser.Colon)
                self.state = 1049
                self.expr()


            self.state = 1052
            self.match(ZigParser.RBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclAutoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declType(self):
            return self.getTypedRuleContext(ZigParser.DeclTypeContext,0)


        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def members(self):
            return self.getTypedRuleContext(ZigParser.MembersContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_declAuto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclAuto" ):
                return visitor.visitDeclAuto(self)
            else:
                return visitor.visitChildren(self)




    def declAuto(self):

        localctx = ZigParser.DeclAutoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_declAuto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.declType()
            self.state = 1055
            self.match(ZigParser.LBrace)
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1056
                self.match(ZigParser.DocComment)


            self.state = 1059
            self.members()
            self.state = 1060
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ZigParser.Struct, 0)

        def LParen(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.LParen)
            else:
                return self.getToken(ZigParser.LParen, i)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def RParen(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.RParen)
            else:
                return self.getToken(ZigParser.RParen, i)

        def Opaque(self):
            return self.getToken(ZigParser.Opaque, 0)

        def Enum(self):
            return self.getToken(ZigParser.Enum, 0)

        def Union(self):
            return self.getToken(ZigParser.Union, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_declType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclType" ):
                return visitor.visitDeclType(self)
            else:
                return visitor.visitChildren(self)




    def declType(self):

        localctx = ZigParser.DeclTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_declType)
        self._la = 0 # Token type
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.match(ZigParser.Struct)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 1063
                    self.match(ZigParser.LParen)
                    self.state = 1064
                    self.expr()
                    self.state = 1065
                    self.match(ZigParser.RParen)


                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(ZigParser.Opaque)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1070
                self.match(ZigParser.Enum)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 1071
                    self.match(ZigParser.LParen)
                    self.state = 1072
                    self.expr()
                    self.state = 1073
                    self.match(ZigParser.RParen)


                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1077
                self.match(ZigParser.Union)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 1078
                    self.match(ZigParser.LParen)
                    self.state = 1087
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [18]:
                        self.state = 1079
                        self.match(ZigParser.Enum)
                        self.state = 1084
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==66:
                            self.state = 1080
                            self.match(ZigParser.LParen)
                            self.state = 1081
                            self.expr()
                            self.state = 1082
                            self.match(ZigParser.RParen)


                        pass
                    elif token in [5, 8, 10, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 30, 32, 38, 39, 42, 44, 47, 48, 49, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 79, 93, 95]:
                        self.state = 1086
                        self.expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1089
                    self.match(ZigParser.RParen)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteAlignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Align(self):
            return self.getToken(ZigParser.Align, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expr(self):
            return self.getTypedRuleContext(ZigParser.ExprContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_byteAlign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteAlign" ):
                return visitor.visitByteAlign(self)
            else:
                return visitor.visitChildren(self)




    def byteAlign(self):

        localctx = ZigParser.ByteAlignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_byteAlign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(ZigParser.Align)
            self.state = 1095
            self.match(ZigParser.LParen)
            self.state = 1096
            self.expr()
            self.state = 1097
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DocComment(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.DocComment)
            else:
                return self.getToken(ZigParser.DocComment, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_identList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentList" ):
                return visitor.visitIdentList(self)
            else:
                return visitor.visitChildren(self)




    def identList(self):

        localctx = ZigParser.IdentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_identList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1099
                    self.match(ZigParser.DocComment)
                    self.state = 1100
                    self.match(ZigParser.Ident)
                    self.state = 1101
                    self.match(ZigParser.Comma) 
                self.state = 1106
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 1107
                self.match(ZigParser.DocComment)
                self.state = 1108
                self.match(ZigParser.Ident)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchProngListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchProng(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SwitchProngContext)
            else:
                return self.getTypedRuleContext(ZigParser.SwitchProngContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_switchProngList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchProngList" ):
                return visitor.visitSwitchProngList(self)
            else:
                return visitor.visitChildren(self)




    def switchProngList(self):

        localctx = ZigParser.SwitchProngListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_switchProngList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1111
                    self.switchProng()
                    self.state = 1112
                    self.match(ZigParser.Comma) 
                self.state = 1118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -284970593551194848) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2684387415) != 0):
                self.state = 1119
                self.switchProng()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleString(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.SingleString)
            else:
                return self.getToken(ZigParser.SingleString, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_stringList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringList" ):
                return visitor.visitStringList(self)
            else:
                return visitor.visitChildren(self)




    def stringList(self):

        localctx = ZigParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1122
                    self.match(ZigParser.SingleString)
                    self.state = 1123
                    self.match(ZigParser.Comma) 
                self.state = 1128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 1129
                self.match(ZigParser.SingleString)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamDeclListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ParamDeclContext)
            else:
                return self.getTypedRuleContext(ZigParser.ParamDeclContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_paramDeclList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamDeclList" ):
                return visitor.visitParamDeclList(self)
            else:
                return visitor.visitChildren(self)




    def paramDeclList(self):

        localctx = ZigParser.ParamDeclListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_paramDeclList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1132
                    self.paramDecl()
                    self.state = 1133
                    self.match(ZigParser.Comma) 
                self.state = 1139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -575453597925351008) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37044256839) != 0):
                self.state = 1140
                self.paramDecl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExprContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExprContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_exprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprList" ):
                return visitor.visitExprList(self)
            else:
                return visitor.visitChildren(self)




    def exprList(self):

        localctx = ZigParser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_exprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1143
                    self.expr()
                    self.state = 1144
                    self.match(ZigParser.Comma) 
                self.state = 1150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 1151
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.FieldContext)
            else:
                return self.getTypedRuleContext(ZigParser.FieldContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_fieldList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldList" ):
                return visitor.visitFieldList(self)
            else:
                return visitor.visitChildren(self)




    def fieldList(self):

        localctx = ZigParser.FieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_fieldList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1153
                    self.field()
                    self.state = 1154
                    self.match(ZigParser.Comma) 
                self.state = 1160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1161
            self.field()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





