# Generated from ZigParser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,106,1382,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,1,0,5,0,288,8,0,10,0,12,0,291,9,0,1,0,5,0,294,8,0,10,0,12,
        0,297,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,308,8,1,1,2,1,
        2,1,2,3,2,313,8,2,1,3,1,3,3,3,317,8,3,1,3,1,3,1,3,3,3,322,8,3,1,
        3,1,3,1,4,1,4,1,4,3,4,329,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,3,6,345,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,5,9,361,8,9,10,9,12,9,364,9,9,1,9,3,9,
        367,8,9,1,10,1,10,1,10,5,10,372,8,10,10,10,12,10,375,9,10,1,10,3,
        10,378,8,10,1,11,1,11,1,11,5,11,383,8,11,10,11,12,11,386,9,11,1,
        11,1,11,1,11,1,11,5,11,392,8,11,10,11,12,11,395,9,11,3,11,397,8,
        11,1,12,1,12,3,12,401,8,12,1,13,1,13,3,13,405,8,13,1,13,1,13,1,14,
        1,14,1,14,5,14,412,8,14,10,14,12,14,415,9,14,1,14,1,14,1,15,1,15,
        3,15,421,8,15,1,16,1,16,1,17,1,17,1,17,5,17,428,8,17,10,17,12,17,
        431,9,17,1,18,1,18,1,18,5,18,436,8,18,10,18,12,18,439,9,18,1,19,
        1,19,1,19,1,19,5,19,445,8,19,10,19,12,19,448,9,19,1,20,1,20,1,20,
        1,20,5,20,454,8,20,10,20,12,20,457,9,20,1,21,1,21,1,21,5,21,462,
        8,21,10,21,12,21,465,9,21,1,22,1,22,1,22,1,22,5,22,471,8,22,10,22,
        12,22,474,9,22,1,23,1,23,1,24,1,24,1,24,1,24,5,24,482,8,24,10,24,
        12,24,485,9,24,1,25,1,25,1,26,5,26,490,8,26,10,26,12,26,493,9,26,
        1,26,3,26,496,8,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        3,28,507,8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,515,8,29,1,30,1,
        30,1,31,3,31,520,8,31,1,31,1,31,1,32,1,32,1,32,3,32,527,8,32,1,32,
        1,32,1,32,1,33,1,33,1,33,3,33,535,8,33,1,34,1,34,1,34,1,34,1,34,
        3,34,542,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,551,8,34,1,
        34,3,34,554,8,34,1,34,3,34,557,8,34,3,34,559,8,34,1,35,1,35,1,35,
        5,35,564,8,35,10,35,12,35,567,9,35,1,35,1,35,1,36,3,36,572,8,36,
        1,36,3,36,575,8,36,1,36,1,36,1,36,3,36,580,8,36,1,36,1,36,1,36,3,
        36,585,8,36,1,37,3,37,588,8,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        3,39,597,8,39,1,40,1,40,3,40,601,8,40,1,40,1,40,1,40,1,40,1,40,3,
        40,608,8,40,1,40,1,40,1,41,3,41,613,8,41,1,41,3,41,616,8,41,1,41,
        3,41,619,8,41,1,41,3,41,622,8,41,1,42,1,42,1,42,5,42,627,8,42,10,
        42,12,42,630,9,42,1,42,3,42,633,8,42,1,43,3,43,636,8,43,1,43,3,43,
        639,8,43,1,43,1,43,3,43,643,8,43,1,43,1,43,3,43,647,8,43,1,44,1,
        44,1,45,1,45,3,45,653,8,45,1,46,5,46,656,8,46,10,46,12,46,659,9,
        46,1,46,1,46,1,47,1,47,1,47,3,47,666,8,47,1,48,1,48,1,48,1,48,5,
        48,672,8,48,10,48,12,48,675,9,48,1,48,3,48,678,8,48,1,48,1,48,1,
        48,1,48,1,48,1,48,5,48,686,8,48,10,48,12,48,689,9,48,1,48,3,48,692,
        8,48,1,48,1,48,1,48,1,48,3,48,698,8,48,1,49,1,49,3,49,702,8,49,1,
        50,1,50,1,50,3,50,707,8,50,1,51,1,51,1,51,3,51,712,8,51,1,52,1,52,
        1,52,3,52,717,8,52,1,53,1,53,1,53,3,53,722,8,53,1,54,1,54,1,54,1,
        54,1,54,1,55,1,55,1,55,5,55,732,8,55,10,55,12,55,735,9,55,1,55,1,
        55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,750,
        8,56,1,56,3,56,753,8,56,1,57,1,57,3,57,757,8,57,1,57,3,57,760,8,
        57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,768,8,57,1,57,1,57,1,57,1,
        57,3,57,774,8,57,1,57,3,57,777,8,57,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,3,58,789,8,58,1,59,1,59,1,59,1,60,3,60,795,8,
        60,1,60,1,60,1,60,1,60,3,60,801,8,60,1,61,1,61,3,61,805,8,61,1,62,
        1,62,3,62,809,8,62,1,63,1,63,3,63,813,8,63,1,64,1,64,1,64,1,64,3,
        64,819,8,64,1,64,3,64,822,8,64,1,64,1,64,1,64,1,64,1,64,3,64,829,
        8,64,1,64,3,64,832,8,64,3,64,834,8,64,1,65,1,65,1,65,1,65,3,65,840,
        8,65,1,65,3,65,843,8,65,1,66,1,66,1,66,1,66,3,66,849,8,66,1,66,3,
        66,852,8,66,1,67,1,67,1,67,1,67,1,67,3,67,859,8,67,1,68,1,68,1,69,
        1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,73,1,73,1,74,1,74,1,75,1,75,1,76,3,76,884,8,76,1,76,1,76,3,76,
        888,8,76,1,77,3,77,891,8,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,899,
        8,78,1,78,3,78,902,8,78,1,79,3,79,905,8,79,1,79,1,79,3,79,909,8,
        79,1,80,3,80,912,8,80,1,80,1,80,3,80,916,8,80,1,81,3,81,919,8,81,
        1,81,1,81,3,81,923,8,81,1,82,1,82,1,82,1,82,3,82,929,8,82,1,82,1,
        82,1,82,1,82,1,82,3,82,936,8,82,3,82,938,8,82,1,83,1,83,1,83,1,83,
        3,83,944,8,83,1,84,1,84,1,84,1,84,3,84,950,8,84,1,85,1,85,1,85,1,
        85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,962,8,86,1,86,1,86,1,86,1,
        86,1,86,3,86,969,8,86,3,86,971,8,86,1,87,1,87,1,87,1,87,3,87,977,
        8,87,1,87,3,87,980,8,87,1,88,1,88,1,88,1,88,3,88,986,8,88,1,88,3,
        88,989,8,88,1,89,1,89,1,89,1,89,1,89,3,89,996,8,89,1,89,3,89,999,
        8,89,1,90,1,90,1,90,1,90,3,90,1005,8,90,1,91,3,91,1008,8,91,1,91,
        1,91,1,92,1,92,1,92,1,92,3,92,1016,8,92,1,93,1,93,1,93,1,94,1,94,
        1,94,1,95,1,95,5,95,1026,8,95,10,95,12,95,1029,9,95,1,95,1,95,1,
        96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,
        101,1,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,
        1,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,
        1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,108,1,108,
        3,108,1078,8,108,1,108,1,108,1,108,1,109,1,109,3,109,1085,8,109,
        1,109,1,109,1,109,3,109,1090,8,109,1,109,1,109,1,110,1,110,3,110,
        1096,8,110,1,110,1,110,1,110,3,110,1101,8,110,1,110,5,110,1104,8,
        110,10,110,12,110,1107,9,110,1,110,3,110,1110,8,110,1,110,1,110,
        1,111,3,111,1115,8,111,1,111,1,111,1,111,3,111,1120,8,111,1,111,
        1,111,1,112,1,112,1,112,5,112,1127,8,112,10,112,12,112,1130,9,112,
        1,112,3,112,1133,8,112,1,112,3,112,1136,8,112,1,113,1,113,1,113,
        3,113,1141,8,113,1,114,1,114,1,114,5,114,1146,8,114,10,114,12,114,
        1149,9,114,1,114,3,114,1152,8,114,1,115,1,115,1,115,3,115,1157,8,
        115,3,115,1159,8,115,1,116,1,116,1,117,1,117,1,118,1,118,3,118,1167,
        8,118,1,119,1,119,1,119,3,119,1172,8,119,3,119,1174,8,119,1,120,
        1,120,1,120,1,120,1,120,5,120,1181,8,120,10,120,12,120,1184,9,120,
        1,120,1,120,5,120,1188,8,120,10,120,12,120,1191,9,120,1,120,3,120,
        1194,8,120,1,121,1,121,1,121,1,121,3,121,1200,8,121,1,121,1,121,
        1,122,1,122,1,122,3,122,1207,8,122,1,122,1,122,1,123,1,123,1,123,
        1,123,1,123,3,123,1216,8,123,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,3,124,1225,8,124,1,124,3,124,1228,8,124,1,125,1,125,1,125,
        1,125,1,125,3,125,1235,8,125,1,126,1,126,1,126,1,126,1,126,1,126,
        3,126,1243,8,126,3,126,1245,8,126,3,126,1247,8,126,1,126,1,126,1,
        126,1,126,1,126,1,126,3,126,1255,8,126,1,127,1,127,1,127,1,127,1,
        127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,1270,8,
        128,1,128,1,128,1,129,1,129,1,129,5,129,1277,8,129,10,129,12,129,
        1280,9,129,1,129,3,129,1283,8,129,1,130,1,130,5,130,1287,8,130,10,
        130,12,130,1290,9,130,1,130,3,130,1293,8,130,1,131,1,131,1,132,3,
        132,1298,8,132,1,132,5,132,1301,8,132,10,132,12,132,1304,9,132,1,
        133,1,133,1,133,3,133,1309,8,133,1,133,3,133,1312,8,133,1,133,3,
        133,1315,8,133,1,134,3,134,1318,8,134,1,134,1,134,1,134,3,134,1323,
        8,134,1,135,3,135,1326,8,135,1,135,3,135,1329,8,135,1,135,1,135,
        1,136,1,136,1,136,3,136,1336,8,136,1,136,1,136,3,136,1340,8,136,
        1,137,1,137,1,137,3,137,1345,8,137,3,137,1347,8,137,1,138,1,138,
        1,139,1,139,1,139,1,139,3,139,1355,8,139,1,139,1,139,1,139,3,139,
        1360,8,139,1,139,1,139,1,140,3,140,1365,8,140,1,140,3,140,1368,8,
        140,1,140,3,140,1371,8,140,1,141,1,141,3,141,1375,8,141,1,141,1,
        141,1,142,1,142,1,142,1,142,0,0,143,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,0,9,3,0,73,74,76,77,81,84,2,
        0,78,79,87,91,6,0,9,9,45,45,58,58,74,74,76,76,92,92,2,0,22,22,36,
        36,2,0,13,13,29,29,2,0,69,69,93,93,2,0,70,70,94,94,2,0,14,14,49,
        49,2,0,98,98,102,102,1461,0,289,1,0,0,0,2,307,1,0,0,0,4,312,1,0,
        0,0,6,314,1,0,0,0,8,325,1,0,0,0,10,330,1,0,0,0,12,341,1,0,0,0,14,
        346,1,0,0,0,16,354,1,0,0,0,18,362,1,0,0,0,20,373,1,0,0,0,22,396,
        1,0,0,0,24,400,1,0,0,0,26,402,1,0,0,0,28,413,1,0,0,0,30,418,1,0,
        0,0,32,422,1,0,0,0,34,424,1,0,0,0,36,432,1,0,0,0,38,440,1,0,0,0,
        40,449,1,0,0,0,42,458,1,0,0,0,44,466,1,0,0,0,46,475,1,0,0,0,48,477,
        1,0,0,0,50,486,1,0,0,0,52,495,1,0,0,0,54,499,1,0,0,0,56,506,1,0,
        0,0,58,514,1,0,0,0,60,516,1,0,0,0,62,519,1,0,0,0,64,523,1,0,0,0,
        66,534,1,0,0,0,68,558,1,0,0,0,70,565,1,0,0,0,72,571,1,0,0,0,74,587,
        1,0,0,0,76,589,1,0,0,0,78,591,1,0,0,0,80,598,1,0,0,0,82,612,1,0,
        0,0,84,628,1,0,0,0,86,646,1,0,0,0,88,648,1,0,0,0,90,652,1,0,0,0,
        92,657,1,0,0,0,94,662,1,0,0,0,96,697,1,0,0,0,98,701,1,0,0,0,100,
        706,1,0,0,0,102,711,1,0,0,0,104,716,1,0,0,0,106,721,1,0,0,0,108,
        723,1,0,0,0,110,733,1,0,0,0,112,752,1,0,0,0,114,776,1,0,0,0,116,
        788,1,0,0,0,118,790,1,0,0,0,120,800,1,0,0,0,122,804,1,0,0,0,124,
        808,1,0,0,0,126,812,1,0,0,0,128,833,1,0,0,0,130,835,1,0,0,0,132,
        844,1,0,0,0,134,853,1,0,0,0,136,860,1,0,0,0,138,862,1,0,0,0,140,
        864,1,0,0,0,142,866,1,0,0,0,144,868,1,0,0,0,146,876,1,0,0,0,148,
        878,1,0,0,0,150,880,1,0,0,0,152,883,1,0,0,0,154,890,1,0,0,0,156,
        901,1,0,0,0,158,904,1,0,0,0,160,911,1,0,0,0,162,918,1,0,0,0,164,
        937,1,0,0,0,166,939,1,0,0,0,168,945,1,0,0,0,170,951,1,0,0,0,172,
        970,1,0,0,0,174,972,1,0,0,0,176,981,1,0,0,0,178,990,1,0,0,0,180,
        1004,1,0,0,0,182,1007,1,0,0,0,184,1011,1,0,0,0,186,1017,1,0,0,0,
        188,1020,1,0,0,0,190,1023,1,0,0,0,192,1032,1,0,0,0,194,1034,1,0,
        0,0,196,1036,1,0,0,0,198,1038,1,0,0,0,200,1040,1,0,0,0,202,1042,
        1,0,0,0,204,1046,1,0,0,0,206,1051,1,0,0,0,208,1056,1,0,0,0,210,1061,
        1,0,0,0,212,1066,1,0,0,0,214,1071,1,0,0,0,216,1075,1,0,0,0,218,1082,
        1,0,0,0,220,1093,1,0,0,0,222,1114,1,0,0,0,224,1135,1,0,0,0,226,1137,
        1,0,0,0,228,1142,1,0,0,0,230,1153,1,0,0,0,232,1160,1,0,0,0,234,1162,
        1,0,0,0,236,1166,1,0,0,0,238,1173,1,0,0,0,240,1193,1,0,0,0,242,1195,
        1,0,0,0,244,1203,1,0,0,0,246,1215,1,0,0,0,248,1227,1,0,0,0,250,1234,
        1,0,0,0,252,1254,1,0,0,0,254,1256,1,0,0,0,256,1261,1,0,0,0,258,1278,
        1,0,0,0,260,1288,1,0,0,0,262,1294,1,0,0,0,264,1297,1,0,0,0,266,1314,
        1,0,0,0,268,1317,1,0,0,0,270,1325,1,0,0,0,272,1339,1,0,0,0,274,1346,
        1,0,0,0,276,1348,1,0,0,0,278,1350,1,0,0,0,280,1364,1,0,0,0,282,1372,
        1,0,0,0,284,1378,1,0,0,0,286,288,5,106,0,0,287,286,1,0,0,0,288,291,
        1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,295,1,0,0,0,291,289,
        1,0,0,0,292,294,5,104,0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,
        1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,
        3,262,131,0,299,1,1,0,0,0,300,308,5,5,0,0,301,308,5,47,0,0,302,308,
        3,60,30,0,303,308,3,56,28,0,304,308,3,202,101,0,305,308,3,104,52,
        0,306,308,3,106,53,0,307,300,1,0,0,0,307,301,1,0,0,0,307,302,1,0,
        0,0,307,303,1,0,0,0,307,304,1,0,0,0,307,305,1,0,0,0,307,306,1,0,
        0,0,308,3,1,0,0,0,309,313,3,6,3,0,310,313,3,102,51,0,311,313,3,30,
        15,0,312,309,1,0,0,0,312,310,1,0,0,0,312,311,1,0,0,0,313,5,1,0,0,
        0,314,316,5,7,0,0,315,317,5,50,0,0,316,315,1,0,0,0,316,317,1,0,0,
        0,317,318,1,0,0,0,318,319,5,52,0,0,319,321,3,32,16,0,320,322,3,8,
        4,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,53,
        0,0,324,7,1,0,0,0,325,326,5,62,0,0,326,328,3,18,9,0,327,329,3,12,
        6,0,328,327,1,0,0,0,328,329,1,0,0,0,329,9,1,0,0,0,330,331,5,56,0,
        0,331,332,5,98,0,0,332,333,5,57,0,0,333,334,5,102,0,0,334,335,5,
        52,0,0,335,336,5,75,0,0,336,337,3,92,46,0,337,338,5,98,0,0,338,339,
        1,0,0,0,339,340,5,53,0,0,340,11,1,0,0,0,341,342,5,62,0,0,342,344,
        3,20,10,0,343,345,3,16,8,0,344,343,1,0,0,0,344,345,1,0,0,0,345,13,
        1,0,0,0,346,347,5,56,0,0,347,348,5,98,0,0,348,349,5,57,0,0,349,350,
        5,102,0,0,350,351,5,52,0,0,351,352,3,32,16,0,352,353,5,53,0,0,353,
        15,1,0,0,0,354,355,5,62,0,0,355,356,3,260,130,0,356,17,1,0,0,0,357,
        358,3,10,5,0,358,359,5,63,0,0,359,361,1,0,0,0,360,357,1,0,0,0,361,
        364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,366,1,0,0,0,364,
        362,1,0,0,0,365,367,3,10,5,0,366,365,1,0,0,0,366,367,1,0,0,0,367,
        19,1,0,0,0,368,369,3,14,7,0,369,370,5,63,0,0,370,372,1,0,0,0,371,
        368,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,
        377,1,0,0,0,375,373,1,0,0,0,376,378,3,14,7,0,377,376,1,0,0,0,377,
        378,1,0,0,0,378,21,1,0,0,0,379,380,5,8,0,0,380,384,3,2,1,0,381,383,
        3,252,126,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,
        385,1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,388,3,26,13,0,388,
        397,1,0,0,0,389,393,3,2,1,0,390,392,3,24,12,0,391,390,1,0,0,0,392,
        395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,397,1,0,0,0,395,
        393,1,0,0,0,396,379,1,0,0,0,396,389,1,0,0,0,397,23,1,0,0,0,398,401,
        3,252,126,0,399,401,3,26,13,0,400,398,1,0,0,0,400,399,1,0,0,0,401,
        25,1,0,0,0,402,404,5,52,0,0,403,405,3,28,14,0,404,403,1,0,0,0,404,
        405,1,0,0,0,405,406,1,0,0,0,406,407,5,53,0,0,407,27,1,0,0,0,408,
        409,3,32,16,0,409,410,5,63,0,0,410,412,1,0,0,0,411,408,1,0,0,0,412,
        415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,
        413,1,0,0,0,416,417,3,32,16,0,417,29,1,0,0,0,418,420,3,92,46,0,419,
        421,3,96,48,0,420,419,1,0,0,0,420,421,1,0,0,0,421,31,1,0,0,0,422,
        423,3,34,17,0,423,33,1,0,0,0,424,429,3,36,18,0,425,426,5,34,0,0,
        426,428,3,36,18,0,427,425,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,
        0,429,430,1,0,0,0,430,35,1,0,0,0,431,429,1,0,0,0,432,437,3,38,19,
        0,433,434,5,4,0,0,434,436,3,38,19,0,435,433,1,0,0,0,436,439,1,0,
        0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,37,1,0,0,0,439,437,1,0,0,
        0,440,446,3,40,20,0,441,442,3,234,117,0,442,443,3,40,20,0,443,445,
        1,0,0,0,444,441,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,
        1,0,0,0,447,39,1,0,0,0,448,446,1,0,0,0,449,455,3,42,21,0,450,451,
        3,236,118,0,451,452,3,42,21,0,452,454,1,0,0,0,453,450,1,0,0,0,454,
        457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,41,1,0,0,0,457,455,
        1,0,0,0,458,463,3,44,22,0,459,460,5,96,0,0,460,462,3,44,22,0,461,
        459,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,
        43,1,0,0,0,465,463,1,0,0,0,466,472,3,48,24,0,467,468,3,46,23,0,468,
        469,3,48,24,0,469,471,1,0,0,0,470,467,1,0,0,0,471,474,1,0,0,0,472,
        470,1,0,0,0,472,473,1,0,0,0,473,45,1,0,0,0,474,472,1,0,0,0,475,476,
        7,0,0,0,476,47,1,0,0,0,477,483,3,52,26,0,478,479,3,50,25,0,479,480,
        3,52,26,0,480,482,1,0,0,0,481,478,1,0,0,0,482,485,1,0,0,0,483,481,
        1,0,0,0,483,484,1,0,0,0,484,49,1,0,0,0,485,483,1,0,0,0,486,487,7,
        1,0,0,487,51,1,0,0,0,488,490,3,54,27,0,489,488,1,0,0,0,490,493,1,
        0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,496,1,0,0,0,493,491,1,
        0,0,0,494,496,5,60,0,0,495,491,1,0,0,0,495,494,1,0,0,0,496,497,1,
        0,0,0,497,498,3,4,2,0,498,53,1,0,0,0,499,500,7,2,0,0,500,55,1,0,
        0,0,501,507,3,192,96,0,502,507,3,194,97,0,503,507,3,196,98,0,504,
        507,3,198,99,0,505,507,3,200,100,0,506,501,1,0,0,0,506,502,1,0,0,
        0,506,503,1,0,0,0,506,504,1,0,0,0,506,505,1,0,0,0,507,57,1,0,0,0,
        508,515,3,268,134,0,509,515,3,270,135,0,510,511,5,48,0,0,511,512,
        3,32,16,0,512,513,5,86,0,0,513,515,1,0,0,0,514,508,1,0,0,0,514,509,
        1,0,0,0,514,510,1,0,0,0,515,59,1,0,0,0,516,517,5,98,0,0,517,61,1,
        0,0,0,518,520,7,3,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,
        0,0,0,521,522,3,64,32,0,522,63,1,0,0,0,523,524,3,66,33,0,524,526,
        5,54,0,0,525,527,5,105,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,
        1,0,0,0,528,529,3,264,132,0,529,530,5,55,0,0,530,65,1,0,0,0,531,
        535,3,68,34,0,532,535,3,78,39,0,533,535,5,33,0,0,534,531,1,0,0,0,
        534,532,1,0,0,0,534,533,1,0,0,0,535,67,1,0,0,0,536,541,5,40,0,0,
        537,538,5,52,0,0,538,539,3,32,16,0,539,540,5,53,0,0,540,542,1,0,
        0,0,541,537,1,0,0,0,541,542,1,0,0,0,542,559,1,0,0,0,543,556,5,46,
        0,0,544,553,5,52,0,0,545,550,5,18,0,0,546,547,5,52,0,0,547,548,3,
        32,16,0,548,549,5,53,0,0,549,551,1,0,0,0,550,546,1,0,0,0,550,551,
        1,0,0,0,551,554,1,0,0,0,552,554,3,32,16,0,553,545,1,0,0,0,553,552,
        1,0,0,0,554,555,1,0,0,0,555,557,5,53,0,0,556,544,1,0,0,0,556,557,
        1,0,0,0,557,559,1,0,0,0,558,536,1,0,0,0,558,543,1,0,0,0,559,69,1,
        0,0,0,560,561,3,72,36,0,561,562,5,63,0,0,562,564,1,0,0,0,563,560,
        1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,
        1,0,0,0,567,565,1,0,0,0,568,569,3,72,36,0,569,71,1,0,0,0,570,572,
        5,105,0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,575,
        5,13,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,579,
        3,76,38,0,577,578,5,62,0,0,578,580,3,92,46,0,579,577,1,0,0,0,579,
        580,1,0,0,0,580,581,1,0,0,0,581,584,3,74,37,0,582,583,5,69,0,0,583,
        585,3,32,16,0,584,582,1,0,0,0,584,585,1,0,0,0,585,73,1,0,0,0,586,
        588,3,254,127,0,587,586,1,0,0,0,587,588,1,0,0,0,588,75,1,0,0,0,589,
        590,5,98,0,0,590,77,1,0,0,0,591,596,5,18,0,0,592,593,5,52,0,0,593,
        594,3,32,16,0,594,595,5,53,0,0,595,597,1,0,0,0,596,592,1,0,0,0,596,
        597,1,0,0,0,597,79,1,0,0,0,598,600,5,23,0,0,599,601,5,98,0,0,600,
        599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,52,0,0,603,
        604,3,84,42,0,604,605,5,53,0,0,605,607,3,82,41,0,606,608,5,60,0,
        0,607,606,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,610,3,92,46,
        0,610,81,1,0,0,0,611,613,3,254,127,0,612,611,1,0,0,0,612,613,1,0,
        0,0,613,615,1,0,0,0,614,616,3,210,105,0,615,614,1,0,0,0,615,616,
        1,0,0,0,616,618,1,0,0,0,617,619,3,208,104,0,618,617,1,0,0,0,618,
        619,1,0,0,0,619,621,1,0,0,0,620,622,3,212,106,0,621,620,1,0,0,0,
        621,622,1,0,0,0,622,83,1,0,0,0,623,624,3,86,43,0,624,625,5,63,0,
        0,625,627,1,0,0,0,626,623,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,
        0,628,629,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,631,633,3,86,43,
        0,632,631,1,0,0,0,632,633,1,0,0,0,633,85,1,0,0,0,634,636,5,105,0,
        0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,639,3,88,44,
        0,638,637,1,0,0,0,638,639,1,0,0,0,639,642,1,0,0,0,640,641,5,98,0,
        0,641,643,5,62,0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,
        0,644,647,3,90,45,0,645,647,5,68,0,0,646,635,1,0,0,0,646,645,1,0,
        0,0,647,87,1,0,0,0,648,649,7,4,0,0,649,89,1,0,0,0,650,653,5,6,0,
        0,651,653,3,92,46,0,652,650,1,0,0,0,652,651,1,0,0,0,653,91,1,0,0,
        0,654,656,3,240,120,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,
        0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,661,3,
        94,47,0,661,93,1,0,0,0,662,665,3,22,11,0,663,664,5,60,0,0,664,666,
        3,92,46,0,665,663,1,0,0,0,665,666,1,0,0,0,666,95,1,0,0,0,667,668,
        5,54,0,0,668,673,3,204,102,0,669,670,5,63,0,0,670,672,3,204,102,
        0,671,669,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,
        0,674,677,1,0,0,0,675,673,1,0,0,0,676,678,5,63,0,0,677,676,1,0,0,
        0,677,678,1,0,0,0,678,679,1,0,0,0,679,680,5,55,0,0,680,698,1,0,0,
        0,681,682,5,54,0,0,682,687,3,32,16,0,683,684,5,63,0,0,684,686,3,
        32,16,0,685,683,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,
        1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,690,692,5,63,0,0,691,690,
        1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,694,5,55,0,0,694,698,
        1,0,0,0,695,696,5,54,0,0,696,698,5,55,0,0,697,667,1,0,0,0,697,681,
        1,0,0,0,697,695,1,0,0,0,698,97,1,0,0,0,699,702,3,120,60,0,700,702,
        3,100,50,0,701,699,1,0,0,0,701,700,1,0,0,0,702,99,1,0,0,0,703,707,
        3,112,56,0,704,707,3,122,61,0,705,707,3,146,73,0,706,703,1,0,0,0,
        706,704,1,0,0,0,706,705,1,0,0,0,707,101,1,0,0,0,708,712,3,114,57,
        0,709,712,3,124,62,0,710,712,3,148,74,0,711,708,1,0,0,0,711,709,
        1,0,0,0,711,710,1,0,0,0,712,103,1,0,0,0,713,717,3,116,58,0,714,717,
        3,126,63,0,715,717,3,150,75,0,716,713,1,0,0,0,716,714,1,0,0,0,716,
        715,1,0,0,0,717,105,1,0,0,0,718,722,3,62,31,0,719,722,3,108,54,0,
        720,722,3,80,40,0,721,718,1,0,0,0,721,719,1,0,0,0,721,720,1,0,0,
        0,722,107,1,0,0,0,723,724,5,20,0,0,724,725,5,54,0,0,725,726,3,110,
        55,0,726,727,5,55,0,0,727,109,1,0,0,0,728,729,5,105,0,0,729,730,
        5,98,0,0,730,732,5,63,0,0,731,728,1,0,0,0,732,735,1,0,0,0,733,731,
        1,0,0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,733,1,0,0,0,736,737,
        5,105,0,0,737,738,5,98,0,0,738,111,1,0,0,0,739,740,5,13,0,0,740,
        753,3,180,90,0,741,742,5,32,0,0,742,753,3,180,90,0,743,744,5,41,
        0,0,744,753,3,180,90,0,745,746,5,16,0,0,746,753,3,180,90,0,747,749,
        5,19,0,0,748,750,3,214,107,0,749,748,1,0,0,0,749,750,1,0,0,0,750,
        751,1,0,0,0,751,753,3,180,90,0,752,739,1,0,0,0,752,741,1,0,0,0,752,
        743,1,0,0,0,752,745,1,0,0,0,752,747,1,0,0,0,753,113,1,0,0,0,754,
        756,5,10,0,0,755,757,3,186,93,0,756,755,1,0,0,0,756,757,1,0,0,0,
        757,759,1,0,0,0,758,760,3,32,16,0,759,758,1,0,0,0,759,760,1,0,0,
        0,760,777,1,0,0,0,761,762,5,13,0,0,762,777,3,32,16,0,763,764,5,32,
        0,0,764,777,3,32,16,0,765,767,5,15,0,0,766,768,3,186,93,0,767,766,
        1,0,0,0,767,768,1,0,0,0,768,777,1,0,0,0,769,770,5,38,0,0,770,777,
        3,32,16,0,771,773,5,39,0,0,772,774,3,32,16,0,773,772,1,0,0,0,773,
        774,1,0,0,0,774,777,1,0,0,0,775,777,3,190,95,0,776,754,1,0,0,0,776,
        761,1,0,0,0,776,763,1,0,0,0,776,765,1,0,0,0,776,769,1,0,0,0,776,
        771,1,0,0,0,776,775,1,0,0,0,777,115,1,0,0,0,778,789,3,118,59,0,779,
        780,5,64,0,0,780,789,5,98,0,0,781,782,5,64,0,0,782,789,3,96,48,0,
        783,784,5,20,0,0,784,785,5,64,0,0,785,789,5,98,0,0,786,787,5,13,
        0,0,787,789,3,92,46,0,788,778,1,0,0,0,788,779,1,0,0,0,788,781,1,
        0,0,0,788,783,1,0,0,0,788,786,1,0,0,0,789,117,1,0,0,0,790,791,5,
        97,0,0,791,792,3,26,13,0,792,119,1,0,0,0,793,795,5,13,0,0,794,793,
        1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,801,3,278,139,0,797,
        798,3,184,92,0,798,799,5,86,0,0,799,801,1,0,0,0,800,794,1,0,0,0,
        800,797,1,0,0,0,801,121,1,0,0,0,802,805,3,128,64,0,803,805,3,144,
        72,0,804,802,1,0,0,0,804,803,1,0,0,0,805,123,1,0,0,0,806,809,3,130,
        65,0,807,809,3,144,72,0,808,806,1,0,0,0,808,807,1,0,0,0,809,125,
        1,0,0,0,810,813,3,132,66,0,811,813,3,144,72,0,812,810,1,0,0,0,812,
        811,1,0,0,0,813,127,1,0,0,0,814,815,3,134,67,0,815,821,3,182,91,
        0,816,818,5,17,0,0,817,819,3,214,107,0,818,817,1,0,0,0,818,819,1,
        0,0,0,819,820,1,0,0,0,820,822,3,142,71,0,821,816,1,0,0,0,821,822,
        1,0,0,0,822,834,1,0,0,0,823,824,3,134,67,0,824,831,3,184,92,0,825,
        832,5,86,0,0,826,828,5,17,0,0,827,829,3,214,107,0,828,827,1,0,0,
        0,828,829,1,0,0,0,829,830,1,0,0,0,830,832,3,142,71,0,831,825,1,0,
        0,0,831,826,1,0,0,0,832,834,1,0,0,0,833,814,1,0,0,0,833,823,1,0,
        0,0,834,129,1,0,0,0,835,836,3,134,67,0,836,842,3,138,69,0,837,839,
        5,17,0,0,838,840,3,214,107,0,839,838,1,0,0,0,839,840,1,0,0,0,840,
        841,1,0,0,0,841,843,3,140,70,0,842,837,1,0,0,0,842,843,1,0,0,0,843,
        131,1,0,0,0,844,845,3,134,67,0,845,851,3,92,46,0,846,848,5,17,0,
        0,847,849,3,214,107,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,
        0,0,0,850,852,3,92,46,0,851,846,1,0,0,0,851,852,1,0,0,0,852,133,
        1,0,0,0,853,854,5,25,0,0,854,855,5,52,0,0,855,856,3,136,68,0,856,
        858,5,53,0,0,857,859,3,216,108,0,858,857,1,0,0,0,858,859,1,0,0,0,
        859,135,1,0,0,0,860,861,3,32,16,0,861,137,1,0,0,0,862,863,3,32,16,
        0,863,139,1,0,0,0,864,865,3,32,16,0,865,141,1,0,0,0,866,867,3,98,
        49,0,867,143,1,0,0,0,868,869,5,42,0,0,869,870,5,52,0,0,870,871,3,
        32,16,0,871,872,5,53,0,0,872,873,5,54,0,0,873,874,3,258,129,0,874,
        875,5,55,0,0,875,145,1,0,0,0,876,877,3,152,76,0,877,147,1,0,0,0,
        878,879,3,154,77,0,879,149,1,0,0,0,880,881,3,156,78,0,881,151,1,
        0,0,0,882,884,3,188,94,0,883,882,1,0,0,0,883,884,1,0,0,0,884,887,
        1,0,0,0,885,888,3,190,95,0,886,888,3,158,79,0,887,885,1,0,0,0,887,
        886,1,0,0,0,888,153,1,0,0,0,889,891,3,188,94,0,890,889,1,0,0,0,890,
        891,1,0,0,0,891,892,1,0,0,0,892,893,3,160,80,0,893,155,1,0,0,0,894,
        895,3,188,94,0,895,896,3,190,95,0,896,902,1,0,0,0,897,899,3,188,
        94,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,902,3,162,
        81,0,901,894,1,0,0,0,901,898,1,0,0,0,902,157,1,0,0,0,903,905,5,26,
        0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,908,1,0,0,0,906,909,3,164,
        82,0,907,909,3,172,86,0,908,906,1,0,0,0,908,907,1,0,0,0,909,159,
        1,0,0,0,910,912,5,26,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,915,
        1,0,0,0,913,916,3,166,83,0,914,916,3,174,87,0,915,913,1,0,0,0,915,
        914,1,0,0,0,916,161,1,0,0,0,917,919,5,26,0,0,918,917,1,0,0,0,918,
        919,1,0,0,0,919,922,1,0,0,0,920,923,3,168,84,0,921,923,3,176,88,
        0,922,920,1,0,0,0,922,921,1,0,0,0,923,163,1,0,0,0,924,925,3,170,
        85,0,925,928,3,182,91,0,926,927,5,17,0,0,927,929,3,98,49,0,928,926,
        1,0,0,0,928,929,1,0,0,0,929,938,1,0,0,0,930,931,3,170,85,0,931,935,
        3,184,92,0,932,936,5,86,0,0,933,934,5,17,0,0,934,936,3,98,49,0,935,
        932,1,0,0,0,935,933,1,0,0,0,936,938,1,0,0,0,937,924,1,0,0,0,937,
        930,1,0,0,0,938,165,1,0,0,0,939,940,3,170,85,0,940,943,3,32,16,0,
        941,942,5,17,0,0,942,944,3,32,16,0,943,941,1,0,0,0,943,944,1,0,0,
        0,944,167,1,0,0,0,945,946,3,170,85,0,946,949,3,92,46,0,947,948,5,
        17,0,0,948,950,3,92,46,0,949,947,1,0,0,0,949,950,1,0,0,0,950,169,
        1,0,0,0,951,952,5,24,0,0,952,953,5,52,0,0,953,954,3,228,114,0,954,
        955,5,53,0,0,955,956,3,220,110,0,956,171,1,0,0,0,957,958,3,178,89,
        0,958,961,3,182,91,0,959,960,5,17,0,0,960,962,3,98,49,0,961,959,
        1,0,0,0,961,962,1,0,0,0,962,971,1,0,0,0,963,964,3,178,89,0,964,968,
        3,184,92,0,965,969,5,86,0,0,966,967,5,17,0,0,967,969,3,98,49,0,968,
        965,1,0,0,0,968,966,1,0,0,0,969,971,1,0,0,0,970,957,1,0,0,0,970,
        963,1,0,0,0,971,173,1,0,0,0,972,973,3,178,89,0,973,979,3,32,16,0,
        974,976,5,17,0,0,975,977,3,214,107,0,976,975,1,0,0,0,976,977,1,0,
        0,0,977,978,1,0,0,0,978,980,3,32,16,0,979,974,1,0,0,0,979,980,1,
        0,0,0,980,175,1,0,0,0,981,982,3,178,89,0,982,988,3,92,46,0,983,985,
        5,17,0,0,984,986,3,214,107,0,985,984,1,0,0,0,985,986,1,0,0,0,986,
        987,1,0,0,0,987,989,3,92,46,0,988,983,1,0,0,0,988,989,1,0,0,0,989,
        177,1,0,0,0,990,991,5,51,0,0,991,992,5,52,0,0,992,993,3,136,68,0,
        993,995,5,53,0,0,994,996,3,216,108,0,995,994,1,0,0,0,995,996,1,0,
        0,0,996,998,1,0,0,0,997,999,3,206,103,0,998,997,1,0,0,0,998,999,
        1,0,0,0,999,179,1,0,0,0,1000,1005,3,182,91,0,1001,1002,3,184,92,
        0,1002,1003,5,86,0,0,1003,1005,1,0,0,0,1004,1000,1,0,0,0,1004,1001,
        1,0,0,0,1005,181,1,0,0,0,1006,1008,3,188,94,0,1007,1006,1,0,0,0,
        1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1010,3,190,95,0,1010,183,
        1,0,0,0,1011,1015,3,32,16,0,1012,1013,3,232,116,0,1013,1014,3,32,
        16,0,1014,1016,1,0,0,0,1015,1012,1,0,0,0,1015,1016,1,0,0,0,1016,
        185,1,0,0,0,1017,1018,5,62,0,0,1018,1019,5,98,0,0,1019,187,1,0,0,
        0,1020,1021,5,98,0,0,1021,1022,5,62,0,0,1022,189,1,0,0,0,1023,1027,
        5,54,0,0,1024,1026,3,98,49,0,1025,1024,1,0,0,0,1026,1029,1,0,0,0,
        1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,1027,
        1,0,0,0,1030,1031,5,55,0,0,1031,191,1,0,0,0,1032,1033,5,99,0,0,1033,
        193,1,0,0,0,1034,1035,5,100,0,0,1035,195,1,0,0,0,1036,1037,5,101,
        0,0,1037,197,1,0,0,0,1038,1039,5,102,0,0,1039,199,1,0,0,0,1040,1041,
        5,103,0,0,1041,201,1,0,0,0,1042,1043,5,52,0,0,1043,1044,3,32,16,
        0,1044,1045,5,53,0,0,1045,203,1,0,0,0,1046,1047,5,64,0,0,1047,1048,
        5,98,0,0,1048,1049,5,69,0,0,1049,1050,3,32,16,0,1050,205,1,0,0,0,
        1051,1052,5,62,0,0,1052,1053,5,52,0,0,1053,1054,3,184,92,0,1054,
        1055,5,53,0,0,1055,207,1,0,0,0,1056,1057,5,28,0,0,1057,1058,5,52,
        0,0,1058,1059,3,32,16,0,1059,1060,5,53,0,0,1060,209,1,0,0,0,1061,
        1062,5,1,0,0,1062,1063,5,52,0,0,1063,1064,3,32,16,0,1064,1065,5,
        53,0,0,1065,211,1,0,0,0,1066,1067,5,11,0,0,1067,1068,5,52,0,0,1068,
        1069,3,32,16,0,1069,1070,5,53,0,0,1070,213,1,0,0,0,1071,1072,5,80,
        0,0,1072,1073,5,98,0,0,1073,1074,5,80,0,0,1074,215,1,0,0,0,1075,
        1077,5,80,0,0,1076,1078,5,91,0,0,1077,1076,1,0,0,0,1077,1078,1,0,
        0,0,1078,1079,1,0,0,0,1079,1080,5,98,0,0,1080,1081,5,80,0,0,1081,
        217,1,0,0,0,1082,1084,5,80,0,0,1083,1085,5,91,0,0,1084,1083,1,0,
        0,0,1084,1085,1,0,0,0,1085,1086,1,0,0,0,1086,1089,5,98,0,0,1087,
        1088,5,63,0,0,1088,1090,5,98,0,0,1089,1087,1,0,0,0,1089,1090,1,0,
        0,0,1090,1091,1,0,0,0,1091,1092,5,80,0,0,1092,219,1,0,0,0,1093,1095,
        5,80,0,0,1094,1096,5,91,0,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,
        1096,1097,1,0,0,0,1097,1105,5,98,0,0,1098,1100,5,63,0,0,1099,1101,
        5,91,0,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,0,1102,
        1104,5,98,0,0,1103,1098,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,
        0,0,1105,1106,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1108,1110,
        5,63,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,
        1112,5,80,0,0,1112,221,1,0,0,0,1113,1115,5,26,0,0,1114,1113,1,0,
        0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1117,3,224,112,0,1117,
        1119,5,71,0,0,1118,1120,3,218,109,0,1119,1118,1,0,0,0,1119,1120,
        1,0,0,0,1120,1121,1,0,0,0,1121,1122,3,184,92,0,1122,223,1,0,0,0,
        1123,1128,3,226,113,0,1124,1125,5,63,0,0,1125,1127,3,226,113,0,1126,
        1124,1,0,0,0,1127,1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,
        0,1129,1132,1,0,0,0,1130,1128,1,0,0,0,1131,1133,5,63,0,0,1132,1131,
        1,0,0,0,1132,1133,1,0,0,0,1133,1136,1,0,0,0,1134,1136,5,17,0,0,1135,
        1123,1,0,0,0,1135,1134,1,0,0,0,1136,225,1,0,0,0,1137,1140,3,32,16,
        0,1138,1139,5,68,0,0,1139,1141,3,32,16,0,1140,1138,1,0,0,0,1140,
        1141,1,0,0,0,1141,227,1,0,0,0,1142,1147,3,230,115,0,1143,1144,5,
        63,0,0,1144,1146,3,230,115,0,1145,1143,1,0,0,0,1146,1149,1,0,0,0,
        1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,1151,1,0,0,0,1149,1147,
        1,0,0,0,1150,1152,5,63,0,0,1151,1150,1,0,0,0,1151,1152,1,0,0,0,1152,
        229,1,0,0,0,1153,1158,3,32,16,0,1154,1156,5,65,0,0,1155,1157,3,32,
        16,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1159,1,0,0,0,1158,
        1154,1,0,0,0,1158,1159,1,0,0,0,1159,231,1,0,0,0,1160,1161,7,5,0,
        0,1161,233,1,0,0,0,1162,1163,7,6,0,0,1163,235,1,0,0,0,1164,1167,
        5,95,0,0,1165,1167,3,238,119,0,1166,1164,1,0,0,0,1166,1165,1,0,0,
        0,1167,237,1,0,0,0,1168,1174,5,35,0,0,1169,1171,5,12,0,0,1170,1172,
        3,214,107,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,
        0,1173,1168,1,0,0,0,1173,1169,1,0,0,0,1174,239,1,0,0,0,1175,1194,
        5,85,0,0,1176,1177,5,5,0,0,1177,1194,5,75,0,0,1178,1182,3,244,122,
        0,1179,1181,3,246,123,0,1180,1179,1,0,0,0,1181,1184,1,0,0,0,1182,
        1180,1,0,0,0,1182,1183,1,0,0,0,1183,1194,1,0,0,0,1184,1182,1,0,0,
        0,1185,1189,3,248,124,0,1186,1188,3,250,125,0,1187,1186,1,0,0,0,
        1188,1191,1,0,0,0,1189,1187,1,0,0,0,1189,1190,1,0,0,0,1190,1194,
        1,0,0,0,1191,1189,1,0,0,0,1192,1194,3,242,121,0,1193,1175,1,0,0,
        0,1193,1176,1,0,0,0,1193,1178,1,0,0,0,1193,1185,1,0,0,0,1193,1192,
        1,0,0,0,1194,241,1,0,0,0,1195,1196,5,56,0,0,1196,1199,3,32,16,0,
        1197,1198,5,62,0,0,1198,1200,3,32,16,0,1199,1197,1,0,0,0,1199,1200,
        1,0,0,0,1200,1201,1,0,0,0,1201,1202,5,57,0,0,1202,243,1,0,0,0,1203,
        1206,5,56,0,0,1204,1205,5,62,0,0,1205,1207,3,32,16,0,1206,1204,1,
        0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1209,5,57,0,0,1209,
        245,1,0,0,0,1210,1216,3,254,127,0,1211,1216,3,210,105,0,1212,1216,
        5,3,0,0,1213,1216,5,14,0,0,1214,1216,5,50,0,0,1215,1210,1,0,0,0,
        1215,1211,1,0,0,0,1215,1212,1,0,0,0,1215,1213,1,0,0,0,1215,1214,
        1,0,0,0,1216,247,1,0,0,0,1217,1228,5,91,0,0,1218,1228,5,88,0,0,1219,
        1220,5,56,0,0,1220,1224,5,91,0,0,1221,1225,5,27,0,0,1222,1223,5,
        62,0,0,1223,1225,3,32,16,0,1224,1221,1,0,0,0,1224,1222,1,0,0,0,1224,
        1225,1,0,0,0,1225,1226,1,0,0,0,1226,1228,5,57,0,0,1227,1217,1,0,
        0,0,1227,1218,1,0,0,0,1227,1219,1,0,0,0,1228,249,1,0,0,0,1229,1235,
        3,256,128,0,1230,1235,3,210,105,0,1231,1235,5,3,0,0,1232,1235,5,
        14,0,0,1233,1235,5,50,0,0,1234,1229,1,0,0,0,1234,1230,1,0,0,0,1234,
        1231,1,0,0,0,1234,1232,1,0,0,0,1234,1233,1,0,0,0,1235,251,1,0,0,
        0,1236,1237,5,56,0,0,1237,1246,3,32,16,0,1238,1244,5,65,0,0,1239,
        1242,3,32,16,0,1240,1241,5,62,0,0,1241,1243,3,32,16,0,1242,1240,
        1,0,0,0,1242,1243,1,0,0,0,1243,1245,1,0,0,0,1244,1239,1,0,0,0,1244,
        1245,1,0,0,0,1245,1247,1,0,0,0,1246,1238,1,0,0,0,1246,1247,1,0,0,
        0,1247,1248,1,0,0,0,1248,1249,5,57,0,0,1249,1255,1,0,0,0,1250,1251,
        5,64,0,0,1251,1255,5,98,0,0,1252,1255,5,67,0,0,1253,1255,5,66,0,
        0,1254,1236,1,0,0,0,1254,1250,1,0,0,0,1254,1252,1,0,0,0,1254,1253,
        1,0,0,0,1255,253,1,0,0,0,1256,1257,5,2,0,0,1257,1258,5,52,0,0,1258,
        1259,3,32,16,0,1259,1260,5,53,0,0,1260,255,1,0,0,0,1261,1262,5,2,
        0,0,1262,1263,5,52,0,0,1263,1269,3,32,16,0,1264,1265,5,62,0,0,1265,
        1266,3,32,16,0,1266,1267,5,62,0,0,1267,1268,3,32,16,0,1268,1270,
        1,0,0,0,1269,1264,1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,
        1272,5,53,0,0,1272,257,1,0,0,0,1273,1274,3,222,111,0,1274,1275,5,
        63,0,0,1275,1277,1,0,0,0,1276,1273,1,0,0,0,1277,1280,1,0,0,0,1278,
        1276,1,0,0,0,1278,1279,1,0,0,0,1279,1282,1,0,0,0,1280,1278,1,0,0,
        0,1281,1283,3,222,111,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,
        259,1,0,0,0,1284,1285,5,102,0,0,1285,1287,5,63,0,0,1286,1284,1,0,
        0,0,1287,1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,1292,
        1,0,0,0,1290,1288,1,0,0,0,1291,1293,5,102,0,0,1292,1291,1,0,0,0,
        1292,1293,1,0,0,0,1293,261,1,0,0,0,1294,1295,3,264,132,0,1295,263,
        1,0,0,0,1296,1298,3,70,35,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,
        1298,1302,1,0,0,0,1299,1301,3,266,133,0,1300,1299,1,0,0,0,1301,1304,
        1,0,0,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,265,1,0,0,0,1304,
        1302,1,0,0,0,1305,1315,3,282,141,0,1306,1315,3,284,142,0,1307,1309,
        5,105,0,0,1308,1307,1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,0,
        1310,1312,5,37,0,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,
        1,0,0,0,1313,1315,3,58,29,0,1314,1305,1,0,0,0,1314,1306,1,0,0,0,
        1314,1308,1,0,0,0,1315,267,1,0,0,0,1316,1318,3,272,136,0,1317,1316,
        1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1322,3,80,40,0,
        1320,1323,5,86,0,0,1321,1323,3,190,95,0,1322,1320,1,0,0,0,1322,1321,
        1,0,0,0,1323,269,1,0,0,0,1324,1326,3,274,137,0,1325,1324,1,0,0,0,
        1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,1329,5,44,0,0,1328,1327,
        1,0,0,0,1328,1329,1,0,0,0,1329,1330,1,0,0,0,1330,1331,3,278,139,
        0,1331,271,1,0,0,0,1332,1340,5,21,0,0,1333,1335,5,22,0,0,1334,1336,
        5,102,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1340,1,0,0,0,
        1337,1340,5,26,0,0,1338,1340,5,30,0,0,1339,1332,1,0,0,0,1339,1333,
        1,0,0,0,1339,1337,1,0,0,0,1339,1338,1,0,0,0,1340,273,1,0,0,0,1341,
        1347,5,21,0,0,1342,1344,5,22,0,0,1343,1345,5,102,0,0,1344,1343,1,
        0,0,0,1344,1345,1,0,0,0,1345,1347,1,0,0,0,1346,1341,1,0,0,0,1346,
        1342,1,0,0,0,1347,275,1,0,0,0,1348,1349,5,98,0,0,1349,277,1,0,0,
        0,1350,1351,7,7,0,0,1351,1354,3,276,138,0,1352,1353,5,62,0,0,1353,
        1355,3,92,46,0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,
        0,0,1356,1359,3,280,140,0,1357,1358,5,69,0,0,1358,1360,3,32,16,0,
        1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1362,
        5,86,0,0,1362,279,1,0,0,0,1363,1365,3,254,127,0,1364,1363,1,0,0,
        0,1364,1365,1,0,0,0,1365,1367,1,0,0,0,1366,1368,3,210,105,0,1367,
        1366,1,0,0,0,1367,1368,1,0,0,0,1368,1370,1,0,0,0,1369,1371,3,208,
        104,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,281,1,0,0,0,1372,
        1374,5,43,0,0,1373,1375,7,8,0,0,1374,1373,1,0,0,0,1374,1375,1,0,
        0,0,1375,1376,1,0,0,0,1376,1377,3,190,95,0,1377,283,1,0,0,0,1378,
        1379,5,13,0,0,1379,1380,3,190,95,0,1380,285,1,0,0,0,180,289,295,
        307,312,316,321,328,344,362,366,373,377,384,393,396,400,404,413,
        420,429,437,446,455,463,472,483,491,495,506,514,519,526,534,541,
        550,553,556,558,565,571,574,579,584,587,596,600,607,612,615,618,
        621,628,632,635,638,642,646,652,657,665,673,677,687,691,697,701,
        706,711,716,721,733,749,752,756,759,767,773,776,788,794,800,804,
        808,812,818,821,828,831,833,839,842,848,851,858,883,887,890,898,
        901,904,908,911,915,918,922,928,935,937,943,949,961,968,970,976,
        979,985,988,995,998,1004,1007,1015,1027,1077,1084,1089,1095,1100,
        1105,1109,1114,1119,1128,1132,1135,1140,1147,1151,1156,1158,1166,
        1171,1173,1182,1189,1193,1199,1206,1215,1224,1227,1234,1242,1244,
        1246,1254,1269,1278,1282,1288,1292,1297,1302,1308,1311,1314,1317,
        1322,1325,1328,1335,1339,1344,1346,1354,1359,1364,1367,1370,1374
    ]

class ZigParser ( Parser ):

    grammarFileName = "ZigParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'addrspace'", "'align'", "'allowzero'", 
                     "'and'", "'anyframe'", "'anytype'", "'asm'", "'async'", 
                     "'await'", "'break'", "'callconv'", "'catch'", "'comptime'", 
                     "'const'", "'continue'", "'defer'", "'else'", "'enum'", 
                     "'errdefer'", "'error'", "'export'", "'extern'", "'fn'", 
                     "'for'", "'if'", "'inline'", "'c'", "'linksection'", 
                     "'noalias'", "'noinline'", "'noreturn'", "'nosuspend'", 
                     "'opaque'", "'or'", "'orelse'", "'packed'", "'pub'", 
                     "'resume'", "'return'", "'struct'", "'suspend'", "'switch'", 
                     "'test'", "'threadlocal'", "'try'", "'union'", "'unreachable'", 
                     "'usingnamespace'", "'var'", "'volatile'", "'while'", 
                     "'('", "')'", "'{'", "'}'", "'['", "']'", "'&'", "'@'", 
                     "'!'", "'^'", "':'", "','", "'.'", "'..'", "'.?'", 
                     "'.*'", "'...'", "'='", "'=='", "'=>'", "'\\'", "'--'", 
                     "'-'", "'->'", "'-%'", "'-|'", "'%'", "'||'", "'|'", 
                     "'++'", "'+'", "'+%'", "'+|'", "'?'", "';'", "'/'", 
                     "'**'", "'*%'", "'*|'", "'*'", "'~'" ]

    symbolicNames = [ "<INVALID>", "AddrSpace", "Align", "AllowZero", "And", 
                      "AnyFrame", "AnyType", "Asm", "Async", "Await", "Break", 
                      "CallConv", "Catch", "CompTime", "Const", "Continue", 
                      "Defer", "Else", "Enum", "ErrDefer", "Error", "Export", 
                      "Extern", "Fn", "For", "If", "Inline", "LetterC", 
                      "LinkSection", "NoAlias", "NoInline", "NoReturn", 
                      "NoSuspend", "Opaque", "Or", "OrElse", "Packed", "Pub", 
                      "Resume", "Return", "Struct", "Suspend", "Switch", 
                      "Test", "ThreadLocal", "Try", "Union", "Unreachable", 
                      "UsingNamespace", "Var", "Volatile", "While", "LPar", 
                      "RPar", "LBrace", "RBrace", "LBrack", "RBrack", "Amp", 
                      "At", "Bang", "Caret", "Colon", "Comma", "Dot", "Dot2", 
                      "DotQue", "DotStar", "Ellipsis", "Equal", "Equal2", 
                      "EqualArrow", "Esc", "Minus2", "Minus", "MinusArrow", 
                      "MinusPct", "MinusPipe", "Pct", "Pipe2", "Pipe", "Plus2", 
                      "Plus", "PlusPct", "PlusPipe", "Quest", "Semi", "Sol", 
                      "Star2", "StarPct", "StarPipe", "Star", "Tilde", "AssignOp", 
                      "CompareOp", "BitwiseOp", "BitShiftOp", "BuiltinIdent", 
                      "Ident", "Integer", "Float", "Char", "SingleString", 
                      "LineString", "ContainerDocComment", "DocComment", 
                      "Ws" ]

    RULE_start = 0
    RULE_primaryTypeExpression = 1
    RULE_primaryExpression = 2
    RULE_asmExpression = 3
    RULE_asmOutput = 4
    RULE_asmOutputItem = 5
    RULE_asmInput = 6
    RULE_asmInputItem = 7
    RULE_asmClobbers = 8
    RULE_asmOutputList = 9
    RULE_asmInputList = 10
    RULE_suffixExpression = 11
    RULE_designatorExpression = 12
    RULE_fnCallArguments = 13
    RULE_argumentExpressionList = 14
    RULE_compoundLiteral = 15
    RULE_expression = 16
    RULE_boolOrExpression = 17
    RULE_boolAndExpression = 18
    RULE_compareExpression = 19
    RULE_bitwiseExpression = 20
    RULE_bitShiftExpression = 21
    RULE_additionExpression = 22
    RULE_additionOp = 23
    RULE_multiplyExpression = 24
    RULE_multiplyOp = 25
    RULE_prefixExpression = 26
    RULE_prefixOp = 27
    RULE_constantExpression = 28
    RULE_declaration = 29
    RULE_typeName = 30
    RULE_containerDeclaration = 31
    RULE_containerDeclarationAuto = 32
    RULE_containerDeclarationType = 33
    RULE_structOrUnionSpecifier = 34
    RULE_fieldList = 35
    RULE_field = 36
    RULE_fieldDeclarationSpecifiers = 37
    RULE_fieldName = 38
    RULE_enumSpecifier = 39
    RULE_fnProtoDeclaration = 40
    RULE_fnProtoDeclarationSpecifiers = 41
    RULE_parameterDeclarationList = 42
    RULE_parameterDeclaration = 43
    RULE_parameterDeclarationSpecifier = 44
    RULE_parameterType = 45
    RULE_typeExpression = 46
    RULE_errorUnionExpression = 47
    RULE_initList = 48
    RULE_statement = 49
    RULE_primaryBlockStatement = 50
    RULE_primaryBlockExpression = 51
    RULE_primaryTypeStatement = 52
    RULE_primaryTypeDeclaration = 53
    RULE_errorSetDeclaration = 54
    RULE_identList = 55
    RULE_compoundStatement = 56
    RULE_compoundExpression = 57
    RULE_compoundTypeExpression = 58
    RULE_builtinCallExpression = 59
    RULE_expressionStatement = 60
    RULE_selectionStatement = 61
    RULE_selectionExpression = 62
    RULE_selectionTypeExpression = 63
    RULE_ifStatement = 64
    RULE_ifExpression = 65
    RULE_ifTypeExpression = 66
    RULE_ifPrefix = 67
    RULE_condExpression = 68
    RULE_thenExpression = 69
    RULE_elseExpression = 70
    RULE_elseStatement = 71
    RULE_switchExpression = 72
    RULE_iterationStatement = 73
    RULE_iterationExpression = 74
    RULE_iterationTypeExpression = 75
    RULE_labeledStatement = 76
    RULE_labeledExpression = 77
    RULE_labeledTypeExpression = 78
    RULE_loopStatement = 79
    RULE_loopExpression = 80
    RULE_loopTypeExpression = 81
    RULE_forStatement = 82
    RULE_forExpression = 83
    RULE_forTypeExpression = 84
    RULE_forPrefix = 85
    RULE_whileStatement = 86
    RULE_whileExpression = 87
    RULE_whileTypeExpression = 88
    RULE_whilePrefix = 89
    RULE_blockExpressionStatement = 90
    RULE_blockExpression = 91
    RULE_assignExpression = 92
    RULE_breakLabel = 93
    RULE_blockLabel = 94
    RULE_block = 95
    RULE_integerLiteral = 96
    RULE_floatingLiteral = 97
    RULE_charLiteral = 98
    RULE_singleStringLiteral = 99
    RULE_lineStringLiteral = 100
    RULE_groupedExpression = 101
    RULE_fieldInit = 102
    RULE_whileContinueExpression = 103
    RULE_linkSection = 104
    RULE_addrSpace = 105
    RULE_callConv = 106
    RULE_payload = 107
    RULE_ptrPayload = 108
    RULE_ptrIndexPayload = 109
    RULE_ptrListPayload = 110
    RULE_switchProng = 111
    RULE_switchCase = 112
    RULE_switchItem = 113
    RULE_forArgumentsList = 114
    RULE_forItem = 115
    RULE_assignOpExpression = 116
    RULE_compareOpExpression = 117
    RULE_bitwiseOpExpression = 118
    RULE_bitwiseKwExpression = 119
    RULE_prefixTypeOp = 120
    RULE_arrayTypeStart = 121
    RULE_sliceTypeStart = 122
    RULE_sliceTypeRest = 123
    RULE_ptrTypeStart = 124
    RULE_ptrTypeRest = 125
    RULE_suffixOp = 126
    RULE_byteAlign = 127
    RULE_byteAlign3 = 128
    RULE_switchProngList = 129
    RULE_stringList = 130
    RULE_containerUnit = 131
    RULE_containerMembers = 132
    RULE_containerDeclarationList = 133
    RULE_fnProtoDeclTop = 134
    RULE_varDeclarationTop = 135
    RULE_fnProtoDeclarationEx = 136
    RULE_varDeclarationEx = 137
    RULE_varName = 138
    RULE_varDeclaration = 139
    RULE_varDeclarationSpecifiers = 140
    RULE_testDeclaration = 141
    RULE_compTimeDeclaration = 142

    ruleNames =  [ "start", "primaryTypeExpression", "primaryExpression", 
                   "asmExpression", "asmOutput", "asmOutputItem", "asmInput", 
                   "asmInputItem", "asmClobbers", "asmOutputList", "asmInputList", 
                   "suffixExpression", "designatorExpression", "fnCallArguments", 
                   "argumentExpressionList", "compoundLiteral", "expression", 
                   "boolOrExpression", "boolAndExpression", "compareExpression", 
                   "bitwiseExpression", "bitShiftExpression", "additionExpression", 
                   "additionOp", "multiplyExpression", "multiplyOp", "prefixExpression", 
                   "prefixOp", "constantExpression", "declaration", "typeName", 
                   "containerDeclaration", "containerDeclarationAuto", "containerDeclarationType", 
                   "structOrUnionSpecifier", "fieldList", "field", "fieldDeclarationSpecifiers", 
                   "fieldName", "enumSpecifier", "fnProtoDeclaration", "fnProtoDeclarationSpecifiers", 
                   "parameterDeclarationList", "parameterDeclaration", "parameterDeclarationSpecifier", 
                   "parameterType", "typeExpression", "errorUnionExpression", 
                   "initList", "statement", "primaryBlockStatement", "primaryBlockExpression", 
                   "primaryTypeStatement", "primaryTypeDeclaration", "errorSetDeclaration", 
                   "identList", "compoundStatement", "compoundExpression", 
                   "compoundTypeExpression", "builtinCallExpression", "expressionStatement", 
                   "selectionStatement", "selectionExpression", "selectionTypeExpression", 
                   "ifStatement", "ifExpression", "ifTypeExpression", "ifPrefix", 
                   "condExpression", "thenExpression", "elseExpression", 
                   "elseStatement", "switchExpression", "iterationStatement", 
                   "iterationExpression", "iterationTypeExpression", "labeledStatement", 
                   "labeledExpression", "labeledTypeExpression", "loopStatement", 
                   "loopExpression", "loopTypeExpression", "forStatement", 
                   "forExpression", "forTypeExpression", "forPrefix", "whileStatement", 
                   "whileExpression", "whileTypeExpression", "whilePrefix", 
                   "blockExpressionStatement", "blockExpression", "assignExpression", 
                   "breakLabel", "blockLabel", "block", "integerLiteral", 
                   "floatingLiteral", "charLiteral", "singleStringLiteral", 
                   "lineStringLiteral", "groupedExpression", "fieldInit", 
                   "whileContinueExpression", "linkSection", "addrSpace", 
                   "callConv", "payload", "ptrPayload", "ptrIndexPayload", 
                   "ptrListPayload", "switchProng", "switchCase", "switchItem", 
                   "forArgumentsList", "forItem", "assignOpExpression", 
                   "compareOpExpression", "bitwiseOpExpression", "bitwiseKwExpression", 
                   "prefixTypeOp", "arrayTypeStart", "sliceTypeStart", "sliceTypeRest", 
                   "ptrTypeStart", "ptrTypeRest", "suffixOp", "byteAlign", 
                   "byteAlign3", "switchProngList", "stringList", "containerUnit", 
                   "containerMembers", "containerDeclarationList", "fnProtoDeclTop", 
                   "varDeclarationTop", "fnProtoDeclarationEx", "varDeclarationEx", 
                   "varName", "varDeclaration", "varDeclarationSpecifiers", 
                   "testDeclaration", "compTimeDeclaration" ]

    EOF = Token.EOF
    AddrSpace=1
    Align=2
    AllowZero=3
    And=4
    AnyFrame=5
    AnyType=6
    Asm=7
    Async=8
    Await=9
    Break=10
    CallConv=11
    Catch=12
    CompTime=13
    Const=14
    Continue=15
    Defer=16
    Else=17
    Enum=18
    ErrDefer=19
    Error=20
    Export=21
    Extern=22
    Fn=23
    For=24
    If=25
    Inline=26
    LetterC=27
    LinkSection=28
    NoAlias=29
    NoInline=30
    NoReturn=31
    NoSuspend=32
    Opaque=33
    Or=34
    OrElse=35
    Packed=36
    Pub=37
    Resume=38
    Return=39
    Struct=40
    Suspend=41
    Switch=42
    Test=43
    ThreadLocal=44
    Try=45
    Union=46
    Unreachable=47
    UsingNamespace=48
    Var=49
    Volatile=50
    While=51
    LPar=52
    RPar=53
    LBrace=54
    RBrace=55
    LBrack=56
    RBrack=57
    Amp=58
    At=59
    Bang=60
    Caret=61
    Colon=62
    Comma=63
    Dot=64
    Dot2=65
    DotQue=66
    DotStar=67
    Ellipsis=68
    Equal=69
    Equal2=70
    EqualArrow=71
    Esc=72
    Minus2=73
    Minus=74
    MinusArrow=75
    MinusPct=76
    MinusPipe=77
    Pct=78
    Pipe2=79
    Pipe=80
    Plus2=81
    Plus=82
    PlusPct=83
    PlusPipe=84
    Quest=85
    Semi=86
    Sol=87
    Star2=88
    StarPct=89
    StarPipe=90
    Star=91
    Tilde=92
    AssignOp=93
    CompareOp=94
    BitwiseOp=95
    BitShiftOp=96
    BuiltinIdent=97
    Ident=98
    Integer=99
    Float=100
    Char=101
    SingleString=102
    LineString=103
    ContainerDocComment=104
    DocComment=105
    Ws=106

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerUnit(self):
            return self.getTypedRuleContext(ZigParser.ContainerUnitContext,0)


        def Ws(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ws)
            else:
                return self.getToken(ZigParser.Ws, i)

        def ContainerDocComment(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.ContainerDocComment)
            else:
                return self.getToken(ZigParser.ContainerDocComment, i)

        def getRuleIndex(self):
            return ZigParser.RULE_start

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart" ):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)




    def start(self):

        localctx = ZigParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106:
                self.state = 286
                self.match(ZigParser.Ws)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==104:
                self.state = 292
                self.match(ZigParser.ContainerDocComment)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.containerUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnyFrame(self):
            return self.getToken(ZigParser.AnyFrame, 0)

        def Unreachable(self):
            return self.getToken(ZigParser.Unreachable, 0)

        def typeName(self):
            return self.getTypedRuleContext(ZigParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ZigParser.ConstantExpressionContext,0)


        def groupedExpression(self):
            return self.getTypedRuleContext(ZigParser.GroupedExpressionContext,0)


        def primaryTypeStatement(self):
            return self.getTypedRuleContext(ZigParser.PrimaryTypeStatementContext,0)


        def primaryTypeDeclaration(self):
            return self.getTypedRuleContext(ZigParser.PrimaryTypeDeclarationContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryTypeExpression" ):
                return visitor.visitPrimaryTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryTypeExpression(self):

        localctx = ZigParser.PrimaryTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryTypeExpression)
        try:
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.match(ZigParser.AnyFrame)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.match(ZigParser.Unreachable)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.typeName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.constantExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 304
                self.groupedExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 305
                self.primaryTypeStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 306
                self.primaryTypeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asmExpression(self):
            return self.getTypedRuleContext(ZigParser.AsmExpressionContext,0)


        def primaryBlockExpression(self):
            return self.getTypedRuleContext(ZigParser.PrimaryBlockExpressionContext,0)


        def compoundLiteral(self):
            return self.getTypedRuleContext(ZigParser.CompoundLiteralContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = ZigParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_primaryExpression)
        try:
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.asmExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 310
                self.primaryBlockExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 311
                self.compoundLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(ZigParser.Asm, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def asmOutput(self):
            return self.getTypedRuleContext(ZigParser.AsmOutputContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmExpression" ):
                return visitor.visitAsmExpression(self)
            else:
                return visitor.visitChildren(self)




    def asmExpression(self):

        localctx = ZigParser.AsmExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_asmExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(ZigParser.Asm)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 315
                self.match(ZigParser.Volatile)


            self.state = 318
            self.match(ZigParser.LPar)
            self.state = 319
            self.expression()
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 320
                self.asmOutput()


            self.state = 323
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmOutputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def asmOutputList(self):
            return self.getTypedRuleContext(ZigParser.AsmOutputListContext,0)


        def asmInput(self):
            return self.getTypedRuleContext(ZigParser.AsmInputContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmOutput

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmOutput" ):
                return visitor.visitAsmOutput(self)
            else:
                return visitor.visitChildren(self)




    def asmOutput(self):

        localctx = ZigParser.AsmOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_asmOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(ZigParser.Colon)
            self.state = 326
            self.asmOutputList()
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 327
                self.asmInput()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmOutputItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def MinusArrow(self):
            return self.getToken(ZigParser.MinusArrow, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmOutputItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmOutputItem" ):
                return visitor.visitAsmOutputItem(self)
            else:
                return visitor.visitChildren(self)




    def asmOutputItem(self):

        localctx = ZigParser.AsmOutputItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_asmOutputItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(ZigParser.LBrack)
            self.state = 331
            self.match(ZigParser.Ident)
            self.state = 332
            self.match(ZigParser.RBrack)
            self.state = 333
            self.match(ZigParser.SingleString)
            self.state = 334
            self.match(ZigParser.LPar)

            self.state = 335
            self.match(ZigParser.MinusArrow)
            self.state = 336
            self.typeExpression()
            self.state = 337
            self.match(ZigParser.Ident)
            self.state = 339
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmInputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def asmInputList(self):
            return self.getTypedRuleContext(ZigParser.AsmInputListContext,0)


        def asmClobbers(self):
            return self.getTypedRuleContext(ZigParser.AsmClobbersContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmInput

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmInput" ):
                return visitor.visitAsmInput(self)
            else:
                return visitor.visitChildren(self)




    def asmInput(self):

        localctx = ZigParser.AsmInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_asmInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(ZigParser.Colon)
            self.state = 342
            self.asmInputList()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 343
                self.asmClobbers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmInputItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_asmInputItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmInputItem" ):
                return visitor.visitAsmInputItem(self)
            else:
                return visitor.visitChildren(self)




    def asmInputItem(self):

        localctx = ZigParser.AsmInputItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_asmInputItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(ZigParser.LBrack)
            self.state = 347
            self.match(ZigParser.Ident)
            self.state = 348
            self.match(ZigParser.RBrack)
            self.state = 349
            self.match(ZigParser.SingleString)
            self.state = 350
            self.match(ZigParser.LPar)
            self.state = 351
            self.expression()
            self.state = 352
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmClobbersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def stringList(self):
            return self.getTypedRuleContext(ZigParser.StringListContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmClobbers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmClobbers" ):
                return visitor.visitAsmClobbers(self)
            else:
                return visitor.visitChildren(self)




    def asmClobbers(self):

        localctx = ZigParser.AsmClobbersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_asmClobbers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(ZigParser.Colon)
            self.state = 355
            self.stringList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmOutputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asmOutputItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AsmOutputItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.AsmOutputItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_asmOutputList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmOutputList" ):
                return visitor.visitAsmOutputList(self)
            else:
                return visitor.visitChildren(self)




    def asmOutputList(self):

        localctx = ZigParser.AsmOutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_asmOutputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 357
                    self.asmOutputItem()
                    self.state = 358
                    self.match(ZigParser.Comma) 
                self.state = 364
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 365
                self.asmOutputItem()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmInputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asmInputItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AsmInputItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.AsmInputItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_asmInputList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmInputList" ):
                return visitor.visitAsmInputList(self)
            else:
                return visitor.visitChildren(self)




    def asmInputList(self):

        localctx = ZigParser.AsmInputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_asmInputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 368
                    self.asmInputItem()
                    self.state = 369
                    self.match(ZigParser.Comma) 
                self.state = 375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 376
                self.asmInputItem()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Async(self):
            return self.getToken(ZigParser.Async, 0)

        def primaryTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.PrimaryTypeExpressionContext,0)


        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def suffixOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SuffixOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.SuffixOpContext,i)


        def designatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.DesignatorExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.DesignatorExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_suffixExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixExpression" ):
                return visitor.visitSuffixExpression(self)
            else:
                return visitor.visitChildren(self)




    def suffixExpression(self):

        localctx = ZigParser.SuffixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_suffixExpression)
        self._la = 0 # Token type
        try:
            self.state = 396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 379
                self.match(ZigParser.Async)
                self.state = 380
                self.primaryTypeExpression()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & 3329) != 0):
                    self.state = 381
                    self.suffixOp()
                    self.state = 386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 387
                self.fnCallArguments()
                pass
            elif token in [5, 13, 18, 20, 22, 23, 24, 25, 26, 33, 36, 40, 42, 46, 47, 51, 52, 64, 97, 98, 99, 100, 101, 102, 103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 389
                self.primaryTypeExpression()
                self.state = 393
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 390
                        self.designatorExpression() 
                    self.state = 395
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suffixOp(self):
            return self.getTypedRuleContext(ZigParser.SuffixOpContext,0)


        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_designatorExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorExpression" ):
                return visitor.visitDesignatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def designatorExpression(self):

        localctx = ZigParser.DesignatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_designatorExpression)
        try:
            self.state = 400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56, 64, 66, 67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 398
                self.suffixOp()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 399
                self.fnCallArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ZigParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fnCallArguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnCallArguments" ):
                return visitor.visitFnCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def fnCallArguments(self):

        localctx = ZigParser.FnCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fnCallArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(ZigParser.LPar)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1538231967279261600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1091343225857) != 0):
                self.state = 403
                self.argumentExpressionList()


            self.state = 406
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_argumentExpressionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpressionList" ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpressionList(self):

        localctx = ZigParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_argumentExpressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 408
                    self.expression()
                    self.state = 409
                    self.match(ZigParser.Comma) 
                self.state = 415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 416
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def initList(self):
            return self.getTypedRuleContext(ZigParser.InitListContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundLiteral" ):
                return visitor.visitCompoundLiteral(self)
            else:
                return visitor.visitChildren(self)




    def compoundLiteral(self):

        localctx = ZigParser.CompoundLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_compoundLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.typeExpression()
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 419
                self.initList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolOrExpression(self):
            return self.getTypedRuleContext(ZigParser.BoolOrExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = ZigParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.boolOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BoolAndExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BoolAndExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Or)
            else:
                return self.getToken(ZigParser.Or, i)

        def getRuleIndex(self):
            return ZigParser.RULE_boolOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolOrExpression" ):
                return visitor.visitBoolOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def boolOrExpression(self):

        localctx = ZigParser.BoolOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_boolOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.boolAndExpression()
            self.state = 429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 425
                    self.match(ZigParser.Or)
                    self.state = 426
                    self.boolAndExpression() 
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compareExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.CompareExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.CompareExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.And)
            else:
                return self.getToken(ZigParser.And, i)

        def getRuleIndex(self):
            return ZigParser.RULE_boolAndExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolAndExpression" ):
                return visitor.visitBoolAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def boolAndExpression(self):

        localctx = ZigParser.BoolAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_boolAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.compareExpression()
            self.state = 437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 433
                    self.match(ZigParser.And)
                    self.state = 434
                    self.compareExpression() 
                self.state = 439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitwiseExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitwiseExpressionContext,i)


        def compareOpExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.CompareOpExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.CompareOpExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_compareExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareExpression" ):
                return visitor.visitCompareExpression(self)
            else:
                return visitor.visitChildren(self)




    def compareExpression(self):

        localctx = ZigParser.CompareExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_compareExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.bitwiseExpression()
            self.state = 446
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 441
                    self.compareOpExpression()
                    self.state = 442
                    self.bitwiseExpression() 
                self.state = 448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitShiftExpressionContext,i)


        def bitwiseOpExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitwiseOpExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitwiseOpExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseExpression" ):
                return visitor.visitBitwiseExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseExpression(self):

        localctx = ZigParser.BitwiseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bitwiseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.bitShiftExpression()
            self.state = 455
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 450
                    self.bitwiseOpExpression()
                    self.state = 451
                    self.bitShiftExpression() 
                self.state = 457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additionExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AdditionExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.AdditionExpressionContext,i)


        def BitShiftOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.BitShiftOp)
            else:
                return self.getToken(ZigParser.BitShiftOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_bitShiftExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpression" ):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitShiftExpression(self):

        localctx = ZigParser.BitShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_bitShiftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.additionExpression()
            self.state = 463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 459
                    self.match(ZigParser.BitShiftOp)
                    self.state = 460
                    self.additionExpression() 
                self.state = 465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.MultiplyExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.MultiplyExpressionContext,i)


        def additionOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AdditionOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.AdditionOpContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_additionExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditionExpression" ):
                return visitor.visitAdditionExpression(self)
            else:
                return visitor.visitChildren(self)




    def additionExpression(self):

        localctx = ZigParser.AdditionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_additionExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.multiplyExpression()
            self.state = 472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 467
                    self.additionOp()
                    self.state = 468
                    self.multiplyExpression() 
                self.state = 474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus2(self):
            return self.getToken(ZigParser.Plus2, 0)

        def Minus2(self):
            return self.getToken(ZigParser.Minus2, 0)

        def Plus(self):
            return self.getToken(ZigParser.Plus, 0)

        def PlusPct(self):
            return self.getToken(ZigParser.PlusPct, 0)

        def PlusPipe(self):
            return self.getToken(ZigParser.PlusPipe, 0)

        def Minus(self):
            return self.getToken(ZigParser.Minus, 0)

        def MinusPct(self):
            return self.getToken(ZigParser.MinusPct, 0)

        def MinusPipe(self):
            return self.getToken(ZigParser.MinusPipe, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_additionOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditionOp" ):
                return visitor.visitAdditionOp(self)
            else:
                return visitor.visitChildren(self)




    def additionOp(self):

        localctx = ZigParser.AdditionOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_additionOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 3867) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PrefixExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.PrefixExpressionContext,i)


        def multiplyOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.MultiplyOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.MultiplyOpContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_multiplyExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyExpression" ):
                return visitor.visitMultiplyExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplyExpression(self):

        localctx = ZigParser.MultiplyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_multiplyExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.prefixExpression()
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 478
                    self.multiplyOp()
                    self.state = 479
                    self.prefixExpression() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe2(self):
            return self.getToken(ZigParser.Pipe2, 0)

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def Sol(self):
            return self.getToken(ZigParser.Sol, 0)

        def Pct(self):
            return self.getToken(ZigParser.Pct, 0)

        def Star2(self):
            return self.getToken(ZigParser.Star2, 0)

        def StarPct(self):
            return self.getToken(ZigParser.StarPct, 0)

        def StarPipe(self):
            return self.getToken(ZigParser.StarPipe, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_multiplyOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyOp" ):
                return visitor.visitMultiplyOp(self)
            else:
                return visitor.visitChildren(self)




    def multiplyOp(self):

        localctx = ZigParser.MultiplyOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_multiplyOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15875) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ZigParser.PrimaryExpressionContext,0)


        def Bang(self):
            return self.getToken(ZigParser.Bang, 0)

        def prefixOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PrefixOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.PrefixOpContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_prefixExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)




    def prefixExpression(self):

        localctx = ZigParser.PrefixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_prefixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 8, 9, 10, 13, 15, 18, 20, 22, 23, 24, 25, 26, 32, 33, 36, 38, 39, 40, 42, 45, 46, 47, 51, 52, 54, 56, 58, 64, 74, 76, 85, 88, 91, 92, 97, 98, 99, 100, 101, 102, 103]:
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 288265560523801088) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 262149) != 0):
                    self.state = 488
                    self.prefixOp()
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [60]:
                self.state = 494
                self.match(ZigParser.Bang)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 497
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Tilde(self):
            return self.getToken(ZigParser.Tilde, 0)

        def Minus(self):
            return self.getToken(ZigParser.Minus, 0)

        def MinusPct(self):
            return self.getToken(ZigParser.MinusPct, 0)

        def Amp(self):
            return self.getToken(ZigParser.Amp, 0)

        def Try(self):
            return self.getToken(ZigParser.Try, 0)

        def Await(self):
            return self.getToken(ZigParser.Await, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_prefixOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixOp" ):
                return visitor.visitPrefixOp(self)
            else:
                return visitor.visitChildren(self)




    def prefixOp(self):

        localctx = ZigParser.PrefixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_prefixOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288265560523801088) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 262149) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(ZigParser.IntegerLiteralContext,0)


        def floatingLiteral(self):
            return self.getTypedRuleContext(ZigParser.FloatingLiteralContext,0)


        def charLiteral(self):
            return self.getTypedRuleContext(ZigParser.CharLiteralContext,0)


        def singleStringLiteral(self):
            return self.getTypedRuleContext(ZigParser.SingleStringLiteralContext,0)


        def lineStringLiteral(self):
            return self.getTypedRuleContext(ZigParser.LineStringLiteralContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_constantExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = ZigParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_constantExpression)
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.integerLiteral()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.floatingLiteral()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.charLiteral()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 504
                self.singleStringLiteral()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.lineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fnProtoDeclTop(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclTopContext,0)


        def varDeclarationTop(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationTopContext,0)


        def UsingNamespace(self):
            return self.getToken(ZigParser.UsingNamespace, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = ZigParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declaration)
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.fnProtoDeclTop()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.varDeclarationTop()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.match(ZigParser.UsingNamespace)
                self.state = 511
                self.expression()
                self.state = 512
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_typeName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = ZigParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerDeclarationAuto(self):
            return self.getTypedRuleContext(ZigParser.ContainerDeclarationAutoContext,0)


        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def Packed(self):
            return self.getToken(ZigParser.Packed, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclaration" ):
                return visitor.visitContainerDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclaration(self):

        localctx = ZigParser.ContainerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_containerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==36:
                self.state = 518
                _la = self._input.LA(1)
                if not(_la==22 or _la==36):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 521
            self.containerDeclarationAuto()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationAutoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerDeclarationType(self):
            return self.getTypedRuleContext(ZigParser.ContainerDeclarationTypeContext,0)


        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def containerMembers(self):
            return self.getTypedRuleContext(ZigParser.ContainerMembersContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclarationAuto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclarationAuto" ):
                return visitor.visitContainerDeclarationAuto(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclarationAuto(self):

        localctx = ZigParser.ContainerDeclarationAutoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_containerDeclarationAuto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.containerDeclarationType()
            self.state = 524
            self.match(ZigParser.LBrace)
            self.state = 526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 525
                self.match(ZigParser.DocComment)


            self.state = 528
            self.containerMembers()
            self.state = 529
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ZigParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ZigParser.EnumSpecifierContext,0)


        def Opaque(self):
            return self.getToken(ZigParser.Opaque, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclarationType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclarationType" ):
                return visitor.visitContainerDeclarationType(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclarationType(self):

        localctx = ZigParser.ContainerDeclarationTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_containerDeclarationType)
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.structOrUnionSpecifier()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.enumSpecifier()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 533
                self.match(ZigParser.Opaque)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ZigParser.Struct, 0)

        def LPar(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.LPar)
            else:
                return self.getToken(ZigParser.LPar, i)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.RPar)
            else:
                return self.getToken(ZigParser.RPar, i)

        def Union(self):
            return self.getToken(ZigParser.Union, 0)

        def Enum(self):
            return self.getToken(ZigParser.Enum, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_structOrUnionSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnionSpecifier" ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = ZigParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.match(ZigParser.Struct)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 537
                    self.match(ZigParser.LPar)
                    self.state = 538
                    self.expression()
                    self.state = 539
                    self.match(ZigParser.RPar)


                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.match(ZigParser.Union)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 544
                    self.match(ZigParser.LPar)
                    self.state = 553
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                    if la_ == 1:
                        self.state = 545
                        self.match(ZigParser.Enum)
                        self.state = 550
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==52:
                            self.state = 546
                            self.match(ZigParser.LPar)
                            self.state = 547
                            self.expression()
                            self.state = 548
                            self.match(ZigParser.RPar)


                        pass

                    elif la_ == 2:
                        self.state = 552
                        self.expression()
                        pass


                    self.state = 555
                    self.match(ZigParser.RPar)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.FieldContext)
            else:
                return self.getTypedRuleContext(ZigParser.FieldContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_fieldList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldList" ):
                return visitor.visitFieldList(self)
            else:
                return visitor.visitChildren(self)




    def fieldList(self):

        localctx = ZigParser.FieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fieldList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 560
                    self.field()
                    self.state = 561
                    self.match(ZigParser.Comma) 
                self.state = 567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 568
            self.field()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ZigParser.FieldNameContext,0)


        def fieldDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ZigParser.FieldDeclarationSpecifiersContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_field

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField" ):
                return visitor.visitField(self)
            else:
                return visitor.visitChildren(self)




    def field(self):

        localctx = ZigParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 570
                self.match(ZigParser.DocComment)


            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 573
                self.match(ZigParser.CompTime)


            self.state = 576
            self.fieldName()
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 577
                self.match(ZigParser.Colon)
                self.state = 578
                self.typeExpression()


            self.state = 581
            self.fieldDeclarationSpecifiers()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 582
                self.match(ZigParser.Equal)
                self.state = 583
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fieldDeclarationSpecifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclarationSpecifiers" ):
                return visitor.visitFieldDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclarationSpecifiers(self):

        localctx = ZigParser.FieldDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fieldDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 586
                self.byteAlign()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fieldName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldName" ):
                return visitor.visitFieldName(self)
            else:
                return visitor.visitChildren(self)




    def fieldName(self):

        localctx = ZigParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ZigParser.Enum, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_enumSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumSpecifier" ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = ZigParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(ZigParser.Enum)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 592
                self.match(ZigParser.LPar)
                self.state = 593
                self.expression()
                self.state = 594
                self.match(ZigParser.RPar)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Fn(self):
            return self.getToken(ZigParser.Fn, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(ZigParser.ParameterDeclarationListContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def fnProtoDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationSpecifiersContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Bang(self):
            return self.getToken(ZigParser.Bang, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclaration" ):
                return visitor.visitFnProtoDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclaration(self):

        localctx = ZigParser.FnProtoDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fnProtoDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(ZigParser.Fn)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 599
                self.match(ZigParser.Ident)


            self.state = 602
            self.match(ZigParser.LPar)
            self.state = 603
            self.parameterDeclarationList()
            self.state = 604
            self.match(ZigParser.RPar)
            self.state = 605
            self.fnProtoDeclarationSpecifiers()
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 606
                self.match(ZigParser.Bang)


            self.state = 609
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def linkSection(self):
            return self.getTypedRuleContext(ZigParser.LinkSectionContext,0)


        def callConv(self):
            return self.getTypedRuleContext(ZigParser.CallConvContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclarationSpecifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclarationSpecifiers" ):
                return visitor.visitFnProtoDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclarationSpecifiers(self):

        localctx = ZigParser.FnProtoDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fnProtoDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 611
                self.byteAlign()


            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 614
                self.addrSpace()


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 617
                self.linkSection()


            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 620
                self.callConv()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ZigParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_parameterDeclarationList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclarationList" ):
                return visitor.visitParameterDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclarationList(self):

        localctx = ZigParser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_parameterDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 623
                    self.parameterDeclaration()
                    self.state = 624
                    self.match(ZigParser.Comma) 
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 79029675247280480) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3290098040849) != 0):
                self.state = 631
                self.parameterDeclaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterType(self):
            return self.getTypedRuleContext(ZigParser.ParameterTypeContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def parameterDeclarationSpecifier(self):
            return self.getTypedRuleContext(ZigParser.ParameterDeclarationSpecifierContext,0)


        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Ellipsis(self):
            return self.getToken(ZigParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_parameterDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = ZigParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 8, 13, 18, 20, 22, 23, 24, 25, 26, 29, 33, 36, 40, 42, 46, 47, 51, 52, 56, 64, 85, 88, 91, 97, 98, 99, 100, 101, 102, 103, 105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 634
                    self.match(ZigParser.DocComment)


                self.state = 638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 637
                    self.parameterDeclarationSpecifier()


                self.state = 642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 640
                    self.match(ZigParser.Ident)
                    self.state = 641
                    self.match(ZigParser.Colon)


                self.state = 644
                self.parameterType()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.match(ZigParser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NoAlias(self):
            return self.getToken(ZigParser.NoAlias, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_parameterDeclarationSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclarationSpecifier" ):
                return visitor.visitParameterDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclarationSpecifier(self):

        localctx = ZigParser.ParameterDeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_parameterDeclarationSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            _la = self._input.LA(1)
            if not(_la==13 or _la==29):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnyType(self):
            return self.getToken(ZigParser.AnyType, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_parameterType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterType" ):
                return visitor.visitParameterType(self)
            else:
                return visitor.visitChildren(self)




    def parameterType(self):

        localctx = ZigParser.ParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_parameterType)
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.match(ZigParser.AnyType)
                pass
            elif token in [5, 8, 13, 18, 20, 22, 23, 24, 25, 26, 33, 36, 40, 42, 46, 47, 51, 52, 56, 64, 85, 88, 91, 97, 98, 99, 100, 101, 102, 103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.typeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def errorUnionExpression(self):
            return self.getTypedRuleContext(ZigParser.ErrorUnionExpressionContext,0)


        def prefixTypeOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PrefixTypeOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.PrefixTypeOpContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_typeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeExpression(self):

        localctx = ZigParser.TypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 654
                    self.prefixTypeOp() 
                self.state = 659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 660
            self.errorUnionExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorUnionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suffixExpression(self):
            return self.getTypedRuleContext(ZigParser.SuffixExpressionContext,0)


        def Bang(self):
            return self.getToken(ZigParser.Bang, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_errorUnionExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorUnionExpression" ):
                return visitor.visitErrorUnionExpression(self)
            else:
                return visitor.visitChildren(self)




    def errorUnionExpression(self):

        localctx = ZigParser.ErrorUnionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_errorUnionExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.suffixExpression()
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 663
                self.match(ZigParser.Bang)
                self.state = 664
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def fieldInit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.FieldInitContext)
            else:
                return self.getTypedRuleContext(ZigParser.FieldInitContext,i)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_initList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitList" ):
                return visitor.visitInitList(self)
            else:
                return visitor.visitChildren(self)




    def initList(self):

        localctx = ZigParser.InitListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initList)
        self._la = 0 # Token type
        try:
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.match(ZigParser.LBrace)
                self.state = 668
                self.fieldInit()
                self.state = 673
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 669
                        self.match(ZigParser.Comma)
                        self.state = 670
                        self.fieldInit() 
                    self.state = 675
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 676
                    self.match(ZigParser.Comma)


                self.state = 679
                self.match(ZigParser.RBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.match(ZigParser.LBrace)
                self.state = 682
                self.expression()
                self.state = 687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 683
                        self.match(ZigParser.Comma)
                        self.state = 684
                        self.expression() 
                    self.state = 689
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 690
                    self.match(ZigParser.Comma)


                self.state = 693
                self.match(ZigParser.RBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 695
                self.match(ZigParser.LBrace)
                self.state = 696
                self.match(ZigParser.RBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(ZigParser.ExpressionStatementContext,0)


        def primaryBlockStatement(self):
            return self.getTypedRuleContext(ZigParser.PrimaryBlockStatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = ZigParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_statement)
        try:
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.primaryBlockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryBlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ZigParser.CompoundStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ZigParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ZigParser.IterationStatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryBlockStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryBlockStatement" ):
                return visitor.visitPrimaryBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def primaryBlockStatement(self):

        localctx = ZigParser.PrimaryBlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_primaryBlockStatement)
        try:
            self.state = 706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 16, 19, 32, 41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 703
                self.compoundStatement()
                pass
            elif token in [25, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.selectionStatement()
                pass
            elif token in [24, 26, 51, 54, 98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 705
                self.iterationStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryBlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundExpression(self):
            return self.getTypedRuleContext(ZigParser.CompoundExpressionContext,0)


        def selectionExpression(self):
            return self.getTypedRuleContext(ZigParser.SelectionExpressionContext,0)


        def iterationExpression(self):
            return self.getTypedRuleContext(ZigParser.IterationExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryBlockExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryBlockExpression" ):
                return visitor.visitPrimaryBlockExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryBlockExpression(self):

        localctx = ZigParser.PrimaryBlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_primaryBlockExpression)
        try:
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 13, 15, 32, 38, 39, 54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 708
                self.compoundExpression()
                pass
            elif token in [25, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 709
                self.selectionExpression()
                pass
            elif token in [24, 26, 51, 98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 710
                self.iterationExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryTypeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.CompoundTypeExpressionContext,0)


        def selectionTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.SelectionTypeExpressionContext,0)


        def iterationTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.IterationTypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryTypeStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryTypeStatement" ):
                return visitor.visitPrimaryTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def primaryTypeStatement(self):

        localctx = ZigParser.PrimaryTypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_primaryTypeStatement)
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 20, 64, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.compoundTypeExpression()
                pass
            elif token in [25, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.selectionTypeExpression()
                pass
            elif token in [24, 26, 51, 98]:
                self.enterOuterAlt(localctx, 3)
                self.state = 715
                self.iterationTypeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerDeclaration(self):
            return self.getTypedRuleContext(ZigParser.ContainerDeclarationContext,0)


        def errorSetDeclaration(self):
            return self.getTypedRuleContext(ZigParser.ErrorSetDeclarationContext,0)


        def fnProtoDeclaration(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryTypeDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryTypeDeclaration" ):
                return visitor.visitPrimaryTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def primaryTypeDeclaration(self):

        localctx = ZigParser.PrimaryTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_primaryTypeDeclaration)
        try:
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 22, 33, 36, 40, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.containerDeclaration()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.errorSetDeclaration()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 3)
                self.state = 720
                self.fnProtoDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorSetDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Error(self):
            return self.getToken(ZigParser.Error, 0)

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def identList(self):
            return self.getTypedRuleContext(ZigParser.IdentListContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_errorSetDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorSetDeclaration" ):
                return visitor.visitErrorSetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def errorSetDeclaration(self):

        localctx = ZigParser.ErrorSetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_errorSetDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(ZigParser.Error)
            self.state = 724
            self.match(ZigParser.LBrace)
            self.state = 725
            self.identList()
            self.state = 726
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DocComment(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.DocComment)
            else:
                return self.getToken(ZigParser.DocComment, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_identList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentList" ):
                return visitor.visitIdentList(self)
            else:
                return visitor.visitChildren(self)




    def identList(self):

        localctx = ZigParser.IdentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 728
                    self.match(ZigParser.DocComment)
                    self.state = 729
                    self.match(ZigParser.Ident)
                    self.state = 730
                    self.match(ZigParser.Comma) 
                self.state = 735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 736
            self.match(ZigParser.DocComment)
            self.state = 737
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def blockExpressionStatement(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionStatementContext,0)


        def NoSuspend(self):
            return self.getToken(ZigParser.NoSuspend, 0)

        def Suspend(self):
            return self.getToken(ZigParser.Suspend, 0)

        def Defer(self):
            return self.getToken(ZigParser.Defer, 0)

        def ErrDefer(self):
            return self.getToken(ZigParser.ErrDefer, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = ZigParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.match(ZigParser.CompTime)
                self.state = 740
                self.blockExpressionStatement()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.match(ZigParser.NoSuspend)
                self.state = 742
                self.blockExpressionStatement()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self.match(ZigParser.Suspend)
                self.state = 744
                self.blockExpressionStatement()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                self.match(ZigParser.Defer)
                self.state = 746
                self.blockExpressionStatement()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 747
                self.match(ZigParser.ErrDefer)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 748
                    self.payload()


                self.state = 751
                self.blockExpressionStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(ZigParser.Break, 0)

        def breakLabel(self):
            return self.getTypedRuleContext(ZigParser.BreakLabelContext,0)


        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def NoSuspend(self):
            return self.getToken(ZigParser.NoSuspend, 0)

        def Continue(self):
            return self.getToken(ZigParser.Continue, 0)

        def Resume(self):
            return self.getToken(ZigParser.Resume, 0)

        def Return(self):
            return self.getToken(ZigParser.Return, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundExpression" ):
                return visitor.visitCompoundExpression(self)
            else:
                return visitor.visitChildren(self)




    def compoundExpression(self):

        localctx = ZigParser.CompoundExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_compoundExpression)
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.match(ZigParser.Break)
                self.state = 756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 755
                    self.breakLabel()


                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.expression()


                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.match(ZigParser.CompTime)
                self.state = 762
                self.expression()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 763
                self.match(ZigParser.NoSuspend)
                self.state = 764
                self.expression()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 4)
                self.state = 765
                self.match(ZigParser.Continue)
                self.state = 767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 766
                    self.breakLabel()


                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 769
                self.match(ZigParser.Resume)
                self.state = 770
                self.expression()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 771
                self.match(ZigParser.Return)
                self.state = 773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 772
                    self.expression()


                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 7)
                self.state = 775
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtinCallExpression(self):
            return self.getTypedRuleContext(ZigParser.BuiltinCallExpressionContext,0)


        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def initList(self):
            return self.getTypedRuleContext(ZigParser.InitListContext,0)


        def Error(self):
            return self.getToken(ZigParser.Error, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundTypeExpression" ):
                return visitor.visitCompoundTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def compoundTypeExpression(self):

        localctx = ZigParser.CompoundTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_compoundTypeExpression)
        try:
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.builtinCallExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.match(ZigParser.Dot)
                self.state = 780
                self.match(ZigParser.Ident)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 781
                self.match(ZigParser.Dot)
                self.state = 782
                self.initList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.match(ZigParser.Error)
                self.state = 784
                self.match(ZigParser.Dot)
                self.state = 785
                self.match(ZigParser.Ident)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 786
                self.match(ZigParser.CompTime)
                self.state = 787
                self.typeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltinCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BuiltinIdent(self):
            return self.getToken(ZigParser.BuiltinIdent, 0)

        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_builtinCallExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltinCallExpression" ):
                return visitor.visitBuiltinCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def builtinCallExpression(self):

        localctx = ZigParser.BuiltinCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_builtinCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(ZigParser.BuiltinIdent)
            self.state = 791
            self.fnCallArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDeclaration(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationContext,0)


        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_expressionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = ZigParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 793
                    self.match(ZigParser.CompTime)


                self.state = 796
                self.varDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.assignExpression()
                self.state = 798
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(ZigParser.IfStatementContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(ZigParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_selectionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = ZigParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_selectionStatement)
        try:
            self.state = 804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.ifStatement()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.switchExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(ZigParser.IfExpressionContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(ZigParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_selectionExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionExpression" ):
                return visitor.visitSelectionExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectionExpression(self):

        localctx = ZigParser.SelectionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_selectionExpression)
        try:
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.ifExpression()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.switchExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.IfTypeExpressionContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(ZigParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_selectionTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionTypeExpression" ):
                return visitor.visitSelectionTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectionTypeExpression(self):

        localctx = ZigParser.SelectionTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_selectionTypeExpression)
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.ifTypeExpression()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.switchExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def elseStatement(self):
            return self.getTypedRuleContext(ZigParser.ElseStatementContext,0)


        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ifStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = ZigParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.ifPrefix()
                self.state = 815
                self.blockExpression()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 816
                    self.match(ZigParser.Else)
                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==80:
                        self.state = 817
                        self.payload()


                    self.state = 820
                    self.elseStatement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.ifPrefix()
                self.state = 824
                self.assignExpression()
                self.state = 831
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [86]:
                    self.state = 825
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 826
                    self.match(ZigParser.Else)
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==80:
                        self.state = 827
                        self.payload()


                    self.state = 830
                    self.elseStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def thenExpression(self):
            return self.getTypedRuleContext(ZigParser.ThenExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def elseExpression(self):
            return self.getTypedRuleContext(ZigParser.ElseExpressionContext,0)


        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifExpression(self):

        localctx = ZigParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.ifPrefix()
            self.state = 836
            self.thenExpression()
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 837
                self.match(ZigParser.Else)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 838
                    self.payload()


                self.state = 841
                self.elseExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfTypeExpression" ):
                return visitor.visitIfTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifTypeExpression(self):

        localctx = ZigParser.IfTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_ifTypeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.ifPrefix()
            self.state = 845
            self.typeExpression()
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 846
                self.match(ZigParser.Else)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 847
                    self.payload()


                self.state = 850
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ZigParser.If, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def condExpression(self):
            return self.getTypedRuleContext(ZigParser.CondExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def ptrPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifPrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfPrefix" ):
                return visitor.visitIfPrefix(self)
            else:
                return visitor.visitChildren(self)




    def ifPrefix(self):

        localctx = ZigParser.IfPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ifPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(ZigParser.If)
            self.state = 854
            self.match(ZigParser.LPar)
            self.state = 855
            self.condExpression()
            self.state = 856
            self.match(ZigParser.RPar)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 857
                self.ptrPayload()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_condExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondExpression" ):
                return visitor.visitCondExpression(self)
            else:
                return visitor.visitChildren(self)




    def condExpression(self):

        localctx = ZigParser.CondExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_condExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_thenExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThenExpression" ):
                return visitor.visitThenExpression(self)
            else:
                return visitor.visitChildren(self)




    def thenExpression(self):

        localctx = ZigParser.ThenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_thenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_elseExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseExpression" ):
                return visitor.visitElseExpression(self)
            else:
                return visitor.visitChildren(self)




    def elseExpression(self):

        localctx = ZigParser.ElseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_elseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ZigParser.StatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_elseStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseStatement" ):
                return visitor.visitElseStatement(self)
            else:
                return visitor.visitChildren(self)




    def elseStatement(self):

        localctx = ZigParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(ZigParser.Switch, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def switchProngList(self):
            return self.getTypedRuleContext(ZigParser.SwitchProngListContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = ZigParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_switchExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(ZigParser.Switch)
            self.state = 869
            self.match(ZigParser.LPar)
            self.state = 870
            self.expression()
            self.state = 871
            self.match(ZigParser.RPar)
            self.state = 872
            self.match(ZigParser.LBrace)
            self.state = 873
            self.switchProngList()
            self.state = 874
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ZigParser.LabeledStatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_iterationStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = ZigParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_iterationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.labeledStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledExpression(self):
            return self.getTypedRuleContext(ZigParser.LabeledExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_iterationExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationExpression" ):
                return visitor.visitIterationExpression(self)
            else:
                return visitor.visitChildren(self)




    def iterationExpression(self):

        localctx = ZigParser.IterationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_iterationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.labeledExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.LabeledTypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_iterationTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationTypeExpression" ):
                return visitor.visitIterationTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def iterationTypeExpression(self):

        localctx = ZigParser.IterationTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_iterationTypeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.labeledTypeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(ZigParser.LoopStatementContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = ZigParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_labeledStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 882
                self.blockLabel()


            self.state = 887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.state = 885
                self.block()
                pass
            elif token in [24, 26, 51]:
                self.state = 886
                self.loopStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopExpression(self):
            return self.getTypedRuleContext(ZigParser.LoopExpressionContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledExpression" ):
                return visitor.visitLabeledExpression(self)
            else:
                return visitor.visitChildren(self)




    def labeledExpression(self):

        localctx = ZigParser.LabeledExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_labeledExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 889
                self.blockLabel()


            self.state = 892
            self.loopExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def loopTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.LoopTypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledTypeExpression" ):
                return visitor.visitLabeledTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def labeledTypeExpression(self):

        localctx = ZigParser.LabeledTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_labeledTypeExpression)
        self._la = 0 # Token type
        try:
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.blockLabel()
                self.state = 895
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 897
                    self.blockLabel()


                self.state = 900
                self.loopTypeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStatement(self):
            return self.getTypedRuleContext(ZigParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(ZigParser.WhileStatementContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_loopStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = ZigParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 903
                self.match(ZigParser.Inline)


            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 906
                self.forStatement()
                pass
            elif token in [51]:
                self.state = 907
                self.whileStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpression(self):
            return self.getTypedRuleContext(ZigParser.ForExpressionContext,0)


        def whileExpression(self):
            return self.getTypedRuleContext(ZigParser.WhileExpressionContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_loopExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopExpression" ):
                return visitor.visitLoopExpression(self)
            else:
                return visitor.visitChildren(self)




    def loopExpression(self):

        localctx = ZigParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_loopExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 910
                self.match(ZigParser.Inline)


            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 913
                self.forExpression()
                pass
            elif token in [51]:
                self.state = 914
                self.whileExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.ForTypeExpressionContext,0)


        def whileTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.WhileTypeExpressionContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_loopTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopTypeExpression" ):
                return visitor.visitLoopTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def loopTypeExpression(self):

        localctx = ZigParser.LoopTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_loopTypeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 917
                self.match(ZigParser.Inline)


            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 920
                self.forTypeExpression()
                pass
            elif token in [51]:
                self.state = 921
                self.whileTypeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(ZigParser.StatementContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = ZigParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.forPrefix()
                self.state = 925
                self.blockExpression()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 926
                    self.match(ZigParser.Else)
                    self.state = 927
                    self.statement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.forPrefix()
                self.state = 931
                self.assignExpression()
                self.state = 935
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [86]:
                    self.state = 932
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 933
                    self.match(ZigParser.Else)
                    self.state = 934
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)




    def forExpression(self):

        localctx = ZigParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_forExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.forPrefix()
            self.state = 940
            self.expression()
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 941
                self.match(ZigParser.Else)
                self.state = 942
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForTypeExpression" ):
                return visitor.visitForTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def forTypeExpression(self):

        localctx = ZigParser.ForTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forTypeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.forPrefix()
            self.state = 946
            self.typeExpression()
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 947
                self.match(ZigParser.Else)
                self.state = 948
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(ZigParser.For, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def forArgumentsList(self):
            return self.getTypedRuleContext(ZigParser.ForArgumentsListContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def ptrListPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrListPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_forPrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForPrefix" ):
                return visitor.visitForPrefix(self)
            else:
                return visitor.visitChildren(self)




    def forPrefix(self):

        localctx = ZigParser.ForPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_forPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(ZigParser.For)
            self.state = 952
            self.match(ZigParser.LPar)
            self.state = 953
            self.forArgumentsList()
            self.state = 954
            self.match(ZigParser.RPar)
            self.state = 955
            self.ptrListPayload()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(ZigParser.StatementContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_whileStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = ZigParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.whilePrefix()
                self.state = 958
                self.blockExpression()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 959
                    self.match(ZigParser.Else)
                    self.state = 960
                    self.statement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.whilePrefix()
                self.state = 964
                self.assignExpression()
                self.state = 968
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [86]:
                    self.state = 965
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 966
                    self.match(ZigParser.Else)
                    self.state = 967
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whileExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileExpression" ):
                return visitor.visitWhileExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileExpression(self):

        localctx = ZigParser.WhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_whileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.whilePrefix()
            self.state = 973
            self.expression()
            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 974
                self.match(ZigParser.Else)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 975
                    self.payload()


                self.state = 978
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whileTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileTypeExpression" ):
                return visitor.visitWhileTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileTypeExpression(self):

        localctx = ZigParser.WhileTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_whileTypeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.whilePrefix()
            self.state = 982
            self.typeExpression()
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 983
                self.match(ZigParser.Else)
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 984
                    self.payload()


                self.state = 987
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhilePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ZigParser.While, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def condExpression(self):
            return self.getTypedRuleContext(ZigParser.CondExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def ptrPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrPayloadContext,0)


        def whileContinueExpression(self):
            return self.getTypedRuleContext(ZigParser.WhileContinueExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whilePrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhilePrefix" ):
                return visitor.visitWhilePrefix(self)
            else:
                return visitor.visitChildren(self)




    def whilePrefix(self):

        localctx = ZigParser.WhilePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_whilePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(ZigParser.While)
            self.state = 991
            self.match(ZigParser.LPar)
            self.state = 992
            self.condExpression()
            self.state = 993
            self.match(ZigParser.RPar)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 994
                self.ptrPayload()


            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 997
                self.whileContinueExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_blockExpressionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockExpressionStatement" ):
                return visitor.visitBlockExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockExpressionStatement(self):

        localctx = ZigParser.BlockExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_blockExpressionStatement)
        try:
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.blockExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.assignExpression()
                self.state = 1002
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_blockExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockExpression" ):
                return visitor.visitBlockExpression(self)
            else:
                return visitor.visitChildren(self)




    def blockExpression(self):

        localctx = ZigParser.BlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_blockExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1006
                self.blockLabel()


            self.state = 1009
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def assignOpExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignOpExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_assignExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignExpression" ):
                return visitor.visitAssignExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignExpression(self):

        localctx = ZigParser.AssignExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assignExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.expression()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==93:
                self.state = 1012
                self.assignOpExpression()
                self.state = 1013
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_breakLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakLabel" ):
                return visitor.visitBreakLabel(self)
            else:
                return visitor.visitChildren(self)




    def breakLabel(self):

        localctx = ZigParser.BreakLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_breakLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(ZigParser.Colon)
            self.state = 1018
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_blockLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockLabel" ):
                return visitor.visitBlockLabel(self)
            else:
                return visitor.visitChildren(self)




    def blockLabel(self):

        localctx = ZigParser.BlockLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_blockLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(ZigParser.Ident)
            self.state = 1021
            self.match(ZigParser.Colon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.StatementContext)
            else:
                return self.getTypedRuleContext(ZigParser.StatementContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ZigParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(ZigParser.LBrace)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1538797116256544672) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1091343225857) != 0):
                self.state = 1024
                self.statement()
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1030
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(ZigParser.Integer, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_integerLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = ZigParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_integerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(ZigParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Float(self):
            return self.getToken(ZigParser.Float, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = ZigParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_floatingLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(ZigParser.Float)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Char(self):
            return self.getToken(ZigParser.Char, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_charLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharLiteral" ):
                return visitor.visitCharLiteral(self)
            else:
                return visitor.visitChildren(self)




    def charLiteral(self):

        localctx = ZigParser.CharLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_charLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(ZigParser.Char)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_singleStringLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStringLiteral" ):
                return visitor.visitSingleStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def singleStringLiteral(self):

        localctx = ZigParser.SingleStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_singleStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(ZigParser.SingleString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineString(self):
            return self.getToken(ZigParser.LineString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_lineStringLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringLiteral" ):
                return visitor.visitLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def lineStringLiteral(self):

        localctx = ZigParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_lineStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(ZigParser.LineString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_groupedExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupedExpression" ):
                return visitor.visitGroupedExpression(self)
            else:
                return visitor.visitChildren(self)




    def groupedExpression(self):

        localctx = ZigParser.GroupedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_groupedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(ZigParser.LPar)
            self.state = 1043
            self.expression()
            self.state = 1044
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fieldInit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldInit" ):
                return visitor.visitFieldInit(self)
            else:
                return visitor.visitChildren(self)




    def fieldInit(self):

        localctx = ZigParser.FieldInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_fieldInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(ZigParser.Dot)
            self.state = 1047
            self.match(ZigParser.Ident)
            self.state = 1048
            self.match(ZigParser.Equal)
            self.state = 1049
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileContinueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_whileContinueExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileContinueExpression" ):
                return visitor.visitWhileContinueExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileContinueExpression(self):

        localctx = ZigParser.WhileContinueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_whileContinueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(ZigParser.Colon)
            self.state = 1052
            self.match(ZigParser.LPar)
            self.state = 1053
            self.assignExpression()
            self.state = 1054
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LinkSection(self):
            return self.getToken(ZigParser.LinkSection, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_linkSection

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkSection" ):
                return visitor.visitLinkSection(self)
            else:
                return visitor.visitChildren(self)




    def linkSection(self):

        localctx = ZigParser.LinkSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_linkSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(ZigParser.LinkSection)
            self.state = 1057
            self.match(ZigParser.LPar)
            self.state = 1058
            self.expression()
            self.state = 1059
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AddrSpace(self):
            return self.getToken(ZigParser.AddrSpace, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_addrSpace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddrSpace" ):
                return visitor.visitAddrSpace(self)
            else:
                return visitor.visitChildren(self)




    def addrSpace(self):

        localctx = ZigParser.AddrSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_addrSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(ZigParser.AddrSpace)
            self.state = 1062
            self.match(ZigParser.LPar)
            self.state = 1063
            self.expression()
            self.state = 1064
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallConvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CallConv(self):
            return self.getToken(ZigParser.CallConv, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_callConv

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallConv" ):
                return visitor.visitCallConv(self)
            else:
                return visitor.visitChildren(self)




    def callConv(self):

        localctx = ZigParser.CallConvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_callConv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(ZigParser.CallConv)
            self.state = 1067
            self.match(ZigParser.LPar)
            self.state = 1068
            self.expression()
            self.state = 1069
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_payload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPayload" ):
                return visitor.visitPayload(self)
            else:
                return visitor.visitChildren(self)




    def payload(self):

        localctx = ZigParser.PayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_payload)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(ZigParser.Pipe)
            self.state = 1072
            self.match(ZigParser.Ident)
            self.state = 1073
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrPayload" ):
                return visitor.visitPtrPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrPayload(self):

        localctx = ZigParser.PtrPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_ptrPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(ZigParser.Pipe)
            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1076
                self.match(ZigParser.Star)


            self.state = 1079
            self.match(ZigParser.Ident)
            self.state = 1080
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrIndexPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def Comma(self):
            return self.getToken(ZigParser.Comma, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrIndexPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrIndexPayload" ):
                return visitor.visitPtrIndexPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrIndexPayload(self):

        localctx = ZigParser.PtrIndexPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_ptrIndexPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(ZigParser.Pipe)
            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1083
                self.match(ZigParser.Star)


            self.state = 1086
            self.match(ZigParser.Ident)
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1087
                self.match(ZigParser.Comma)
                self.state = 1088
                self.match(ZigParser.Ident)


            self.state = 1091
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrListPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Star)
            else:
                return self.getToken(ZigParser.Star, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrListPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrListPayload" ):
                return visitor.visitPtrListPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrListPayload(self):

        localctx = ZigParser.PtrListPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_ptrListPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(ZigParser.Pipe)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1094
                self.match(ZigParser.Star)


            self.state = 1097
            self.match(ZigParser.Ident)
            self.state = 1105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1098
                    self.match(ZigParser.Comma)
                    self.state = 1100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 1099
                        self.match(ZigParser.Star)


                    self.state = 1102
                    self.match(ZigParser.Ident) 
                self.state = 1107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1108
                self.match(ZigParser.Comma)


            self.state = 1111
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchProngContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchCase(self):
            return self.getTypedRuleContext(ZigParser.SwitchCaseContext,0)


        def EqualArrow(self):
            return self.getToken(ZigParser.EqualArrow, 0)

        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def ptrIndexPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrIndexPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_switchProng

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchProng" ):
                return visitor.visitSwitchProng(self)
            else:
                return visitor.visitChildren(self)




    def switchProng(self):

        localctx = ZigParser.SwitchProngContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_switchProng)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1113
                self.match(ZigParser.Inline)


            self.state = 1116
            self.switchCase()
            self.state = 1117
            self.match(ZigParser.EqualArrow)
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 1118
                self.ptrIndexPayload()


            self.state = 1121
            self.assignExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SwitchItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.SwitchItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchCase

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchCase" ):
                return visitor.visitSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def switchCase(self):

        localctx = ZigParser.SwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_switchCase)
        self._la = 0 # Token type
        try:
            self.state = 1135
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 8, 9, 10, 13, 15, 18, 20, 22, 23, 24, 25, 26, 32, 33, 36, 38, 39, 40, 42, 45, 46, 47, 51, 52, 54, 56, 58, 60, 64, 74, 76, 85, 88, 91, 92, 97, 98, 99, 100, 101, 102, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                self.switchItem()
                self.state = 1128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1124
                        self.match(ZigParser.Comma)
                        self.state = 1125
                        self.switchItem() 
                    self.state = 1130
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 1131
                    self.match(ZigParser.Comma)


                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1134
                self.match(ZigParser.Else)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Ellipsis(self):
            return self.getToken(ZigParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchItem" ):
                return visitor.visitSwitchItem(self)
            else:
                return visitor.visitChildren(self)




    def switchItem(self):

        localctx = ZigParser.SwitchItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_switchItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.expression()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 1138
                self.match(ZigParser.Ellipsis)
                self.state = 1139
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForArgumentsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ForItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.ForItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_forArgumentsList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForArgumentsList" ):
                return visitor.visitForArgumentsList(self)
            else:
                return visitor.visitChildren(self)




    def forArgumentsList(self):

        localctx = ZigParser.ForArgumentsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_forArgumentsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.forItem()
            self.state = 1147
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1143
                    self.match(ZigParser.Comma)
                    self.state = 1144
                    self.forItem() 
                self.state = 1149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1150
                self.match(ZigParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Dot2(self):
            return self.getToken(ZigParser.Dot2, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForItem" ):
                return visitor.visitForItem(self)
            else:
                return visitor.visitChildren(self)




    def forItem(self):

        localctx = ZigParser.ForItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_forItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.expression()
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1154
                self.match(ZigParser.Dot2)
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1538231967279261600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1091343225857) != 0):
                    self.state = 1155
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignOpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def AssignOp(self):
            return self.getToken(ZigParser.AssignOp, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_assignOpExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignOpExpression" ):
                return visitor.visitAssignOpExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignOpExpression(self):

        localctx = ZigParser.AssignOpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_assignOpExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            _la = self._input.LA(1)
            if not(_la==69 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareOpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal2(self):
            return self.getToken(ZigParser.Equal2, 0)

        def CompareOp(self):
            return self.getToken(ZigParser.CompareOp, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_compareOpExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareOpExpression" ):
                return visitor.visitCompareOpExpression(self)
            else:
                return visitor.visitChildren(self)




    def compareOpExpression(self):

        localctx = ZigParser.CompareOpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_compareOpExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            _la = self._input.LA(1)
            if not(_la==70 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseOpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BitwiseOp(self):
            return self.getToken(ZigParser.BitwiseOp, 0)

        def bitwiseKwExpression(self):
            return self.getTypedRuleContext(ZigParser.BitwiseKwExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseOpExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseOpExpression" ):
                return visitor.visitBitwiseOpExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseOpExpression(self):

        localctx = ZigParser.BitwiseOpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_bitwiseOpExpression)
        try:
            self.state = 1166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self.match(ZigParser.BitwiseOp)
                pass
            elif token in [12, 35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1165
                self.bitwiseKwExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseKwExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OrElse(self):
            return self.getToken(ZigParser.OrElse, 0)

        def Catch(self):
            return self.getToken(ZigParser.Catch, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseKwExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseKwExpression" ):
                return visitor.visitBitwiseKwExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseKwExpression(self):

        localctx = ZigParser.BitwiseKwExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_bitwiseKwExpression)
        self._la = 0 # Token type
        try:
            self.state = 1173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.match(ZigParser.OrElse)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.match(ZigParser.Catch)
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 1170
                    self.payload()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixTypeOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Quest(self):
            return self.getToken(ZigParser.Quest, 0)

        def AnyFrame(self):
            return self.getToken(ZigParser.AnyFrame, 0)

        def MinusArrow(self):
            return self.getToken(ZigParser.MinusArrow, 0)

        def sliceTypeStart(self):
            return self.getTypedRuleContext(ZigParser.SliceTypeStartContext,0)


        def sliceTypeRest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SliceTypeRestContext)
            else:
                return self.getTypedRuleContext(ZigParser.SliceTypeRestContext,i)


        def ptrTypeStart(self):
            return self.getTypedRuleContext(ZigParser.PtrTypeStartContext,0)


        def ptrTypeRest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PtrTypeRestContext)
            else:
                return self.getTypedRuleContext(ZigParser.PtrTypeRestContext,i)


        def arrayTypeStart(self):
            return self.getTypedRuleContext(ZigParser.ArrayTypeStartContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_prefixTypeOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixTypeOp" ):
                return visitor.visitPrefixTypeOp(self)
            else:
                return visitor.visitChildren(self)




    def prefixTypeOp(self):

        localctx = ZigParser.PrefixTypeOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_prefixTypeOp)
        self._la = 0 # Token type
        try:
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1175
                self.match(ZigParser.Quest)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self.match(ZigParser.AnyFrame)
                self.state = 1177
                self.match(ZigParser.MinusArrow)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1178
                self.sliceTypeStart()
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125899906859022) != 0):
                    self.state = 1179
                    self.sliceTypeRest()
                    self.state = 1184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1185
                self.ptrTypeStart()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125899906859022) != 0):
                    self.state = 1186
                    self.ptrTypeRest()
                    self.state = 1191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1192
                self.arrayTypeStart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_arrayTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayTypeStart" ):
                return visitor.visitArrayTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def arrayTypeStart(self):

        localctx = ZigParser.ArrayTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_arrayTypeStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.match(ZigParser.LBrack)
            self.state = 1196
            self.expression()
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1197
                self.match(ZigParser.Colon)
                self.state = 1198
                self.expression()


            self.state = 1201
            self.match(ZigParser.RBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_sliceTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceTypeStart" ):
                return visitor.visitSliceTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def sliceTypeStart(self):

        localctx = ZigParser.SliceTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_sliceTypeStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(ZigParser.LBrack)
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1204
                self.match(ZigParser.Colon)
                self.state = 1205
                self.expression()


            self.state = 1208
            self.match(ZigParser.RBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def AllowZero(self):
            return self.getToken(ZigParser.AllowZero, 0)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_sliceTypeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceTypeRest" ):
                return visitor.visitSliceTypeRest(self)
            else:
                return visitor.visitChildren(self)




    def sliceTypeRest(self):

        localctx = ZigParser.SliceTypeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_sliceTypeRest)
        try:
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.byteAlign()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.addrSpace()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.match(ZigParser.AllowZero)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1213
                self.match(ZigParser.Const)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1214
                self.match(ZigParser.Volatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def Star2(self):
            return self.getToken(ZigParser.Star2, 0)

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def LetterC(self):
            return self.getToken(ZigParser.LetterC, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ptrTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrTypeStart" ):
                return visitor.visitPtrTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def ptrTypeStart(self):

        localctx = ZigParser.PtrTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ptrTypeStart)
        try:
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1217
                self.match(ZigParser.Star)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1218
                self.match(ZigParser.Star2)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1219
                self.match(ZigParser.LBrack)
                self.state = 1220
                self.match(ZigParser.Star)
                self.state = 1224
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 1221
                    self.match(ZigParser.LetterC)
                    pass
                elif token in [62]:
                    self.state = 1222
                    self.match(ZigParser.Colon)
                    self.state = 1223
                    self.expression()
                    pass
                elif token in [57]:
                    pass
                else:
                    pass
                self.state = 1226
                self.match(ZigParser.RBrack)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrTypeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign3(self):
            return self.getTypedRuleContext(ZigParser.ByteAlign3Context,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def AllowZero(self):
            return self.getToken(ZigParser.AllowZero, 0)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrTypeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrTypeRest" ):
                return visitor.visitPtrTypeRest(self)
            else:
                return visitor.visitChildren(self)




    def ptrTypeRest(self):

        localctx = ZigParser.PtrTypeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_ptrTypeRest)
        try:
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1229
                self.byteAlign3()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1230
                self.addrSpace()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1231
                self.match(ZigParser.AllowZero)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1232
                self.match(ZigParser.Const)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1233
                self.match(ZigParser.Volatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Dot2(self):
            return self.getToken(ZigParser.Dot2, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def DotStar(self):
            return self.getToken(ZigParser.DotStar, 0)

        def DotQue(self):
            return self.getToken(ZigParser.DotQue, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_suffixOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixOp" ):
                return visitor.visitSuffixOp(self)
            else:
                return visitor.visitChildren(self)




    def suffixOp(self):

        localctx = ZigParser.SuffixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_suffixOp)
        self._la = 0 # Token type
        try:
            self.state = 1254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                self.match(ZigParser.LBrack)
                self.state = 1237
                self.expression()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1238
                    self.match(ZigParser.Dot2)
                    self.state = 1244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1538231967279261600) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1091343225857) != 0):
                        self.state = 1239
                        self.expression()
                        self.state = 1242
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==62:
                            self.state = 1240
                            self.match(ZigParser.Colon)
                            self.state = 1241
                            self.expression()






                self.state = 1248
                self.match(ZigParser.RBrack)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1250
                self.match(ZigParser.Dot)
                self.state = 1251
                self.match(ZigParser.Ident)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1252
                self.match(ZigParser.DotStar)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1253
                self.match(ZigParser.DotQue)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteAlignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Align(self):
            return self.getToken(ZigParser.Align, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_byteAlign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteAlign" ):
                return visitor.visitByteAlign(self)
            else:
                return visitor.visitChildren(self)




    def byteAlign(self):

        localctx = ZigParser.ByteAlignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_byteAlign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(ZigParser.Align)
            self.state = 1257
            self.match(ZigParser.LPar)
            self.state = 1258
            self.expression()
            self.state = 1259
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteAlign3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Align(self):
            return self.getToken(ZigParser.Align, 0)

        def LPar(self):
            return self.getToken(ZigParser.LPar, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def RPar(self):
            return self.getToken(ZigParser.RPar, 0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Colon)
            else:
                return self.getToken(ZigParser.Colon, i)

        def getRuleIndex(self):
            return ZigParser.RULE_byteAlign3

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteAlign3" ):
                return visitor.visitByteAlign3(self)
            else:
                return visitor.visitChildren(self)




    def byteAlign3(self):

        localctx = ZigParser.ByteAlign3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_byteAlign3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.match(ZigParser.Align)
            self.state = 1262
            self.match(ZigParser.LPar)
            self.state = 1263
            self.expression()
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1264
                self.match(ZigParser.Colon)
                self.state = 1265
                self.expression()
                self.state = 1266
                self.match(ZigParser.Colon)
                self.state = 1267
                self.expression()


            self.state = 1271
            self.match(ZigParser.RPar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchProngListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchProng(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SwitchProngContext)
            else:
                return self.getTypedRuleContext(ZigParser.SwitchProngContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_switchProngList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchProngList" ):
                return visitor.visitSwitchProngList(self)
            else:
                return visitor.visitChildren(self)




    def switchProngList(self):

        localctx = ZigParser.SwitchProngListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_switchProngList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1273
                    self.switchProng()
                    self.state = 1274
                    self.match(ZigParser.Comma) 
                self.state = 1280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1538231967279392672) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1091343225857) != 0):
                self.state = 1281
                self.switchProng()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleString(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.SingleString)
            else:
                return self.getToken(ZigParser.SingleString, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_stringList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringList" ):
                return visitor.visitStringList(self)
            else:
                return visitor.visitChildren(self)




    def stringList(self):

        localctx = ZigParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1284
                    self.match(ZigParser.SingleString)
                    self.state = 1285
                    self.match(ZigParser.Comma) 
                self.state = 1290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 1291
                self.match(ZigParser.SingleString)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerMembers(self):
            return self.getTypedRuleContext(ZigParser.ContainerMembersContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_containerUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerUnit" ):
                return visitor.visitContainerUnit(self)
            else:
                return visitor.visitChildren(self)




    def containerUnit(self):

        localctx = ZigParser.ContainerUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_containerUnit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.containerMembers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldList(self):
            return self.getTypedRuleContext(ZigParser.FieldListContext,0)


        def containerDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ContainerDeclarationListContext)
            else:
                return self.getTypedRuleContext(ZigParser.ContainerDeclarationListContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_containerMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerMembers" ):
                return visitor.visitContainerMembers(self)
            else:
                return visitor.visitChildren(self)




    def containerMembers(self):

        localctx = ZigParser.ContainerMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_containerMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1296
                self.fieldList()


            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 870951803707392) != 0) or _la==105:
                self.state = 1299
                self.containerDeclarationList()
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testDeclaration(self):
            return self.getTypedRuleContext(ZigParser.TestDeclarationContext,0)


        def compTimeDeclaration(self):
            return self.getTypedRuleContext(ZigParser.CompTimeDeclarationContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ZigParser.DeclarationContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def Pub(self):
            return self.getToken(ZigParser.Pub, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclarationList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclarationList" ):
                return visitor.visitContainerDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclarationList(self):

        localctx = ZigParser.ContainerDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_containerDeclarationList)
        self._la = 0 # Token type
        try:
            self.state = 1314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1305
                self.testDeclaration()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.compTimeDeclaration()
                pass
            elif token in [14, 21, 22, 23, 26, 30, 37, 44, 48, 49, 105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 1307
                    self.match(ZigParser.DocComment)


                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 1310
                    self.match(ZigParser.Pub)


                self.state = 1313
                self.declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclTopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fnProtoDeclaration(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def fnProtoDeclarationEx(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationExContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclTop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclTop" ):
                return visitor.visitFnProtoDeclTop(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclTop(self):

        localctx = ZigParser.FnProtoDeclTopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_fnProtoDeclTop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1147142144) != 0):
                self.state = 1316
                self.fnProtoDeclarationEx()


            self.state = 1319
            self.fnProtoDeclaration()
            self.state = 1322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 1320
                self.match(ZigParser.Semi)
                pass
            elif token in [54]:
                self.state = 1321
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationTopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDeclaration(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationContext,0)


        def varDeclarationEx(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationExContext,0)


        def ThreadLocal(self):
            return self.getToken(ZigParser.ThreadLocal, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_varDeclarationTop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclarationTop" ):
                return visitor.visitVarDeclarationTop(self)
            else:
                return visitor.visitChildren(self)




    def varDeclarationTop(self):

        localctx = ZigParser.VarDeclarationTopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_varDeclarationTop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==22:
                self.state = 1324
                self.varDeclarationEx()


            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 1327
                self.match(ZigParser.ThreadLocal)


            self.state = 1330
            self.varDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclarationExContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Export(self):
            return self.getToken(ZigParser.Export, 0)

        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def NoInline(self):
            return self.getToken(ZigParser.NoInline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclarationEx

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclarationEx" ):
                return visitor.visitFnProtoDeclarationEx(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclarationEx(self):

        localctx = ZigParser.FnProtoDeclarationExContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_fnProtoDeclarationEx)
        self._la = 0 # Token type
        try:
            self.state = 1339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1332
                self.match(ZigParser.Export)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.match(ZigParser.Extern)
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 1334
                    self.match(ZigParser.SingleString)


                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1337
                self.match(ZigParser.Inline)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1338
                self.match(ZigParser.NoInline)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationExContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Export(self):
            return self.getToken(ZigParser.Export, 0)

        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_varDeclarationEx

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclarationEx" ):
                return visitor.visitVarDeclarationEx(self)
            else:
                return visitor.visitChildren(self)




    def varDeclarationEx(self):

        localctx = ZigParser.VarDeclarationExContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_varDeclarationEx)
        self._la = 0 # Token type
        try:
            self.state = 1346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1341
                self.match(ZigParser.Export)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1342
                self.match(ZigParser.Extern)
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 1343
                    self.match(ZigParser.SingleString)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_varName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarName" ):
                return visitor.visitVarName(self)
            else:
                return visitor.visitChildren(self)




    def varName(self):

        localctx = ZigParser.VarNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_varName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varName(self):
            return self.getTypedRuleContext(ZigParser.VarNameContext,0)


        def varDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Var(self):
            return self.getToken(ZigParser.Var, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_varDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclaration" ):
                return visitor.visitVarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def varDeclaration(self):

        localctx = ZigParser.VarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_varDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            _la = self._input.LA(1)
            if not(_la==14 or _la==49):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1351
            self.varName()
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 1352
                self.match(ZigParser.Colon)
                self.state = 1353
                self.typeExpression()


            self.state = 1356
            self.varDeclarationSpecifiers()
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 1357
                self.match(ZigParser.Equal)
                self.state = 1358
                self.expression()


            self.state = 1361
            self.match(ZigParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def linkSection(self):
            return self.getTypedRuleContext(ZigParser.LinkSectionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_varDeclarationSpecifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclarationSpecifiers" ):
                return visitor.visitVarDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def varDeclarationSpecifiers(self):

        localctx = ZigParser.VarDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_varDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 1363
                self.byteAlign()


            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 1366
                self.addrSpace()


            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 1369
                self.linkSection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Test(self):
            return self.getToken(ZigParser.Test, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_testDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestDeclaration" ):
                return visitor.visitTestDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def testDeclaration(self):

        localctx = ZigParser.TestDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_testDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(ZigParser.Test)
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98 or _la==102:
                self.state = 1373
                _la = self._input.LA(1)
                if not(_la==98 or _la==102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1376
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompTimeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compTimeDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompTimeDeclaration" ):
                return visitor.visitCompTimeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def compTimeDeclaration(self):

        localctx = ZigParser.CompTimeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_compTimeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(ZigParser.CompTime)
            self.state = 1379
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





