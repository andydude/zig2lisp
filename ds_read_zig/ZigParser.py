# Generated from ZigParser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,101,1351,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,3,1,290,8,1,1,2,1,2,1,2,3,2,295,8,2,1,3,1,3,3,3,299,8,3,
        1,3,1,3,1,3,3,3,304,8,3,1,3,1,3,1,4,1,4,1,4,3,4,311,8,4,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,327,8,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,5,9,343,8,9,
        10,9,12,9,346,9,9,1,9,3,9,349,8,9,1,10,1,10,1,10,5,10,354,8,10,10,
        10,12,10,357,9,10,1,10,3,10,360,8,10,1,11,1,11,1,11,5,11,365,8,11,
        10,11,12,11,368,9,11,1,11,1,11,1,11,1,11,5,11,374,8,11,10,11,12,
        11,377,9,11,3,11,379,8,11,1,12,1,12,3,12,383,8,12,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,5,14,392,8,14,10,14,12,14,395,9,14,1,14,1,14,
        1,15,1,15,3,15,401,8,15,1,16,1,16,1,17,1,17,1,17,5,17,408,8,17,10,
        17,12,17,411,9,17,1,18,1,18,1,18,5,18,416,8,18,10,18,12,18,419,9,
        18,1,19,1,19,1,19,1,19,5,19,425,8,19,10,19,12,19,428,9,19,1,20,1,
        20,1,20,1,20,5,20,434,8,20,10,20,12,20,437,9,20,1,21,1,21,1,21,5,
        21,442,8,21,10,21,12,21,445,9,21,1,22,1,22,1,22,5,22,450,8,22,10,
        22,12,22,453,9,22,1,23,1,23,1,23,5,23,458,8,23,10,23,12,23,461,9,
        23,1,24,5,24,464,8,24,10,24,12,24,467,9,24,1,24,1,24,1,25,1,25,1,
        25,1,25,1,25,3,25,476,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,484,
        8,26,1,27,3,27,487,8,27,1,27,3,27,490,8,27,1,27,1,27,1,28,1,28,1,
        28,3,28,497,8,28,1,28,1,28,3,28,501,8,28,1,29,1,29,1,29,3,29,506,
        8,29,3,29,508,8,29,1,30,1,30,1,31,1,31,1,31,1,31,3,31,516,8,31,1,
        31,1,31,1,31,3,31,521,8,31,1,31,1,31,1,32,3,32,526,8,32,1,32,3,32,
        529,8,32,1,32,3,32,532,8,32,1,33,1,33,1,34,3,34,537,8,34,1,34,1,
        34,1,35,1,35,1,35,3,35,544,8,35,1,35,1,35,1,35,1,36,1,36,1,36,3,
        36,552,8,36,1,37,1,37,1,37,1,37,1,37,3,37,559,8,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,3,37,568,8,37,1,37,3,37,571,8,37,1,37,3,37,574,
        8,37,3,37,576,8,37,1,38,1,38,1,38,5,38,581,8,38,10,38,12,38,584,
        9,38,1,38,3,38,587,8,38,1,39,3,39,590,8,39,1,39,3,39,593,8,39,1,
        39,1,39,1,39,3,39,598,8,39,1,39,1,39,1,39,3,39,603,8,39,1,40,3,40,
        606,8,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,615,8,42,1,43,1,
        43,3,43,619,8,43,1,43,1,43,1,43,1,43,1,43,3,43,626,8,43,1,43,3,43,
        629,8,43,1,43,1,43,1,44,3,44,634,8,44,1,44,3,44,637,8,44,1,44,3,
        44,640,8,44,1,44,3,44,643,8,44,1,45,1,45,1,45,5,45,648,8,45,10,45,
        12,45,651,9,45,1,45,3,45,654,8,45,1,46,3,46,657,8,46,1,46,3,46,660,
        8,46,1,46,1,46,3,46,664,8,46,1,46,1,46,3,46,668,8,46,1,47,1,47,1,
        48,1,48,3,48,674,8,48,1,49,1,49,1,49,1,49,5,49,680,8,49,10,49,12,
        49,683,9,49,1,49,3,49,686,8,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,
        694,8,49,10,49,12,49,697,9,49,1,49,3,49,700,8,49,1,49,1,49,1,49,
        1,49,3,49,706,8,49,1,50,1,50,3,50,710,8,50,1,51,1,51,1,51,3,51,715,
        8,51,1,52,1,52,1,52,3,52,720,8,52,1,53,1,53,1,53,3,53,725,8,53,1,
        54,1,54,1,54,3,54,730,8,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,
        56,5,56,740,8,56,10,56,12,56,743,9,56,1,56,1,56,1,56,1,57,1,57,1,
        57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,758,8,57,1,57,3,57,761,
        8,57,1,58,1,58,3,58,765,8,58,1,58,3,58,768,8,58,1,58,1,58,1,58,1,
        58,1,58,1,58,3,58,776,8,58,1,58,1,58,1,58,1,58,3,58,782,8,58,1,58,
        3,58,785,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        3,59,797,8,59,1,60,1,60,1,60,1,61,3,61,803,8,61,1,61,1,61,1,61,1,
        61,3,61,809,8,61,1,62,1,62,3,62,813,8,62,1,63,1,63,3,63,817,8,63,
        1,64,1,64,3,64,821,8,64,1,65,1,65,1,65,1,65,3,65,827,8,65,1,65,3,
        65,830,8,65,1,65,1,65,1,65,1,65,1,65,3,65,837,8,65,1,65,3,65,840,
        8,65,3,65,842,8,65,1,66,1,66,1,66,1,66,3,66,848,8,66,1,66,3,66,851,
        8,66,1,67,1,67,1,67,1,67,3,67,857,8,67,1,67,3,67,860,8,67,1,68,1,
        68,1,68,1,68,1,68,3,68,867,8,68,1,69,1,69,1,70,1,70,1,71,1,71,1,
        72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,75,1,
        75,1,76,1,76,1,77,3,77,892,8,77,1,77,1,77,3,77,896,8,77,1,78,3,78,
        899,8,78,1,78,1,78,1,79,1,79,1,79,1,79,3,79,907,8,79,1,79,3,79,910,
        8,79,1,80,1,80,1,80,3,80,915,8,80,1,81,3,81,918,8,81,1,81,1,81,3,
        81,922,8,81,1,82,1,82,1,82,3,82,927,8,82,1,83,1,83,1,83,1,83,3,83,
        933,8,83,1,83,1,83,1,83,1,83,1,83,3,83,940,8,83,3,83,942,8,83,1,
        84,1,84,1,84,1,84,3,84,948,8,84,1,85,1,85,1,85,1,85,3,85,954,8,85,
        1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,3,87,966,8,87,
        1,87,1,87,1,87,1,87,1,87,3,87,973,8,87,3,87,975,8,87,1,88,1,88,1,
        88,1,88,3,88,981,8,88,1,88,3,88,984,8,88,1,89,1,89,1,89,1,89,3,89,
        990,8,89,1,89,3,89,993,8,89,1,90,1,90,1,90,1,90,1,90,3,90,1000,8,
        90,1,90,3,90,1003,8,90,1,91,1,91,1,91,1,91,3,91,1009,8,91,1,92,3,
        92,1012,8,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,1020,8,93,1,94,1,
        94,1,94,1,95,1,95,1,95,1,96,1,96,5,96,1030,8,96,10,96,12,96,1033,
        9,96,1,96,1,96,1,97,5,97,1038,8,97,10,97,12,97,1041,9,97,1,97,1,
        97,1,98,1,98,1,98,3,98,1048,8,98,1,99,1,99,1,100,1,100,1,101,1,101,
        1,102,1,102,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
        1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,
        1,107,1,108,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,
        1,110,1,110,1,110,1,110,1,111,1,111,3,111,1095,8,111,1,111,1,111,
        1,111,1,112,1,112,3,112,1102,8,112,1,112,1,112,1,112,3,112,1107,
        8,112,1,112,1,112,1,113,1,113,3,113,1113,8,113,1,113,1,113,1,113,
        3,113,1118,8,113,1,113,5,113,1121,8,113,10,113,12,113,1124,9,113,
        1,113,3,113,1127,8,113,1,113,1,113,1,114,3,114,1132,8,114,1,114,
        1,114,1,114,3,114,1137,8,114,1,114,1,114,1,115,1,115,1,115,5,115,
        1144,8,115,10,115,12,115,1147,9,115,1,115,3,115,1150,8,115,1,115,
        3,115,1153,8,115,1,116,1,116,1,116,3,116,1158,8,116,1,117,1,117,
        1,117,5,117,1163,8,117,10,117,12,117,1166,9,117,1,117,3,117,1169,
        8,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,3,121,1179,
        8,121,1,122,1,122,1,122,3,122,1184,8,122,3,122,1186,8,122,1,123,
        1,123,1,123,1,123,1,123,5,123,1193,8,123,10,123,12,123,1196,9,123,
        1,123,1,123,5,123,1200,8,123,10,123,12,123,1203,9,123,1,123,3,123,
        1206,8,123,1,124,1,124,1,124,1,124,3,124,1212,8,124,1,124,1,124,
        1,125,1,125,1,125,3,125,1219,8,125,1,125,1,125,1,126,1,126,1,126,
        1,126,1,126,3,126,1228,8,126,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,3,127,1238,8,127,1,127,3,127,1241,8,127,1,128,1,128,
        1,128,1,128,1,128,3,128,1248,8,128,1,129,1,129,1,129,1,129,1,129,
        1,129,3,129,1256,8,129,3,129,1258,8,129,3,129,1260,8,129,1,129,1,
        129,1,129,1,129,1,129,1,129,3,129,1268,8,129,1,130,1,130,1,130,1,
        130,1,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,
        1283,8,131,1,131,1,131,1,132,1,132,1,132,5,132,1290,8,132,10,132,
        12,132,1293,9,132,1,132,3,132,1296,8,132,1,133,1,133,5,133,1300,
        8,133,10,133,12,133,1303,9,133,1,133,3,133,1306,8,133,1,134,5,134,
        1309,8,134,10,134,12,134,1312,9,134,1,134,1,134,1,135,1,135,5,135,
        1318,8,135,10,135,12,135,1321,9,135,1,136,1,136,1,136,3,136,1326,
        8,136,1,136,3,136,1329,8,136,1,136,3,136,1332,8,136,1,137,3,137,
        1335,8,137,1,137,1,137,1,137,3,137,1340,8,137,1,138,1,138,3,138,
        1344,8,138,1,138,1,138,1,139,1,139,1,139,1,139,0,0,140,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,0,6,2,0,14,14,49,49,2,0,
        22,22,36,36,2,0,13,13,29,29,2,0,52,52,82,82,2,0,53,53,83,83,2,0,
        60,60,64,64,1427,0,280,1,0,0,0,2,289,1,0,0,0,4,294,1,0,0,0,6,296,
        1,0,0,0,8,307,1,0,0,0,10,312,1,0,0,0,12,323,1,0,0,0,14,328,1,0,0,
        0,16,336,1,0,0,0,18,344,1,0,0,0,20,355,1,0,0,0,22,378,1,0,0,0,24,
        382,1,0,0,0,26,384,1,0,0,0,28,393,1,0,0,0,30,398,1,0,0,0,32,402,
        1,0,0,0,34,404,1,0,0,0,36,412,1,0,0,0,38,420,1,0,0,0,40,429,1,0,
        0,0,42,438,1,0,0,0,44,446,1,0,0,0,46,454,1,0,0,0,48,465,1,0,0,0,
        50,475,1,0,0,0,52,483,1,0,0,0,54,486,1,0,0,0,56,500,1,0,0,0,58,507,
        1,0,0,0,60,509,1,0,0,0,62,511,1,0,0,0,64,525,1,0,0,0,66,533,1,0,
        0,0,68,536,1,0,0,0,70,540,1,0,0,0,72,551,1,0,0,0,74,575,1,0,0,0,
        76,582,1,0,0,0,78,589,1,0,0,0,80,605,1,0,0,0,82,607,1,0,0,0,84,609,
        1,0,0,0,86,616,1,0,0,0,88,633,1,0,0,0,90,649,1,0,0,0,92,667,1,0,
        0,0,94,669,1,0,0,0,96,673,1,0,0,0,98,705,1,0,0,0,100,709,1,0,0,0,
        102,714,1,0,0,0,104,719,1,0,0,0,106,724,1,0,0,0,108,729,1,0,0,0,
        110,731,1,0,0,0,112,741,1,0,0,0,114,760,1,0,0,0,116,784,1,0,0,0,
        118,796,1,0,0,0,120,798,1,0,0,0,122,808,1,0,0,0,124,812,1,0,0,0,
        126,816,1,0,0,0,128,820,1,0,0,0,130,841,1,0,0,0,132,843,1,0,0,0,
        134,852,1,0,0,0,136,861,1,0,0,0,138,868,1,0,0,0,140,870,1,0,0,0,
        142,872,1,0,0,0,144,874,1,0,0,0,146,876,1,0,0,0,148,884,1,0,0,0,
        150,886,1,0,0,0,152,888,1,0,0,0,154,891,1,0,0,0,156,898,1,0,0,0,
        158,909,1,0,0,0,160,911,1,0,0,0,162,917,1,0,0,0,164,923,1,0,0,0,
        166,941,1,0,0,0,168,943,1,0,0,0,170,949,1,0,0,0,172,955,1,0,0,0,
        174,974,1,0,0,0,176,976,1,0,0,0,178,985,1,0,0,0,180,994,1,0,0,0,
        182,1008,1,0,0,0,184,1011,1,0,0,0,186,1015,1,0,0,0,188,1021,1,0,
        0,0,190,1024,1,0,0,0,192,1027,1,0,0,0,194,1039,1,0,0,0,196,1044,
        1,0,0,0,198,1049,1,0,0,0,200,1051,1,0,0,0,202,1053,1,0,0,0,204,1055,
        1,0,0,0,206,1057,1,0,0,0,208,1059,1,0,0,0,210,1063,1,0,0,0,212,1068,
        1,0,0,0,214,1073,1,0,0,0,216,1078,1,0,0,0,218,1083,1,0,0,0,220,1088,
        1,0,0,0,222,1092,1,0,0,0,224,1099,1,0,0,0,226,1110,1,0,0,0,228,1131,
        1,0,0,0,230,1152,1,0,0,0,232,1154,1,0,0,0,234,1159,1,0,0,0,236,1170,
        1,0,0,0,238,1172,1,0,0,0,240,1174,1,0,0,0,242,1178,1,0,0,0,244,1185,
        1,0,0,0,246,1205,1,0,0,0,248,1207,1,0,0,0,250,1215,1,0,0,0,252,1227,
        1,0,0,0,254,1240,1,0,0,0,256,1247,1,0,0,0,258,1267,1,0,0,0,260,1269,
        1,0,0,0,262,1274,1,0,0,0,264,1291,1,0,0,0,266,1301,1,0,0,0,268,1310,
        1,0,0,0,270,1315,1,0,0,0,272,1331,1,0,0,0,274,1334,1,0,0,0,276,1341,
        1,0,0,0,278,1347,1,0,0,0,280,281,3,268,134,0,281,1,1,0,0,0,282,290,
        5,5,0,0,283,290,5,47,0,0,284,290,3,66,33,0,285,290,3,50,25,0,286,
        290,3,208,104,0,287,290,3,106,53,0,288,290,3,108,54,0,289,282,1,
        0,0,0,289,283,1,0,0,0,289,284,1,0,0,0,289,285,1,0,0,0,289,286,1,
        0,0,0,289,287,1,0,0,0,289,288,1,0,0,0,290,3,1,0,0,0,291,295,3,6,
        3,0,292,295,3,104,52,0,293,295,3,30,15,0,294,291,1,0,0,0,294,292,
        1,0,0,0,294,293,1,0,0,0,295,5,1,0,0,0,296,298,5,7,0,0,297,299,5,
        50,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,301,5,
        66,0,0,301,303,3,32,16,0,302,304,3,8,4,0,303,302,1,0,0,0,303,304,
        1,0,0,0,304,305,1,0,0,0,305,306,5,67,0,0,306,7,1,0,0,0,307,308,5,
        77,0,0,308,310,3,18,9,0,309,311,3,12,6,0,310,309,1,0,0,0,310,311,
        1,0,0,0,311,9,1,0,0,0,312,313,5,70,0,0,313,314,5,60,0,0,314,315,
        5,71,0,0,315,316,5,64,0,0,316,317,5,66,0,0,317,318,5,87,0,0,318,
        319,3,194,97,0,319,320,5,60,0,0,320,321,1,0,0,0,321,322,5,67,0,0,
        322,11,1,0,0,0,323,324,5,77,0,0,324,326,3,20,10,0,325,327,3,16,8,
        0,326,325,1,0,0,0,326,327,1,0,0,0,327,13,1,0,0,0,328,329,5,70,0,
        0,329,330,5,60,0,0,330,331,5,71,0,0,331,332,5,64,0,0,332,333,5,66,
        0,0,333,334,3,32,16,0,334,335,5,67,0,0,335,15,1,0,0,0,336,337,5,
        77,0,0,337,338,3,266,133,0,338,17,1,0,0,0,339,340,3,10,5,0,340,341,
        5,78,0,0,341,343,1,0,0,0,342,339,1,0,0,0,343,346,1,0,0,0,344,342,
        1,0,0,0,344,345,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,347,349,
        3,10,5,0,348,347,1,0,0,0,348,349,1,0,0,0,349,19,1,0,0,0,350,351,
        3,14,7,0,351,352,5,78,0,0,352,354,1,0,0,0,353,350,1,0,0,0,354,357,
        1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,359,1,0,0,0,357,355,
        1,0,0,0,358,360,3,14,7,0,359,358,1,0,0,0,359,360,1,0,0,0,360,21,
        1,0,0,0,361,362,5,8,0,0,362,366,3,2,1,0,363,365,3,258,129,0,364,
        363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,
        369,1,0,0,0,368,366,1,0,0,0,369,370,3,26,13,0,370,379,1,0,0,0,371,
        375,3,2,1,0,372,374,3,24,12,0,373,372,1,0,0,0,374,377,1,0,0,0,375,
        373,1,0,0,0,375,376,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,378,
        361,1,0,0,0,378,371,1,0,0,0,379,23,1,0,0,0,380,383,3,258,129,0,381,
        383,3,26,13,0,382,380,1,0,0,0,382,381,1,0,0,0,383,25,1,0,0,0,384,
        385,5,66,0,0,385,386,3,28,14,0,386,387,5,67,0,0,387,27,1,0,0,0,388,
        389,3,32,16,0,389,390,5,78,0,0,390,392,1,0,0,0,391,388,1,0,0,0,392,
        395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,
        393,1,0,0,0,396,397,3,32,16,0,397,29,1,0,0,0,398,400,3,194,97,0,
        399,401,3,98,49,0,400,399,1,0,0,0,400,401,1,0,0,0,401,31,1,0,0,0,
        402,403,3,34,17,0,403,33,1,0,0,0,404,409,3,36,18,0,405,406,5,34,
        0,0,406,408,3,36,18,0,407,405,1,0,0,0,408,411,1,0,0,0,409,407,1,
        0,0,0,409,410,1,0,0,0,410,35,1,0,0,0,411,409,1,0,0,0,412,417,3,38,
        19,0,413,414,5,4,0,0,414,416,3,38,19,0,415,413,1,0,0,0,416,419,1,
        0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,37,1,0,0,0,419,417,1,0,
        0,0,420,426,3,40,20,0,421,422,3,240,120,0,422,423,3,40,20,0,423,
        425,1,0,0,0,424,421,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,
        427,1,0,0,0,427,39,1,0,0,0,428,426,1,0,0,0,429,435,3,42,21,0,430,
        431,3,242,121,0,431,432,3,42,21,0,432,434,1,0,0,0,433,430,1,0,0,
        0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,41,1,0,0,0,
        437,435,1,0,0,0,438,443,3,44,22,0,439,440,5,55,0,0,440,442,3,44,
        22,0,441,439,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,
        0,0,444,43,1,0,0,0,445,443,1,0,0,0,446,451,3,46,23,0,447,448,5,56,
        0,0,448,450,3,46,23,0,449,447,1,0,0,0,450,453,1,0,0,0,451,449,1,
        0,0,0,451,452,1,0,0,0,452,45,1,0,0,0,453,451,1,0,0,0,454,459,3,48,
        24,0,455,456,5,57,0,0,456,458,3,48,24,0,457,455,1,0,0,0,458,461,
        1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,47,1,0,0,0,461,459,1,
        0,0,0,462,464,5,58,0,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,
        0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,1,0,0,0,468,469,3,
        4,2,0,469,49,1,0,0,0,470,476,3,198,99,0,471,476,3,200,100,0,472,
        476,3,202,101,0,473,476,3,204,102,0,474,476,3,206,103,0,475,470,
        1,0,0,0,475,471,1,0,0,0,475,472,1,0,0,0,475,473,1,0,0,0,475,474,
        1,0,0,0,476,51,1,0,0,0,477,484,3,274,137,0,478,484,3,54,27,0,479,
        480,5,48,0,0,480,481,3,32,16,0,481,482,5,91,0,0,482,484,1,0,0,0,
        483,477,1,0,0,0,483,478,1,0,0,0,483,479,1,0,0,0,484,53,1,0,0,0,485,
        487,3,58,29,0,486,485,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,
        490,5,44,0,0,489,488,1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,
        492,3,62,31,0,492,55,1,0,0,0,493,501,5,21,0,0,494,496,5,22,0,0,495,
        497,5,64,0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,501,1,0,0,0,498,
        501,5,26,0,0,499,501,5,30,0,0,500,493,1,0,0,0,500,494,1,0,0,0,500,
        498,1,0,0,0,500,499,1,0,0,0,501,57,1,0,0,0,502,508,5,21,0,0,503,
        505,5,22,0,0,504,506,5,64,0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,
        508,1,0,0,0,507,502,1,0,0,0,507,503,1,0,0,0,508,59,1,0,0,0,509,510,
        5,60,0,0,510,61,1,0,0,0,511,512,7,0,0,0,512,515,3,60,30,0,513,514,
        5,77,0,0,514,516,3,194,97,0,515,513,1,0,0,0,515,516,1,0,0,0,516,
        517,1,0,0,0,517,520,3,64,32,0,518,519,5,82,0,0,519,521,3,32,16,0,
        520,518,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,5,91,0,0,
        523,63,1,0,0,0,524,526,3,260,130,0,525,524,1,0,0,0,525,526,1,0,0,
        0,526,528,1,0,0,0,527,529,3,216,108,0,528,527,1,0,0,0,528,529,1,
        0,0,0,529,531,1,0,0,0,530,532,3,214,107,0,531,530,1,0,0,0,531,532,
        1,0,0,0,532,65,1,0,0,0,533,534,5,60,0,0,534,67,1,0,0,0,535,537,7,
        1,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,539,3,
        70,35,0,539,69,1,0,0,0,540,541,3,72,36,0,541,543,5,68,0,0,542,544,
        5,99,0,0,543,542,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,
        3,270,135,0,546,547,5,69,0,0,547,71,1,0,0,0,548,552,3,74,37,0,549,
        552,3,84,42,0,550,552,5,33,0,0,551,548,1,0,0,0,551,549,1,0,0,0,551,
        550,1,0,0,0,552,73,1,0,0,0,553,558,5,40,0,0,554,555,5,66,0,0,555,
        556,3,32,16,0,556,557,5,67,0,0,557,559,1,0,0,0,558,554,1,0,0,0,558,
        559,1,0,0,0,559,576,1,0,0,0,560,573,5,46,0,0,561,570,5,66,0,0,562,
        567,5,18,0,0,563,564,5,66,0,0,564,565,3,32,16,0,565,566,5,67,0,0,
        566,568,1,0,0,0,567,563,1,0,0,0,567,568,1,0,0,0,568,571,1,0,0,0,
        569,571,3,32,16,0,570,562,1,0,0,0,570,569,1,0,0,0,571,572,1,0,0,
        0,572,574,5,67,0,0,573,561,1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,
        0,575,553,1,0,0,0,575,560,1,0,0,0,576,75,1,0,0,0,577,578,3,78,39,
        0,578,579,5,78,0,0,579,581,1,0,0,0,580,577,1,0,0,0,581,584,1,0,0,
        0,582,580,1,0,0,0,582,583,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,
        0,585,587,3,78,39,0,586,585,1,0,0,0,586,587,1,0,0,0,587,77,1,0,0,
        0,588,590,5,99,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,
        0,591,593,5,13,0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,
        0,594,597,3,82,41,0,595,596,5,77,0,0,596,598,3,194,97,0,597,595,
        1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,602,3,80,40,0,600,601,
        5,82,0,0,601,603,3,32,16,0,602,600,1,0,0,0,602,603,1,0,0,0,603,79,
        1,0,0,0,604,606,3,260,130,0,605,604,1,0,0,0,605,606,1,0,0,0,606,
        81,1,0,0,0,607,608,5,60,0,0,608,83,1,0,0,0,609,614,5,18,0,0,610,
        611,5,66,0,0,611,612,3,32,16,0,612,613,5,67,0,0,613,615,1,0,0,0,
        614,610,1,0,0,0,614,615,1,0,0,0,615,85,1,0,0,0,616,618,5,23,0,0,
        617,619,5,60,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,
        620,621,5,66,0,0,621,622,3,90,45,0,622,623,5,67,0,0,623,628,3,88,
        44,0,624,626,5,60,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,1,
        0,0,0,627,629,5,75,0,0,628,625,1,0,0,0,628,629,1,0,0,0,629,630,1,
        0,0,0,630,631,3,194,97,0,631,87,1,0,0,0,632,634,3,260,130,0,633,
        632,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,637,3,216,108,0,
        636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,214,107,
        0,639,638,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,643,3,218,
        109,0,642,641,1,0,0,0,642,643,1,0,0,0,643,89,1,0,0,0,644,645,3,92,
        46,0,645,646,5,78,0,0,646,648,1,0,0,0,647,644,1,0,0,0,648,651,1,
        0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,653,1,0,0,0,651,649,1,
        0,0,0,652,654,3,92,46,0,653,652,1,0,0,0,653,654,1,0,0,0,654,91,1,
        0,0,0,655,657,5,99,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,659,1,
        0,0,0,658,660,3,94,47,0,659,658,1,0,0,0,659,660,1,0,0,0,660,663,
        1,0,0,0,661,662,5,60,0,0,662,664,5,77,0,0,663,661,1,0,0,0,663,664,
        1,0,0,0,664,665,1,0,0,0,665,668,3,96,48,0,666,668,5,81,0,0,667,656,
        1,0,0,0,667,666,1,0,0,0,668,93,1,0,0,0,669,670,7,2,0,0,670,95,1,
        0,0,0,671,674,5,6,0,0,672,674,3,194,97,0,673,671,1,0,0,0,673,672,
        1,0,0,0,674,97,1,0,0,0,675,676,5,68,0,0,676,681,3,210,105,0,677,
        678,5,78,0,0,678,680,3,210,105,0,679,677,1,0,0,0,680,683,1,0,0,0,
        681,679,1,0,0,0,681,682,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,
        684,686,5,78,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,
        687,688,5,69,0,0,688,706,1,0,0,0,689,690,5,68,0,0,690,695,3,32,16,
        0,691,692,5,78,0,0,692,694,3,32,16,0,693,691,1,0,0,0,694,697,1,0,
        0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,699,1,0,0,0,697,695,1,0,
        0,0,698,700,5,78,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,
        0,0,701,702,5,69,0,0,702,706,1,0,0,0,703,704,5,68,0,0,704,706,5,
        69,0,0,705,675,1,0,0,0,705,689,1,0,0,0,705,703,1,0,0,0,706,99,1,
        0,0,0,707,710,3,122,61,0,708,710,3,102,51,0,709,707,1,0,0,0,709,
        708,1,0,0,0,710,101,1,0,0,0,711,715,3,114,57,0,712,715,3,124,62,
        0,713,715,3,148,74,0,714,711,1,0,0,0,714,712,1,0,0,0,714,713,1,0,
        0,0,715,103,1,0,0,0,716,720,3,116,58,0,717,720,3,126,63,0,718,720,
        3,150,75,0,719,716,1,0,0,0,719,717,1,0,0,0,719,718,1,0,0,0,720,105,
        1,0,0,0,721,725,3,118,59,0,722,725,3,128,64,0,723,725,3,152,76,0,
        724,721,1,0,0,0,724,722,1,0,0,0,724,723,1,0,0,0,725,107,1,0,0,0,
        726,730,3,68,34,0,727,730,3,110,55,0,728,730,3,86,43,0,729,726,1,
        0,0,0,729,727,1,0,0,0,729,728,1,0,0,0,730,109,1,0,0,0,731,732,5,
        20,0,0,732,733,5,68,0,0,733,734,3,112,56,0,734,735,5,69,0,0,735,
        111,1,0,0,0,736,737,5,99,0,0,737,738,5,60,0,0,738,740,5,78,0,0,739,
        736,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,
        744,1,0,0,0,743,741,1,0,0,0,744,745,5,99,0,0,745,746,5,60,0,0,746,
        113,1,0,0,0,747,748,5,13,0,0,748,761,3,182,91,0,749,750,5,32,0,0,
        750,761,3,182,91,0,751,752,5,41,0,0,752,761,3,182,91,0,753,754,5,
        16,0,0,754,761,3,182,91,0,755,757,5,19,0,0,756,758,3,220,110,0,757,
        756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,761,3,182,91,0,760,
        747,1,0,0,0,760,749,1,0,0,0,760,751,1,0,0,0,760,753,1,0,0,0,760,
        755,1,0,0,0,761,115,1,0,0,0,762,764,5,10,0,0,763,765,3,188,94,0,
        764,763,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,768,3,32,16,
        0,767,766,1,0,0,0,767,768,1,0,0,0,768,785,1,0,0,0,769,770,5,13,0,
        0,770,785,3,32,16,0,771,772,5,32,0,0,772,785,3,32,16,0,773,775,5,
        15,0,0,774,776,3,188,94,0,775,774,1,0,0,0,775,776,1,0,0,0,776,785,
        1,0,0,0,777,778,5,38,0,0,778,785,3,32,16,0,779,781,5,39,0,0,780,
        782,3,32,16,0,781,780,1,0,0,0,781,782,1,0,0,0,782,785,1,0,0,0,783,
        785,3,192,96,0,784,762,1,0,0,0,784,769,1,0,0,0,784,771,1,0,0,0,784,
        773,1,0,0,0,784,777,1,0,0,0,784,779,1,0,0,0,784,783,1,0,0,0,785,
        117,1,0,0,0,786,797,3,120,60,0,787,788,5,79,0,0,788,797,5,60,0,0,
        789,790,5,79,0,0,790,797,3,98,49,0,791,792,5,20,0,0,792,793,5,79,
        0,0,793,797,5,60,0,0,794,795,5,13,0,0,795,797,3,194,97,0,796,786,
        1,0,0,0,796,787,1,0,0,0,796,789,1,0,0,0,796,791,1,0,0,0,796,794,
        1,0,0,0,797,119,1,0,0,0,798,799,5,59,0,0,799,800,3,26,13,0,800,121,
        1,0,0,0,801,803,5,13,0,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,
        1,0,0,0,804,809,3,62,31,0,805,806,3,186,93,0,806,807,5,91,0,0,807,
        809,1,0,0,0,808,802,1,0,0,0,808,805,1,0,0,0,809,123,1,0,0,0,810,
        813,3,130,65,0,811,813,3,146,73,0,812,810,1,0,0,0,812,811,1,0,0,
        0,813,125,1,0,0,0,814,817,3,132,66,0,815,817,3,146,73,0,816,814,
        1,0,0,0,816,815,1,0,0,0,817,127,1,0,0,0,818,821,3,134,67,0,819,821,
        3,146,73,0,820,818,1,0,0,0,820,819,1,0,0,0,821,129,1,0,0,0,822,823,
        3,136,68,0,823,829,3,184,92,0,824,826,5,17,0,0,825,827,3,220,110,
        0,826,825,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,830,3,144,
        72,0,829,824,1,0,0,0,829,830,1,0,0,0,830,842,1,0,0,0,831,832,3,136,
        68,0,832,839,3,186,93,0,833,840,5,91,0,0,834,836,5,17,0,0,835,837,
        3,220,110,0,836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,
        840,3,144,72,0,839,833,1,0,0,0,839,834,1,0,0,0,840,842,1,0,0,0,841,
        822,1,0,0,0,841,831,1,0,0,0,842,131,1,0,0,0,843,844,3,136,68,0,844,
        850,3,140,70,0,845,847,5,17,0,0,846,848,3,220,110,0,847,846,1,0,
        0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,851,3,142,71,0,850,845,1,
        0,0,0,850,851,1,0,0,0,851,133,1,0,0,0,852,853,3,136,68,0,853,859,
        3,194,97,0,854,856,5,17,0,0,855,857,3,220,110,0,856,855,1,0,0,0,
        856,857,1,0,0,0,857,858,1,0,0,0,858,860,3,194,97,0,859,854,1,0,0,
        0,859,860,1,0,0,0,860,135,1,0,0,0,861,862,5,25,0,0,862,863,5,66,
        0,0,863,864,3,138,69,0,864,866,5,67,0,0,865,867,3,222,111,0,866,
        865,1,0,0,0,866,867,1,0,0,0,867,137,1,0,0,0,868,869,3,32,16,0,869,
        139,1,0,0,0,870,871,3,32,16,0,871,141,1,0,0,0,872,873,3,32,16,0,
        873,143,1,0,0,0,874,875,3,100,50,0,875,145,1,0,0,0,876,877,5,42,
        0,0,877,878,5,66,0,0,878,879,3,32,16,0,879,880,5,67,0,0,880,881,
        5,68,0,0,881,882,3,264,132,0,882,883,5,69,0,0,883,147,1,0,0,0,884,
        885,3,154,77,0,885,149,1,0,0,0,886,887,3,156,78,0,887,151,1,0,0,
        0,888,889,3,158,79,0,889,153,1,0,0,0,890,892,3,190,95,0,891,890,
        1,0,0,0,891,892,1,0,0,0,892,895,1,0,0,0,893,896,3,192,96,0,894,896,
        3,160,80,0,895,893,1,0,0,0,895,894,1,0,0,0,896,155,1,0,0,0,897,899,
        3,190,95,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,901,
        3,162,81,0,901,157,1,0,0,0,902,903,3,190,95,0,903,904,3,192,96,0,
        904,910,1,0,0,0,905,907,3,190,95,0,906,905,1,0,0,0,906,907,1,0,0,
        0,907,908,1,0,0,0,908,910,3,164,82,0,909,902,1,0,0,0,909,906,1,0,
        0,0,910,159,1,0,0,0,911,914,5,26,0,0,912,915,3,166,83,0,913,915,
        3,174,87,0,914,912,1,0,0,0,914,913,1,0,0,0,915,161,1,0,0,0,916,918,
        5,26,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,921,1,0,0,0,919,922,
        3,168,84,0,920,922,3,176,88,0,921,919,1,0,0,0,921,920,1,0,0,0,922,
        163,1,0,0,0,923,926,5,26,0,0,924,927,3,170,85,0,925,927,3,178,89,
        0,926,924,1,0,0,0,926,925,1,0,0,0,927,165,1,0,0,0,928,929,3,172,
        86,0,929,932,3,184,92,0,930,931,5,17,0,0,931,933,3,100,50,0,932,
        930,1,0,0,0,932,933,1,0,0,0,933,942,1,0,0,0,934,935,3,172,86,0,935,
        939,3,186,93,0,936,940,5,91,0,0,937,938,5,17,0,0,938,940,3,100,50,
        0,939,936,1,0,0,0,939,937,1,0,0,0,940,942,1,0,0,0,941,928,1,0,0,
        0,941,934,1,0,0,0,942,167,1,0,0,0,943,944,3,172,86,0,944,947,3,32,
        16,0,945,946,5,17,0,0,946,948,3,32,16,0,947,945,1,0,0,0,947,948,
        1,0,0,0,948,169,1,0,0,0,949,950,3,172,86,0,950,953,3,194,97,0,951,
        952,5,17,0,0,952,954,3,194,97,0,953,951,1,0,0,0,953,954,1,0,0,0,
        954,171,1,0,0,0,955,956,5,24,0,0,956,957,5,66,0,0,957,958,3,234,
        117,0,958,959,5,67,0,0,959,960,3,226,113,0,960,173,1,0,0,0,961,962,
        3,180,90,0,962,965,3,184,92,0,963,964,5,17,0,0,964,966,3,100,50,
        0,965,963,1,0,0,0,965,966,1,0,0,0,966,975,1,0,0,0,967,968,3,180,
        90,0,968,972,3,186,93,0,969,973,5,91,0,0,970,971,5,17,0,0,971,973,
        3,100,50,0,972,969,1,0,0,0,972,970,1,0,0,0,973,975,1,0,0,0,974,961,
        1,0,0,0,974,967,1,0,0,0,975,175,1,0,0,0,976,977,3,180,90,0,977,983,
        3,32,16,0,978,980,5,17,0,0,979,981,3,220,110,0,980,979,1,0,0,0,980,
        981,1,0,0,0,981,982,1,0,0,0,982,984,3,32,16,0,983,978,1,0,0,0,983,
        984,1,0,0,0,984,177,1,0,0,0,985,986,3,180,90,0,986,992,3,194,97,
        0,987,989,5,17,0,0,988,990,3,220,110,0,989,988,1,0,0,0,989,990,1,
        0,0,0,990,991,1,0,0,0,991,993,3,194,97,0,992,987,1,0,0,0,992,993,
        1,0,0,0,993,179,1,0,0,0,994,995,5,51,0,0,995,996,5,66,0,0,996,997,
        3,138,69,0,997,999,5,67,0,0,998,1000,3,222,111,0,999,998,1,0,0,0,
        999,1000,1,0,0,0,1000,1002,1,0,0,0,1001,1003,3,212,106,0,1002,1001,
        1,0,0,0,1002,1003,1,0,0,0,1003,181,1,0,0,0,1004,1009,3,184,92,0,
        1005,1006,3,186,93,0,1006,1007,5,91,0,0,1007,1009,1,0,0,0,1008,1004,
        1,0,0,0,1008,1005,1,0,0,0,1009,183,1,0,0,0,1010,1012,3,190,95,0,
        1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1014,
        3,192,96,0,1014,185,1,0,0,0,1015,1019,3,32,16,0,1016,1017,3,238,
        119,0,1017,1018,3,32,16,0,1018,1020,1,0,0,0,1019,1016,1,0,0,0,1019,
        1020,1,0,0,0,1020,187,1,0,0,0,1021,1022,5,77,0,0,1022,1023,5,60,
        0,0,1023,189,1,0,0,0,1024,1025,5,60,0,0,1025,1026,5,77,0,0,1026,
        191,1,0,0,0,1027,1031,5,68,0,0,1028,1030,3,100,50,0,1029,1028,1,
        0,0,0,1030,1033,1,0,0,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,
        1034,1,0,0,0,1033,1031,1,0,0,0,1034,1035,5,69,0,0,1035,193,1,0,0,
        0,1036,1038,3,246,123,0,1037,1036,1,0,0,0,1038,1041,1,0,0,0,1039,
        1037,1,0,0,0,1039,1040,1,0,0,0,1040,1042,1,0,0,0,1041,1039,1,0,0,
        0,1042,1043,3,196,98,0,1043,195,1,0,0,0,1044,1047,3,22,11,0,1045,
        1046,5,75,0,0,1046,1048,3,194,97,0,1047,1045,1,0,0,0,1047,1048,1,
        0,0,0,1048,197,1,0,0,0,1049,1050,5,61,0,0,1050,199,1,0,0,0,1051,
        1052,5,62,0,0,1052,201,1,0,0,0,1053,1054,5,63,0,0,1054,203,1,0,0,
        0,1055,1056,5,64,0,0,1056,205,1,0,0,0,1057,1058,5,65,0,0,1058,207,
        1,0,0,0,1059,1060,5,66,0,0,1060,1061,3,32,16,0,1061,1062,5,67,0,
        0,1062,209,1,0,0,0,1063,1064,5,79,0,0,1064,1065,5,60,0,0,1065,1066,
        5,82,0,0,1066,1067,3,32,16,0,1067,211,1,0,0,0,1068,1069,5,77,0,0,
        1069,1070,5,66,0,0,1070,1071,3,186,93,0,1071,1072,5,67,0,0,1072,
        213,1,0,0,0,1073,1074,5,28,0,0,1074,1075,5,66,0,0,1075,1076,3,32,
        16,0,1076,1077,5,67,0,0,1077,215,1,0,0,0,1078,1079,5,1,0,0,1079,
        1080,5,66,0,0,1080,1081,3,32,16,0,1081,1082,5,67,0,0,1082,217,1,
        0,0,0,1083,1084,5,11,0,0,1084,1085,5,66,0,0,1085,1086,3,32,16,0,
        1086,1087,5,67,0,0,1087,219,1,0,0,0,1088,1089,5,89,0,0,1089,1090,
        5,60,0,0,1090,1091,5,89,0,0,1091,221,1,0,0,0,1092,1094,5,89,0,0,
        1093,1095,5,93,0,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,1096,
        1,0,0,0,1096,1097,5,60,0,0,1097,1098,5,89,0,0,1098,223,1,0,0,0,1099,
        1101,5,89,0,0,1100,1102,5,93,0,0,1101,1100,1,0,0,0,1101,1102,1,0,
        0,0,1102,1103,1,0,0,0,1103,1106,5,60,0,0,1104,1105,5,78,0,0,1105,
        1107,5,60,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1108,1,0,
        0,0,1108,1109,5,89,0,0,1109,225,1,0,0,0,1110,1112,5,89,0,0,1111,
        1113,5,93,0,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,
        0,0,1114,1122,5,60,0,0,1115,1117,5,78,0,0,1116,1118,5,93,0,0,1117,
        1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,1119,1121,5,60,
        0,0,1120,1115,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,
        1,0,0,0,1123,1126,1,0,0,0,1124,1122,1,0,0,0,1125,1127,5,78,0,0,1126,
        1125,1,0,0,0,1126,1127,1,0,0,0,1127,1128,1,0,0,0,1128,1129,5,89,
        0,0,1129,227,1,0,0,0,1130,1132,5,26,0,0,1131,1130,1,0,0,0,1131,1132,
        1,0,0,0,1132,1133,1,0,0,0,1133,1134,3,230,115,0,1134,1136,5,84,0,
        0,1135,1137,3,224,112,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,
        1138,1,0,0,0,1138,1139,3,186,93,0,1139,229,1,0,0,0,1140,1145,3,232,
        116,0,1141,1142,5,78,0,0,1142,1144,3,232,116,0,1143,1141,1,0,0,0,
        1144,1147,1,0,0,0,1145,1143,1,0,0,0,1145,1146,1,0,0,0,1146,1149,
        1,0,0,0,1147,1145,1,0,0,0,1148,1150,5,78,0,0,1149,1148,1,0,0,0,1149,
        1150,1,0,0,0,1150,1153,1,0,0,0,1151,1153,5,17,0,0,1152,1140,1,0,
        0,0,1152,1151,1,0,0,0,1153,231,1,0,0,0,1154,1157,3,32,16,0,1155,
        1156,5,81,0,0,1156,1158,3,32,16,0,1157,1155,1,0,0,0,1157,1158,1,
        0,0,0,1158,233,1,0,0,0,1159,1164,3,236,118,0,1160,1161,5,78,0,0,
        1161,1163,3,236,118,0,1162,1160,1,0,0,0,1163,1166,1,0,0,0,1164,1162,
        1,0,0,0,1164,1165,1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,1167,
        1169,5,78,0,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,235,1,0,0,
        0,1170,1171,3,32,16,0,1171,237,1,0,0,0,1172,1173,7,3,0,0,1173,239,
        1,0,0,0,1174,1175,7,4,0,0,1175,241,1,0,0,0,1176,1179,5,54,0,0,1177,
        1179,3,244,122,0,1178,1176,1,0,0,0,1178,1177,1,0,0,0,1179,243,1,
        0,0,0,1180,1186,5,35,0,0,1181,1183,5,12,0,0,1182,1184,3,220,110,
        0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1186,1,0,0,0,1185,1180,
        1,0,0,0,1185,1181,1,0,0,0,1186,245,1,0,0,0,1187,1206,5,95,0,0,1188,
        1189,5,5,0,0,1189,1206,5,87,0,0,1190,1194,3,250,125,0,1191,1193,
        3,252,126,0,1192,1191,1,0,0,0,1193,1196,1,0,0,0,1194,1192,1,0,0,
        0,1194,1195,1,0,0,0,1195,1206,1,0,0,0,1196,1194,1,0,0,0,1197,1201,
        3,254,127,0,1198,1200,3,256,128,0,1199,1198,1,0,0,0,1200,1203,1,
        0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1206,1,0,0,0,1203,
        1201,1,0,0,0,1204,1206,3,248,124,0,1205,1187,1,0,0,0,1205,1188,1,
        0,0,0,1205,1190,1,0,0,0,1205,1197,1,0,0,0,1205,1204,1,0,0,0,1206,
        247,1,0,0,0,1207,1208,5,70,0,0,1208,1211,3,32,16,0,1209,1210,5,77,
        0,0,1210,1212,3,32,16,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,
        1213,1,0,0,0,1213,1214,5,71,0,0,1214,249,1,0,0,0,1215,1218,5,70,
        0,0,1216,1217,5,77,0,0,1217,1219,3,32,16,0,1218,1216,1,0,0,0,1218,
        1219,1,0,0,0,1219,1220,1,0,0,0,1220,1221,5,71,0,0,1221,251,1,0,0,
        0,1222,1228,3,260,130,0,1223,1228,3,216,108,0,1224,1228,5,3,0,0,
        1225,1228,5,14,0,0,1226,1228,5,50,0,0,1227,1222,1,0,0,0,1227,1223,
        1,0,0,0,1227,1224,1,0,0,0,1227,1225,1,0,0,0,1227,1226,1,0,0,0,1228,
        253,1,0,0,0,1229,1241,5,93,0,0,1230,1231,5,93,0,0,1231,1241,5,93,
        0,0,1232,1233,5,70,0,0,1233,1237,5,93,0,0,1234,1238,5,27,0,0,1235,
        1236,5,77,0,0,1236,1238,3,32,16,0,1237,1234,1,0,0,0,1237,1235,1,
        0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1241,5,71,0,0,1240,
        1229,1,0,0,0,1240,1230,1,0,0,0,1240,1232,1,0,0,0,1241,255,1,0,0,
        0,1242,1248,3,262,131,0,1243,1248,3,216,108,0,1244,1248,5,3,0,0,
        1245,1248,5,14,0,0,1246,1248,5,50,0,0,1247,1242,1,0,0,0,1247,1243,
        1,0,0,0,1247,1244,1,0,0,0,1247,1245,1,0,0,0,1247,1246,1,0,0,0,1248,
        257,1,0,0,0,1249,1250,5,70,0,0,1250,1259,3,32,16,0,1251,1257,5,80,
        0,0,1252,1255,3,32,16,0,1253,1254,5,77,0,0,1254,1256,3,32,16,0,1255,
        1253,1,0,0,0,1255,1256,1,0,0,0,1256,1258,1,0,0,0,1257,1252,1,0,0,
        0,1257,1258,1,0,0,0,1258,1260,1,0,0,0,1259,1251,1,0,0,0,1259,1260,
        1,0,0,0,1260,1261,1,0,0,0,1261,1262,5,71,0,0,1262,1268,1,0,0,0,1263,
        1264,5,79,0,0,1264,1268,5,60,0,0,1265,1268,5,96,0,0,1266,1268,5,
        97,0,0,1267,1249,1,0,0,0,1267,1263,1,0,0,0,1267,1265,1,0,0,0,1267,
        1266,1,0,0,0,1268,259,1,0,0,0,1269,1270,5,2,0,0,1270,1271,5,66,0,
        0,1271,1272,3,32,16,0,1272,1273,5,67,0,0,1273,261,1,0,0,0,1274,1275,
        5,2,0,0,1275,1276,5,66,0,0,1276,1282,3,32,16,0,1277,1278,5,77,0,
        0,1278,1279,3,32,16,0,1279,1280,5,77,0,0,1280,1281,3,32,16,0,1281,
        1283,1,0,0,0,1282,1277,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,
        0,1284,1285,5,67,0,0,1285,263,1,0,0,0,1286,1287,3,228,114,0,1287,
        1288,5,78,0,0,1288,1290,1,0,0,0,1289,1286,1,0,0,0,1290,1293,1,0,
        0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,1295,1,0,0,0,1293,1291,
        1,0,0,0,1294,1296,3,228,114,0,1295,1294,1,0,0,0,1295,1296,1,0,0,
        0,1296,265,1,0,0,0,1297,1298,5,64,0,0,1298,1300,5,78,0,0,1299,1297,
        1,0,0,0,1300,1303,1,0,0,0,1301,1299,1,0,0,0,1301,1302,1,0,0,0,1302,
        1305,1,0,0,0,1303,1301,1,0,0,0,1304,1306,5,64,0,0,1305,1304,1,0,
        0,0,1305,1306,1,0,0,0,1306,267,1,0,0,0,1307,1309,5,98,0,0,1308,1307,
        1,0,0,0,1309,1312,1,0,0,0,1310,1308,1,0,0,0,1310,1311,1,0,0,0,1311,
        1313,1,0,0,0,1312,1310,1,0,0,0,1313,1314,3,270,135,0,1314,269,1,
        0,0,0,1315,1319,3,76,38,0,1316,1318,3,272,136,0,1317,1316,1,0,0,
        0,1318,1321,1,0,0,0,1319,1317,1,0,0,0,1319,1320,1,0,0,0,1320,271,
        1,0,0,0,1321,1319,1,0,0,0,1322,1332,3,276,138,0,1323,1332,3,278,
        139,0,1324,1326,5,99,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,
        1328,1,0,0,0,1327,1329,5,37,0,0,1328,1327,1,0,0,0,1328,1329,1,0,
        0,0,1329,1330,1,0,0,0,1330,1332,3,52,26,0,1331,1322,1,0,0,0,1331,
        1323,1,0,0,0,1331,1325,1,0,0,0,1332,273,1,0,0,0,1333,1335,3,56,28,
        0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1339,
        3,86,43,0,1337,1340,5,91,0,0,1338,1340,3,192,96,0,1339,1337,1,0,
        0,0,1339,1338,1,0,0,0,1340,275,1,0,0,0,1341,1343,5,43,0,0,1342,1344,
        7,5,0,0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,
        1346,3,192,96,0,1346,277,1,0,0,0,1347,1348,5,13,0,0,1348,1349,3,
        192,96,0,1349,279,1,0,0,0,174,289,294,298,303,310,326,344,348,355,
        359,366,375,378,382,393,400,409,417,426,435,443,451,459,465,475,
        483,486,489,496,500,505,507,515,520,525,528,531,536,543,551,558,
        567,570,573,575,582,586,589,592,597,602,605,614,618,625,628,633,
        636,639,642,649,653,656,659,663,667,673,681,685,695,699,705,709,
        714,719,724,729,741,757,760,764,767,775,781,784,796,802,808,812,
        816,820,826,829,836,839,841,847,850,856,859,866,891,895,898,906,
        909,914,917,921,926,932,939,941,947,953,965,972,974,980,983,989,
        992,999,1002,1008,1011,1019,1031,1039,1047,1094,1101,1106,1112,1117,
        1122,1126,1131,1136,1145,1149,1152,1157,1164,1168,1178,1183,1185,
        1194,1201,1205,1211,1218,1227,1237,1240,1247,1255,1257,1259,1267,
        1282,1291,1295,1301,1305,1310,1319,1325,1328,1331,1334,1339,1343
    ]

class ZigParser ( Parser ):

    grammarFileName = "ZigParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'addrspace'", "'align'", "'allowzero'", 
                     "'and'", "'anyframe'", "'anytype'", "'asm'", "'async'", 
                     "'await'", "'break'", "'callconv'", "'catch'", "'comptime'", 
                     "'const'", "'continue'", "'defer'", "'else'", "'enum'", 
                     "'errdefer'", "'error'", "'export'", "'extern'", "'fn'", 
                     "'for'", "'if'", "'inline'", "'c'", "'linksection'", 
                     "'noalias'", "'noinline'", "'noreturn'", "'nosuspend'", 
                     "'opaque'", "'or'", "'orelse'", "'packed'", "'pub'", 
                     "'resume'", "'return'", "'struct'", "'suspend'", "'switch'", 
                     "'test'", "'threadlocal'", "'try'", "'union'", "'unreachable'", 
                     "'usingnamespace'", "'var'", "'volatile'", "'while'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "'&'", "'@'", "'\\\\'", "'!'", "'^'", 
                     "':'", "','", "'.'", "'..'", "'...'", "'='", "'=='", 
                     "'=>'", "'\\'", "'-'", "'->'", "'-%'", "'|'", "'+'", 
                     "';'", "'/'", "'*'", "'~'", "'?'", "'.*'", "'.?'" ]

    symbolicNames = [ "<INVALID>", "AddrSpace", "Align", "AllowZero", "And", 
                      "AnyFrame", "AnyType", "Asm", "Async", "Await", "Break", 
                      "CallConv", "Catch", "CompTime", "Const", "Continue", 
                      "Defer", "Else", "Enum", "ErrDefer", "Error", "Export", 
                      "Extern", "Fn", "For", "If", "Inline", "LetterC", 
                      "LinkSection", "NoAlias", "NoInline", "NoReturn", 
                      "NoSuspend", "Opaque", "Or", "OrElse", "Packed", "Pub", 
                      "Resume", "Return", "Struct", "Suspend", "Switch", 
                      "Test", "ThreadLocal", "Try", "Union", "Unreachable", 
                      "UsingNamespace", "Var", "Volatile", "While", "AssignOp", 
                      "CompareOp", "BitwiseOp", "BitShiftOp", "AdditionOp", 
                      "MultiplyOp", "PrefixOp", "BuiltinIdent", "Ident", 
                      "Integer", "Float", "Char", "SingleString", "LineString", 
                      "LParen", "RParen", "LBrace", "RBrace", "LBrack", 
                      "RBrack", "Amp", "At", "BackSlash2", "Bang", "Caret", 
                      "Colon", "Comma", "Dot", "Dot2", "Ellipsis", "Equal", 
                      "Equal2", "EqualArrow", "Esc", "Minus", "MinusArrow", 
                      "MinusPct", "Pipe", "Plus", "Semi", "Slash", "Star", 
                      "Tilde", "Question", "DotStar", "DotQue", "ContainerDocComment", 
                      "DocComment", "LineComment", "Ws" ]

    RULE_start = 0
    RULE_primaryTypeExpression = 1
    RULE_primaryExpression = 2
    RULE_asmExpression = 3
    RULE_asmOutput = 4
    RULE_asmOutputItem = 5
    RULE_asmInput = 6
    RULE_asmInputItem = 7
    RULE_asmClobbers = 8
    RULE_asmOutputList = 9
    RULE_asmInputList = 10
    RULE_suffixExpression = 11
    RULE_designatorExpression = 12
    RULE_fnCallArguments = 13
    RULE_argumentExpressionList = 14
    RULE_compoundLiteral = 15
    RULE_expression = 16
    RULE_boolOrExpression = 17
    RULE_boolAndExpression = 18
    RULE_compareExpression = 19
    RULE_bitwiseExpression = 20
    RULE_bitShiftExpression = 21
    RULE_additionExpression = 22
    RULE_multiplyExpression = 23
    RULE_prefixExpression = 24
    RULE_constantExpression = 25
    RULE_declaration = 26
    RULE_topVarDeclaration = 27
    RULE_fnProtoDeclarationEx = 28
    RULE_varDeclarationEx = 29
    RULE_varName = 30
    RULE_varDeclaration = 31
    RULE_varDeclarationSpecifiers = 32
    RULE_typeName = 33
    RULE_containerDeclaration = 34
    RULE_containerDeclarationAuto = 35
    RULE_containerDeclarationType = 36
    RULE_structOrUnionSpecifier = 37
    RULE_fieldList = 38
    RULE_field = 39
    RULE_fieldDeclarationSpecifiers = 40
    RULE_fieldName = 41
    RULE_enumSpecifier = 42
    RULE_fnProtoDeclaration = 43
    RULE_fnProtoDeclarationSpecifiers = 44
    RULE_parameterDeclarationList = 45
    RULE_parameterDeclaration = 46
    RULE_parameterDeclarationSpecifier = 47
    RULE_parameterType = 48
    RULE_initList = 49
    RULE_statement = 50
    RULE_primaryBlockStatement = 51
    RULE_primaryBlockExpression = 52
    RULE_primaryTypeStatement = 53
    RULE_primaryTypeDeclaration = 54
    RULE_errorSetDeclaration = 55
    RULE_identList = 56
    RULE_compoundStatement = 57
    RULE_compoundExpression = 58
    RULE_compoundTypeExpression = 59
    RULE_builtinCallExpression = 60
    RULE_expressionStatement = 61
    RULE_selectionStatement = 62
    RULE_selectionExpression = 63
    RULE_selectionTypeExpression = 64
    RULE_ifStatement = 65
    RULE_ifExpression = 66
    RULE_ifTypeExpression = 67
    RULE_ifPrefix = 68
    RULE_condExpression = 69
    RULE_thenExpression = 70
    RULE_elseExpression = 71
    RULE_elseStatement = 72
    RULE_switchExpression = 73
    RULE_iterationStatement = 74
    RULE_iterationExpression = 75
    RULE_iterationTypeExpression = 76
    RULE_labeledStatement = 77
    RULE_labeledExpression = 78
    RULE_labeledTypeExpression = 79
    RULE_loopStatement = 80
    RULE_loopExpression = 81
    RULE_loopTypeExpression = 82
    RULE_forStatement = 83
    RULE_forExpression = 84
    RULE_forTypeExpression = 85
    RULE_forPrefix = 86
    RULE_whileStatement = 87
    RULE_whileExpression = 88
    RULE_whileTypeExpression = 89
    RULE_whilePrefix = 90
    RULE_blockExpressionStatement = 91
    RULE_blockExpression = 92
    RULE_assignExpression = 93
    RULE_breakLabel = 94
    RULE_blockLabel = 95
    RULE_block = 96
    RULE_typeExpression = 97
    RULE_errorUnionExpression = 98
    RULE_integerLiteral = 99
    RULE_floatingLiteral = 100
    RULE_charLiteral = 101
    RULE_singleStringLiteral = 102
    RULE_lineStringLiteral = 103
    RULE_groupedExpression = 104
    RULE_fieldInit = 105
    RULE_whileContinueExpression = 106
    RULE_linkSection = 107
    RULE_addrSpace = 108
    RULE_callConv = 109
    RULE_payload = 110
    RULE_ptrPayload = 111
    RULE_ptrIndexPayload = 112
    RULE_ptrListPayload = 113
    RULE_switchProng = 114
    RULE_switchCase = 115
    RULE_switchItem = 116
    RULE_forArgumentsList = 117
    RULE_forItem = 118
    RULE_assignOpExpression = 119
    RULE_compareOpExpression = 120
    RULE_bitwiseOpExpression = 121
    RULE_bitwiseKwExpression = 122
    RULE_prefixTypeOp = 123
    RULE_arrayTypeStart = 124
    RULE_sliceTypeStart = 125
    RULE_sliceTypeRest = 126
    RULE_ptrTypeStart = 127
    RULE_ptrTypeRest = 128
    RULE_suffixOp = 129
    RULE_byteAlign = 130
    RULE_byteAlign3 = 131
    RULE_switchProngList = 132
    RULE_stringList = 133
    RULE_containerUnit = 134
    RULE_containerMembers = 135
    RULE_containerDeclarationList = 136
    RULE_topFnDefinition = 137
    RULE_testDeclaration = 138
    RULE_compTimeDeclaration = 139

    ruleNames =  [ "start", "primaryTypeExpression", "primaryExpression", 
                   "asmExpression", "asmOutput", "asmOutputItem", "asmInput", 
                   "asmInputItem", "asmClobbers", "asmOutputList", "asmInputList", 
                   "suffixExpression", "designatorExpression", "fnCallArguments", 
                   "argumentExpressionList", "compoundLiteral", "expression", 
                   "boolOrExpression", "boolAndExpression", "compareExpression", 
                   "bitwiseExpression", "bitShiftExpression", "additionExpression", 
                   "multiplyExpression", "prefixExpression", "constantExpression", 
                   "declaration", "topVarDeclaration", "fnProtoDeclarationEx", 
                   "varDeclarationEx", "varName", "varDeclaration", "varDeclarationSpecifiers", 
                   "typeName", "containerDeclaration", "containerDeclarationAuto", 
                   "containerDeclarationType", "structOrUnionSpecifier", 
                   "fieldList", "field", "fieldDeclarationSpecifiers", "fieldName", 
                   "enumSpecifier", "fnProtoDeclaration", "fnProtoDeclarationSpecifiers", 
                   "parameterDeclarationList", "parameterDeclaration", "parameterDeclarationSpecifier", 
                   "parameterType", "initList", "statement", "primaryBlockStatement", 
                   "primaryBlockExpression", "primaryTypeStatement", "primaryTypeDeclaration", 
                   "errorSetDeclaration", "identList", "compoundStatement", 
                   "compoundExpression", "compoundTypeExpression", "builtinCallExpression", 
                   "expressionStatement", "selectionStatement", "selectionExpression", 
                   "selectionTypeExpression", "ifStatement", "ifExpression", 
                   "ifTypeExpression", "ifPrefix", "condExpression", "thenExpression", 
                   "elseExpression", "elseStatement", "switchExpression", 
                   "iterationStatement", "iterationExpression", "iterationTypeExpression", 
                   "labeledStatement", "labeledExpression", "labeledTypeExpression", 
                   "loopStatement", "loopExpression", "loopTypeExpression", 
                   "forStatement", "forExpression", "forTypeExpression", 
                   "forPrefix", "whileStatement", "whileExpression", "whileTypeExpression", 
                   "whilePrefix", "blockExpressionStatement", "blockExpression", 
                   "assignExpression", "breakLabel", "blockLabel", "block", 
                   "typeExpression", "errorUnionExpression", "integerLiteral", 
                   "floatingLiteral", "charLiteral", "singleStringLiteral", 
                   "lineStringLiteral", "groupedExpression", "fieldInit", 
                   "whileContinueExpression", "linkSection", "addrSpace", 
                   "callConv", "payload", "ptrPayload", "ptrIndexPayload", 
                   "ptrListPayload", "switchProng", "switchCase", "switchItem", 
                   "forArgumentsList", "forItem", "assignOpExpression", 
                   "compareOpExpression", "bitwiseOpExpression", "bitwiseKwExpression", 
                   "prefixTypeOp", "arrayTypeStart", "sliceTypeStart", "sliceTypeRest", 
                   "ptrTypeStart", "ptrTypeRest", "suffixOp", "byteAlign", 
                   "byteAlign3", "switchProngList", "stringList", "containerUnit", 
                   "containerMembers", "containerDeclarationList", "topFnDefinition", 
                   "testDeclaration", "compTimeDeclaration" ]

    EOF = Token.EOF
    AddrSpace=1
    Align=2
    AllowZero=3
    And=4
    AnyFrame=5
    AnyType=6
    Asm=7
    Async=8
    Await=9
    Break=10
    CallConv=11
    Catch=12
    CompTime=13
    Const=14
    Continue=15
    Defer=16
    Else=17
    Enum=18
    ErrDefer=19
    Error=20
    Export=21
    Extern=22
    Fn=23
    For=24
    If=25
    Inline=26
    LetterC=27
    LinkSection=28
    NoAlias=29
    NoInline=30
    NoReturn=31
    NoSuspend=32
    Opaque=33
    Or=34
    OrElse=35
    Packed=36
    Pub=37
    Resume=38
    Return=39
    Struct=40
    Suspend=41
    Switch=42
    Test=43
    ThreadLocal=44
    Try=45
    Union=46
    Unreachable=47
    UsingNamespace=48
    Var=49
    Volatile=50
    While=51
    AssignOp=52
    CompareOp=53
    BitwiseOp=54
    BitShiftOp=55
    AdditionOp=56
    MultiplyOp=57
    PrefixOp=58
    BuiltinIdent=59
    Ident=60
    Integer=61
    Float=62
    Char=63
    SingleString=64
    LineString=65
    LParen=66
    RParen=67
    LBrace=68
    RBrace=69
    LBrack=70
    RBrack=71
    Amp=72
    At=73
    BackSlash2=74
    Bang=75
    Caret=76
    Colon=77
    Comma=78
    Dot=79
    Dot2=80
    Ellipsis=81
    Equal=82
    Equal2=83
    EqualArrow=84
    Esc=85
    Minus=86
    MinusArrow=87
    MinusPct=88
    Pipe=89
    Plus=90
    Semi=91
    Slash=92
    Star=93
    Tilde=94
    Question=95
    DotStar=96
    DotQue=97
    ContainerDocComment=98
    DocComment=99
    LineComment=100
    Ws=101

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerUnit(self):
            return self.getTypedRuleContext(ZigParser.ContainerUnitContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_start

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart" ):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)




    def start(self):

        localctx = ZigParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.containerUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnyFrame(self):
            return self.getToken(ZigParser.AnyFrame, 0)

        def Unreachable(self):
            return self.getToken(ZigParser.Unreachable, 0)

        def typeName(self):
            return self.getTypedRuleContext(ZigParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(ZigParser.ConstantExpressionContext,0)


        def groupedExpression(self):
            return self.getTypedRuleContext(ZigParser.GroupedExpressionContext,0)


        def primaryTypeStatement(self):
            return self.getTypedRuleContext(ZigParser.PrimaryTypeStatementContext,0)


        def primaryTypeDeclaration(self):
            return self.getTypedRuleContext(ZigParser.PrimaryTypeDeclarationContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryTypeExpression" ):
                return visitor.visitPrimaryTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryTypeExpression(self):

        localctx = ZigParser.PrimaryTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryTypeExpression)
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 282
                self.match(ZigParser.AnyFrame)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 283
                self.match(ZigParser.Unreachable)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 284
                self.typeName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 285
                self.constantExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 286
                self.groupedExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 287
                self.primaryTypeStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 288
                self.primaryTypeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asmExpression(self):
            return self.getTypedRuleContext(ZigParser.AsmExpressionContext,0)


        def primaryBlockExpression(self):
            return self.getTypedRuleContext(ZigParser.PrimaryBlockExpressionContext,0)


        def compoundLiteral(self):
            return self.getTypedRuleContext(ZigParser.CompoundLiteralContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = ZigParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_primaryExpression)
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self.asmExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.primaryBlockExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.compoundLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(ZigParser.Asm, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def asmOutput(self):
            return self.getTypedRuleContext(ZigParser.AsmOutputContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmExpression" ):
                return visitor.visitAsmExpression(self)
            else:
                return visitor.visitChildren(self)




    def asmExpression(self):

        localctx = ZigParser.AsmExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_asmExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(ZigParser.Asm)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 297
                self.match(ZigParser.Volatile)


            self.state = 300
            self.match(ZigParser.LParen)
            self.state = 301
            self.expression()
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 302
                self.asmOutput()


            self.state = 305
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmOutputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def asmOutputList(self):
            return self.getTypedRuleContext(ZigParser.AsmOutputListContext,0)


        def asmInput(self):
            return self.getTypedRuleContext(ZigParser.AsmInputContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmOutput

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmOutput" ):
                return visitor.visitAsmOutput(self)
            else:
                return visitor.visitChildren(self)




    def asmOutput(self):

        localctx = ZigParser.AsmOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_asmOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(ZigParser.Colon)
            self.state = 308
            self.asmOutputList()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 309
                self.asmInput()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmOutputItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def MinusArrow(self):
            return self.getToken(ZigParser.MinusArrow, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmOutputItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmOutputItem" ):
                return visitor.visitAsmOutputItem(self)
            else:
                return visitor.visitChildren(self)




    def asmOutputItem(self):

        localctx = ZigParser.AsmOutputItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_asmOutputItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(ZigParser.LBrack)
            self.state = 313
            self.match(ZigParser.Ident)
            self.state = 314
            self.match(ZigParser.RBrack)
            self.state = 315
            self.match(ZigParser.SingleString)
            self.state = 316
            self.match(ZigParser.LParen)

            self.state = 317
            self.match(ZigParser.MinusArrow)
            self.state = 318
            self.typeExpression()
            self.state = 319
            self.match(ZigParser.Ident)
            self.state = 321
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmInputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def asmInputList(self):
            return self.getTypedRuleContext(ZigParser.AsmInputListContext,0)


        def asmClobbers(self):
            return self.getTypedRuleContext(ZigParser.AsmClobbersContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmInput

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmInput" ):
                return visitor.visitAsmInput(self)
            else:
                return visitor.visitChildren(self)




    def asmInput(self):

        localctx = ZigParser.AsmInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_asmInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(ZigParser.Colon)
            self.state = 324
            self.asmInputList()
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 325
                self.asmClobbers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmInputItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_asmInputItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmInputItem" ):
                return visitor.visitAsmInputItem(self)
            else:
                return visitor.visitChildren(self)




    def asmInputItem(self):

        localctx = ZigParser.AsmInputItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_asmInputItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(ZigParser.LBrack)
            self.state = 329
            self.match(ZigParser.Ident)
            self.state = 330
            self.match(ZigParser.RBrack)
            self.state = 331
            self.match(ZigParser.SingleString)
            self.state = 332
            self.match(ZigParser.LParen)
            self.state = 333
            self.expression()
            self.state = 334
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmClobbersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def stringList(self):
            return self.getTypedRuleContext(ZigParser.StringListContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_asmClobbers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmClobbers" ):
                return visitor.visitAsmClobbers(self)
            else:
                return visitor.visitChildren(self)




    def asmClobbers(self):

        localctx = ZigParser.AsmClobbersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_asmClobbers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(ZigParser.Colon)
            self.state = 337
            self.stringList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmOutputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asmOutputItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AsmOutputItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.AsmOutputItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_asmOutputList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmOutputList" ):
                return visitor.visitAsmOutputList(self)
            else:
                return visitor.visitChildren(self)




    def asmOutputList(self):

        localctx = ZigParser.AsmOutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_asmOutputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 339
                    self.asmOutputItem()
                    self.state = 340
                    self.match(ZigParser.Comma) 
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 347
                self.asmOutputItem()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmInputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asmInputItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AsmInputItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.AsmInputItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_asmInputList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmInputList" ):
                return visitor.visitAsmInputList(self)
            else:
                return visitor.visitChildren(self)




    def asmInputList(self):

        localctx = ZigParser.AsmInputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_asmInputList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 350
                    self.asmInputItem()
                    self.state = 351
                    self.match(ZigParser.Comma) 
                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 358
                self.asmInputItem()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Async(self):
            return self.getToken(ZigParser.Async, 0)

        def primaryTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.PrimaryTypeExpressionContext,0)


        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def suffixOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SuffixOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.SuffixOpContext,i)


        def designatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.DesignatorExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.DesignatorExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_suffixExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixExpression" ):
                return visitor.visitSuffixExpression(self)
            else:
                return visitor.visitChildren(self)




    def suffixExpression(self):

        localctx = ZigParser.SuffixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_suffixExpression)
        self._la = 0 # Token type
        try:
            self.state = 378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 361
                self.match(ZigParser.Async)
                self.state = 362
                self.primaryTypeExpression()
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 201327105) != 0):
                    self.state = 363
                    self.suffixOp()
                    self.state = 368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 369
                self.fnCallArguments()
                pass
            elif token in [5, 13, 18, 20, 22, 23, 25, 26, 33, 36, 40, 42, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.primaryTypeExpression()
                self.state = 375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 372
                        self.designatorExpression() 
                    self.state = 377
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suffixOp(self):
            return self.getTypedRuleContext(ZigParser.SuffixOpContext,0)


        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_designatorExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorExpression" ):
                return visitor.visitDesignatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def designatorExpression(self):

        localctx = ZigParser.DesignatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_designatorExpression)
        try:
            self.state = 382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 79, 96, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.suffixOp()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 381
                self.fnCallArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(ZigParser.ArgumentExpressionListContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnCallArguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnCallArguments" ):
                return visitor.visitFnCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def fnCallArguments(self):

        localctx = ZigParser.FnCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fnCallArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(ZigParser.LParen)
            self.state = 385
            self.argumentExpressionList()
            self.state = 386
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_argumentExpressionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpressionList" ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpressionList(self):

        localctx = ZigParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_argumentExpressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 388
                    self.expression()
                    self.state = 389
                    self.match(ZigParser.Comma) 
                self.state = 395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 396
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def initList(self):
            return self.getTypedRuleContext(ZigParser.InitListContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundLiteral" ):
                return visitor.visitCompoundLiteral(self)
            else:
                return visitor.visitChildren(self)




    def compoundLiteral(self):

        localctx = ZigParser.CompoundLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_compoundLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.typeExpression()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 399
                self.initList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolOrExpression(self):
            return self.getTypedRuleContext(ZigParser.BoolOrExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = ZigParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.boolOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BoolAndExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BoolAndExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Or)
            else:
                return self.getToken(ZigParser.Or, i)

        def getRuleIndex(self):
            return ZigParser.RULE_boolOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolOrExpression" ):
                return visitor.visitBoolOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def boolOrExpression(self):

        localctx = ZigParser.BoolOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_boolOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.boolAndExpression()
            self.state = 409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 405
                    self.match(ZigParser.Or)
                    self.state = 406
                    self.boolAndExpression() 
                self.state = 411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compareExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.CompareExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.CompareExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.And)
            else:
                return self.getToken(ZigParser.And, i)

        def getRuleIndex(self):
            return ZigParser.RULE_boolAndExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolAndExpression" ):
                return visitor.visitBoolAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def boolAndExpression(self):

        localctx = ZigParser.BoolAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_boolAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.compareExpression()
            self.state = 417
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 413
                    self.match(ZigParser.And)
                    self.state = 414
                    self.compareExpression() 
                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitwiseExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitwiseExpressionContext,i)


        def compareOpExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.CompareOpExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.CompareOpExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_compareExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareExpression" ):
                return visitor.visitCompareExpression(self)
            else:
                return visitor.visitChildren(self)




    def compareExpression(self):

        localctx = ZigParser.CompareExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_compareExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.bitwiseExpression()
            self.state = 426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 421
                    self.compareOpExpression()
                    self.state = 422
                    self.bitwiseExpression() 
                self.state = 428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitShiftExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitShiftExpressionContext,i)


        def bitwiseOpExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.BitwiseOpExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.BitwiseOpExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseExpression" ):
                return visitor.visitBitwiseExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseExpression(self):

        localctx = ZigParser.BitwiseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bitwiseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.bitShiftExpression()
            self.state = 435
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 430
                    self.bitwiseOpExpression()
                    self.state = 431
                    self.bitShiftExpression() 
                self.state = 437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additionExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.AdditionExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.AdditionExpressionContext,i)


        def BitShiftOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.BitShiftOp)
            else:
                return self.getToken(ZigParser.BitShiftOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_bitShiftExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitShiftExpression" ):
                return visitor.visitBitShiftExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitShiftExpression(self):

        localctx = ZigParser.BitShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_bitShiftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.additionExpression()
            self.state = 443
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 439
                    self.match(ZigParser.BitShiftOp)
                    self.state = 440
                    self.additionExpression() 
                self.state = 445
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.MultiplyExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.MultiplyExpressionContext,i)


        def AdditionOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.AdditionOp)
            else:
                return self.getToken(ZigParser.AdditionOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_additionExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditionExpression" ):
                return visitor.visitAdditionExpression(self)
            else:
                return visitor.visitChildren(self)




    def additionExpression(self):

        localctx = ZigParser.AdditionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_additionExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.multiplyExpression()
            self.state = 451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 447
                    self.match(ZigParser.AdditionOp)
                    self.state = 448
                    self.multiplyExpression() 
                self.state = 453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PrefixExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.PrefixExpressionContext,i)


        def MultiplyOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.MultiplyOp)
            else:
                return self.getToken(ZigParser.MultiplyOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_multiplyExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyExpression" ):
                return visitor.visitMultiplyExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplyExpression(self):

        localctx = ZigParser.MultiplyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_multiplyExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.prefixExpression()
            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 455
                    self.match(ZigParser.MultiplyOp)
                    self.state = 456
                    self.prefixExpression() 
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(ZigParser.PrimaryExpressionContext,0)


        def PrefixOp(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.PrefixOp)
            else:
                return self.getToken(ZigParser.PrefixOp, i)

        def getRuleIndex(self):
            return ZigParser.RULE_prefixExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)




    def prefixExpression(self):

        localctx = ZigParser.PrefixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_prefixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 462
                self.match(ZigParser.PrefixOp)
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 468
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(ZigParser.IntegerLiteralContext,0)


        def floatingLiteral(self):
            return self.getTypedRuleContext(ZigParser.FloatingLiteralContext,0)


        def charLiteral(self):
            return self.getTypedRuleContext(ZigParser.CharLiteralContext,0)


        def singleStringLiteral(self):
            return self.getTypedRuleContext(ZigParser.SingleStringLiteralContext,0)


        def lineStringLiteral(self):
            return self.getTypedRuleContext(ZigParser.LineStringLiteralContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_constantExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = ZigParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constantExpression)
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.integerLiteral()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.floatingLiteral()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 472
                self.charLiteral()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 473
                self.singleStringLiteral()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 474
                self.lineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topFnDefinition(self):
            return self.getTypedRuleContext(ZigParser.TopFnDefinitionContext,0)


        def topVarDeclaration(self):
            return self.getTypedRuleContext(ZigParser.TopVarDeclarationContext,0)


        def UsingNamespace(self):
            return self.getToken(ZigParser.UsingNamespace, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = ZigParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declaration)
        try:
            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.topFnDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.topVarDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.match(ZigParser.UsingNamespace)
                self.state = 480
                self.expression()
                self.state = 481
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopVarDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDeclaration(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationContext,0)


        def varDeclarationEx(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationExContext,0)


        def ThreadLocal(self):
            return self.getToken(ZigParser.ThreadLocal, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_topVarDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopVarDeclaration" ):
                return visitor.visitTopVarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def topVarDeclaration(self):

        localctx = ZigParser.TopVarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_topVarDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==22:
                self.state = 485
                self.varDeclarationEx()


            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 488
                self.match(ZigParser.ThreadLocal)


            self.state = 491
            self.varDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclarationExContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Export(self):
            return self.getToken(ZigParser.Export, 0)

        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def NoInline(self):
            return self.getToken(ZigParser.NoInline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclarationEx

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclarationEx" ):
                return visitor.visitFnProtoDeclarationEx(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclarationEx(self):

        localctx = ZigParser.FnProtoDeclarationExContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fnProtoDeclarationEx)
        self._la = 0 # Token type
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.match(ZigParser.Export)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 494
                self.match(ZigParser.Extern)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 495
                    self.match(ZigParser.SingleString)


                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 498
                self.match(ZigParser.Inline)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 499
                self.match(ZigParser.NoInline)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationExContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Export(self):
            return self.getToken(ZigParser.Export, 0)

        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_varDeclarationEx

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclarationEx" ):
                return visitor.visitVarDeclarationEx(self)
            else:
                return visitor.visitChildren(self)




    def varDeclarationEx(self):

        localctx = ZigParser.VarDeclarationExContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_varDeclarationEx)
        self._la = 0 # Token type
        try:
            self.state = 507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.match(ZigParser.Export)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.match(ZigParser.Extern)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 504
                    self.match(ZigParser.SingleString)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_varName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarName" ):
                return visitor.visitVarName(self)
            else:
                return visitor.visitChildren(self)




    def varName(self):

        localctx = ZigParser.VarNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_varName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varName(self):
            return self.getTypedRuleContext(ZigParser.VarNameContext,0)


        def varDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Var(self):
            return self.getToken(ZigParser.Var, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_varDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclaration" ):
                return visitor.visitVarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def varDeclaration(self):

        localctx = ZigParser.VarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_varDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            _la = self._input.LA(1)
            if not(_la==14 or _la==49):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 512
            self.varName()
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 513
                self.match(ZigParser.Colon)
                self.state = 514
                self.typeExpression()


            self.state = 517
            self.varDeclarationSpecifiers()
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 518
                self.match(ZigParser.Equal)
                self.state = 519
                self.expression()


            self.state = 522
            self.match(ZigParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def linkSection(self):
            return self.getTypedRuleContext(ZigParser.LinkSectionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_varDeclarationSpecifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDeclarationSpecifiers" ):
                return visitor.visitVarDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def varDeclarationSpecifiers(self):

        localctx = ZigParser.VarDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_varDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 524
                self.byteAlign()


            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 527
                self.addrSpace()


            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 530
                self.linkSection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_typeName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = ZigParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerDeclarationAuto(self):
            return self.getTypedRuleContext(ZigParser.ContainerDeclarationAutoContext,0)


        def Extern(self):
            return self.getToken(ZigParser.Extern, 0)

        def Packed(self):
            return self.getToken(ZigParser.Packed, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclaration" ):
                return visitor.visitContainerDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclaration(self):

        localctx = ZigParser.ContainerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_containerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22 or _la==36:
                self.state = 535
                _la = self._input.LA(1)
                if not(_la==22 or _la==36):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 538
            self.containerDeclarationAuto()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationAutoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerDeclarationType(self):
            return self.getTypedRuleContext(ZigParser.ContainerDeclarationTypeContext,0)


        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def containerMembers(self):
            return self.getTypedRuleContext(ZigParser.ContainerMembersContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclarationAuto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclarationAuto" ):
                return visitor.visitContainerDeclarationAuto(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclarationAuto(self):

        localctx = ZigParser.ContainerDeclarationAutoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_containerDeclarationAuto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.containerDeclarationType()
            self.state = 541
            self.match(ZigParser.LBrace)
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 542
                self.match(ZigParser.DocComment)


            self.state = 545
            self.containerMembers()
            self.state = 546
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(ZigParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(ZigParser.EnumSpecifierContext,0)


        def Opaque(self):
            return self.getToken(ZigParser.Opaque, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclarationType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclarationType" ):
                return visitor.visitContainerDeclarationType(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclarationType(self):

        localctx = ZigParser.ContainerDeclarationTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_containerDeclarationType)
        try:
            self.state = 551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.structOrUnionSpecifier()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.enumSpecifier()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 550
                self.match(ZigParser.Opaque)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(ZigParser.Struct, 0)

        def LParen(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.LParen)
            else:
                return self.getToken(ZigParser.LParen, i)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.RParen)
            else:
                return self.getToken(ZigParser.RParen, i)

        def Union(self):
            return self.getToken(ZigParser.Union, 0)

        def Enum(self):
            return self.getToken(ZigParser.Enum, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_structOrUnionSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnionSpecifier" ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = ZigParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.match(ZigParser.Struct)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 554
                    self.match(ZigParser.LParen)
                    self.state = 555
                    self.expression()
                    self.state = 556
                    self.match(ZigParser.RParen)


                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 560
                self.match(ZigParser.Union)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 561
                    self.match(ZigParser.LParen)
                    self.state = 570
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        self.state = 562
                        self.match(ZigParser.Enum)
                        self.state = 567
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==66:
                            self.state = 563
                            self.match(ZigParser.LParen)
                            self.state = 564
                            self.expression()
                            self.state = 565
                            self.match(ZigParser.RParen)


                        pass

                    elif la_ == 2:
                        self.state = 569
                        self.expression()
                        pass


                    self.state = 572
                    self.match(ZigParser.RParen)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.FieldContext)
            else:
                return self.getTypedRuleContext(ZigParser.FieldContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_fieldList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldList" ):
                return visitor.visitFieldList(self)
            else:
                return visitor.visitChildren(self)




    def fieldList(self):

        localctx = ZigParser.FieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fieldList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 577
                    self.field()
                    self.state = 578
                    self.match(ZigParser.Comma) 
                self.state = 584
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 585
                self.field()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ZigParser.FieldNameContext,0)


        def fieldDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ZigParser.FieldDeclarationSpecifiersContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_field

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField" ):
                return visitor.visitField(self)
            else:
                return visitor.visitChildren(self)




    def field(self):

        localctx = ZigParser.FieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 588
                self.match(ZigParser.DocComment)


            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 591
                self.match(ZigParser.CompTime)


            self.state = 594
            self.fieldName()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 595
                self.match(ZigParser.Colon)
                self.state = 596
                self.typeExpression()


            self.state = 599
            self.fieldDeclarationSpecifiers()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 600
                self.match(ZigParser.Equal)
                self.state = 601
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fieldDeclarationSpecifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclarationSpecifiers" ):
                return visitor.visitFieldDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclarationSpecifiers(self):

        localctx = ZigParser.FieldDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fieldDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 604
                self.byteAlign()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fieldName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldName" ):
                return visitor.visitFieldName(self)
            else:
                return visitor.visitChildren(self)




    def fieldName(self):

        localctx = ZigParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(ZigParser.Enum, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_enumSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumSpecifier" ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = ZigParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(ZigParser.Enum)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 610
                self.match(ZigParser.LParen)
                self.state = 611
                self.expression()
                self.state = 612
                self.match(ZigParser.RParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Fn(self):
            return self.getToken(ZigParser.Fn, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(ZigParser.ParameterDeclarationListContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def fnProtoDeclarationSpecifiers(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationSpecifiersContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Bang(self):
            return self.getToken(ZigParser.Bang, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclaration" ):
                return visitor.visitFnProtoDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclaration(self):

        localctx = ZigParser.FnProtoDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fnProtoDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(ZigParser.Fn)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 617
                self.match(ZigParser.Ident)


            self.state = 620
            self.match(ZigParser.LParen)
            self.state = 621
            self.parameterDeclarationList()
            self.state = 622
            self.match(ZigParser.RParen)
            self.state = 623
            self.fnProtoDeclarationSpecifiers()
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 624
                    self.match(ZigParser.Ident)


                self.state = 627
                self.match(ZigParser.Bang)


            self.state = 630
            self.typeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FnProtoDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def linkSection(self):
            return self.getTypedRuleContext(ZigParser.LinkSectionContext,0)


        def callConv(self):
            return self.getTypedRuleContext(ZigParser.CallConvContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fnProtoDeclarationSpecifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFnProtoDeclarationSpecifiers" ):
                return visitor.visitFnProtoDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def fnProtoDeclarationSpecifiers(self):

        localctx = ZigParser.FnProtoDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fnProtoDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 632
                self.byteAlign()


            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 635
                self.addrSpace()


            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 638
                self.linkSection()


            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 641
                self.callConv()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(ZigParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_parameterDeclarationList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclarationList" ):
                return visitor.visitParameterDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclarationList(self):

        localctx = ZigParser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_parameterDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 644
                    self.parameterDeclaration()
                    self.state = 645
                    self.match(ZigParser.Comma) 
                self.state = 651
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -576244070551903904) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37044256839) != 0):
                self.state = 652
                self.parameterDeclaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterType(self):
            return self.getTypedRuleContext(ZigParser.ParameterTypeContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def parameterDeclarationSpecifier(self):
            return self.getTypedRuleContext(ZigParser.ParameterDeclarationSpecifierContext,0)


        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Ellipsis(self):
            return self.getToken(ZigParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_parameterDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = ZigParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 8, 13, 18, 20, 22, 23, 25, 26, 29, 33, 36, 40, 42, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 70, 79, 93, 95, 99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 655
                    self.match(ZigParser.DocComment)


                self.state = 659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.parameterDeclarationSpecifier()


                self.state = 663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 661
                    self.match(ZigParser.Ident)
                    self.state = 662
                    self.match(ZigParser.Colon)


                self.state = 665
                self.parameterType()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.match(ZigParser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NoAlias(self):
            return self.getToken(ZigParser.NoAlias, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_parameterDeclarationSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclarationSpecifier" ):
                return visitor.visitParameterDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclarationSpecifier(self):

        localctx = ZigParser.ParameterDeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_parameterDeclarationSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            _la = self._input.LA(1)
            if not(_la==13 or _la==29):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnyType(self):
            return self.getToken(ZigParser.AnyType, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_parameterType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterType" ):
                return visitor.visitParameterType(self)
            else:
                return visitor.visitChildren(self)




    def parameterType(self):

        localctx = ZigParser.ParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_parameterType)
        try:
            self.state = 673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.match(ZigParser.AnyType)
                pass
            elif token in [5, 8, 13, 18, 20, 22, 23, 25, 26, 33, 36, 40, 42, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 70, 79, 93, 95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 672
                self.typeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def fieldInit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.FieldInitContext)
            else:
                return self.getTypedRuleContext(ZigParser.FieldInitContext,i)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_initList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitList" ):
                return visitor.visitInitList(self)
            else:
                return visitor.visitChildren(self)




    def initList(self):

        localctx = ZigParser.InitListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_initList)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.match(ZigParser.LBrace)
                self.state = 676
                self.fieldInit()
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 677
                        self.match(ZigParser.Comma)
                        self.state = 678
                        self.fieldInit() 
                    self.state = 683
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 684
                    self.match(ZigParser.Comma)


                self.state = 687
                self.match(ZigParser.RBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.match(ZigParser.LBrace)
                self.state = 690
                self.expression()
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 691
                        self.match(ZigParser.Comma)
                        self.state = 692
                        self.expression() 
                    self.state = 697
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 698
                    self.match(ZigParser.Comma)


                self.state = 701
                self.match(ZigParser.RBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 703
                self.match(ZigParser.LBrace)
                self.state = 704
                self.match(ZigParser.RBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(ZigParser.ExpressionStatementContext,0)


        def primaryBlockStatement(self):
            return self.getTypedRuleContext(ZigParser.PrimaryBlockStatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = ZigParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_statement)
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 708
                self.primaryBlockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryBlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(ZigParser.CompoundStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(ZigParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(ZigParser.IterationStatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryBlockStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryBlockStatement" ):
                return visitor.visitPrimaryBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def primaryBlockStatement(self):

        localctx = ZigParser.PrimaryBlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_primaryBlockStatement)
        try:
            self.state = 714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 16, 19, 32, 41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.compoundStatement()
                pass
            elif token in [25, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.selectionStatement()
                pass
            elif token in [26, 60, 68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 713
                self.iterationStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryBlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundExpression(self):
            return self.getTypedRuleContext(ZigParser.CompoundExpressionContext,0)


        def selectionExpression(self):
            return self.getTypedRuleContext(ZigParser.SelectionExpressionContext,0)


        def iterationExpression(self):
            return self.getTypedRuleContext(ZigParser.IterationExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryBlockExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryBlockExpression" ):
                return visitor.visitPrimaryBlockExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryBlockExpression(self):

        localctx = ZigParser.PrimaryBlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_primaryBlockExpression)
        try:
            self.state = 719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 13, 15, 32, 38, 39, 68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.compoundExpression()
                pass
            elif token in [25, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.selectionExpression()
                pass
            elif token in [24, 26, 51, 60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 718
                self.iterationExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryTypeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.CompoundTypeExpressionContext,0)


        def selectionTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.SelectionTypeExpressionContext,0)


        def iterationTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.IterationTypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryTypeStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryTypeStatement" ):
                return visitor.visitPrimaryTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def primaryTypeStatement(self):

        localctx = ZigParser.PrimaryTypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_primaryTypeStatement)
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 20, 59, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.compoundTypeExpression()
                pass
            elif token in [25, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.selectionTypeExpression()
                pass
            elif token in [26, 60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 723
                self.iterationTypeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerDeclaration(self):
            return self.getTypedRuleContext(ZigParser.ContainerDeclarationContext,0)


        def errorSetDeclaration(self):
            return self.getTypedRuleContext(ZigParser.ErrorSetDeclarationContext,0)


        def fnProtoDeclaration(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_primaryTypeDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryTypeDeclaration" ):
                return visitor.visitPrimaryTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def primaryTypeDeclaration(self):

        localctx = ZigParser.PrimaryTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_primaryTypeDeclaration)
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 22, 33, 36, 40, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.containerDeclaration()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.errorSetDeclaration()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 3)
                self.state = 728
                self.fnProtoDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorSetDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Error(self):
            return self.getToken(ZigParser.Error, 0)

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def identList(self):
            return self.getTypedRuleContext(ZigParser.IdentListContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_errorSetDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorSetDeclaration" ):
                return visitor.visitErrorSetDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def errorSetDeclaration(self):

        localctx = ZigParser.ErrorSetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_errorSetDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(ZigParser.Error)
            self.state = 732
            self.match(ZigParser.LBrace)
            self.state = 733
            self.identList()
            self.state = 734
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DocComment(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.DocComment)
            else:
                return self.getToken(ZigParser.DocComment, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_identList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentList" ):
                return visitor.visitIdentList(self)
            else:
                return visitor.visitChildren(self)




    def identList(self):

        localctx = ZigParser.IdentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_identList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 736
                    self.match(ZigParser.DocComment)
                    self.state = 737
                    self.match(ZigParser.Ident)
                    self.state = 738
                    self.match(ZigParser.Comma) 
                self.state = 743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 744
            self.match(ZigParser.DocComment)
            self.state = 745
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def blockExpressionStatement(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionStatementContext,0)


        def NoSuspend(self):
            return self.getToken(ZigParser.NoSuspend, 0)

        def Suspend(self):
            return self.getToken(ZigParser.Suspend, 0)

        def Defer(self):
            return self.getToken(ZigParser.Defer, 0)

        def ErrDefer(self):
            return self.getToken(ZigParser.ErrDefer, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = ZigParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(ZigParser.CompTime)
                self.state = 748
                self.blockExpressionStatement()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.match(ZigParser.NoSuspend)
                self.state = 750
                self.blockExpressionStatement()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.match(ZigParser.Suspend)
                self.state = 752
                self.blockExpressionStatement()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 4)
                self.state = 753
                self.match(ZigParser.Defer)
                self.state = 754
                self.blockExpressionStatement()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 755
                self.match(ZigParser.ErrDefer)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 756
                    self.payload()


                self.state = 759
                self.blockExpressionStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(ZigParser.Break, 0)

        def breakLabel(self):
            return self.getTypedRuleContext(ZigParser.BreakLabelContext,0)


        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def NoSuspend(self):
            return self.getToken(ZigParser.NoSuspend, 0)

        def Continue(self):
            return self.getToken(ZigParser.Continue, 0)

        def Resume(self):
            return self.getToken(ZigParser.Resume, 0)

        def Return(self):
            return self.getToken(ZigParser.Return, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundExpression" ):
                return visitor.visitCompoundExpression(self)
            else:
                return visitor.visitChildren(self)




    def compoundExpression(self):

        localctx = ZigParser.CompoundExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_compoundExpression)
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.match(ZigParser.Break)
                self.state = 764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 763
                    self.breakLabel()


                self.state = 767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 766
                    self.expression()


                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.match(ZigParser.CompTime)
                self.state = 770
                self.expression()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 771
                self.match(ZigParser.NoSuspend)
                self.state = 772
                self.expression()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 4)
                self.state = 773
                self.match(ZigParser.Continue)
                self.state = 775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 774
                    self.breakLabel()


                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 777
                self.match(ZigParser.Resume)
                self.state = 778
                self.expression()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 779
                self.match(ZigParser.Return)
                self.state = 781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.expression()


                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 7)
                self.state = 783
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtinCallExpression(self):
            return self.getTypedRuleContext(ZigParser.BuiltinCallExpressionContext,0)


        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def initList(self):
            return self.getTypedRuleContext(ZigParser.InitListContext,0)


        def Error(self):
            return self.getToken(ZigParser.Error, 0)

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compoundTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundTypeExpression" ):
                return visitor.visitCompoundTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def compoundTypeExpression(self):

        localctx = ZigParser.CompoundTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_compoundTypeExpression)
        try:
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.builtinCallExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.match(ZigParser.Dot)
                self.state = 788
                self.match(ZigParser.Ident)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.match(ZigParser.Dot)
                self.state = 790
                self.initList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 791
                self.match(ZigParser.Error)
                self.state = 792
                self.match(ZigParser.Dot)
                self.state = 793
                self.match(ZigParser.Ident)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 794
                self.match(ZigParser.CompTime)
                self.state = 795
                self.typeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltinCallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BuiltinIdent(self):
            return self.getToken(ZigParser.BuiltinIdent, 0)

        def fnCallArguments(self):
            return self.getTypedRuleContext(ZigParser.FnCallArgumentsContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_builtinCallExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltinCallExpression" ):
                return visitor.visitBuiltinCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def builtinCallExpression(self):

        localctx = ZigParser.BuiltinCallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_builtinCallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(ZigParser.BuiltinIdent)
            self.state = 799
            self.fnCallArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDeclaration(self):
            return self.getTypedRuleContext(ZigParser.VarDeclarationContext,0)


        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_expressionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = ZigParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 801
                    self.match(ZigParser.CompTime)


                self.state = 804
                self.varDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.assignExpression()
                self.state = 806
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(ZigParser.IfStatementContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(ZigParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_selectionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = ZigParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_selectionStatement)
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.ifStatement()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.switchExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(ZigParser.IfExpressionContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(ZigParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_selectionExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionExpression" ):
                return visitor.visitSelectionExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectionExpression(self):

        localctx = ZigParser.SelectionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_selectionExpression)
        try:
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.ifExpression()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.switchExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.IfTypeExpressionContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(ZigParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_selectionTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionTypeExpression" ):
                return visitor.visitSelectionTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def selectionTypeExpression(self):

        localctx = ZigParser.SelectionTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_selectionTypeExpression)
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.ifTypeExpression()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.switchExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def elseStatement(self):
            return self.getTypedRuleContext(ZigParser.ElseStatementContext,0)


        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ifStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = ZigParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.ifPrefix()
                self.state = 823
                self.blockExpression()
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 824
                    self.match(ZigParser.Else)
                    self.state = 826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 825
                        self.payload()


                    self.state = 828
                    self.elseStatement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.ifPrefix()
                self.state = 832
                self.assignExpression()
                self.state = 839
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 833
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 834
                    self.match(ZigParser.Else)
                    self.state = 836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 835
                        self.payload()


                    self.state = 838
                    self.elseStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def thenExpression(self):
            return self.getTypedRuleContext(ZigParser.ThenExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def elseExpression(self):
            return self.getTypedRuleContext(ZigParser.ElseExpressionContext,0)


        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifExpression(self):

        localctx = ZigParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.ifPrefix()
            self.state = 844
            self.thenExpression()
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 845
                self.match(ZigParser.Else)
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 846
                    self.payload()


                self.state = 849
                self.elseExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifPrefix(self):
            return self.getTypedRuleContext(ZigParser.IfPrefixContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfTypeExpression" ):
                return visitor.visitIfTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifTypeExpression(self):

        localctx = ZigParser.IfTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ifTypeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.ifPrefix()
            self.state = 853
            self.typeExpression()
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 854
                self.match(ZigParser.Else)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 855
                    self.payload()


                self.state = 858
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(ZigParser.If, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def condExpression(self):
            return self.getTypedRuleContext(ZigParser.CondExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def ptrPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ifPrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfPrefix" ):
                return visitor.visitIfPrefix(self)
            else:
                return visitor.visitChildren(self)




    def ifPrefix(self):

        localctx = ZigParser.IfPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ifPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(ZigParser.If)
            self.state = 862
            self.match(ZigParser.LParen)
            self.state = 863
            self.condExpression()
            self.state = 864
            self.match(ZigParser.RParen)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 865
                self.ptrPayload()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_condExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondExpression" ):
                return visitor.visitCondExpression(self)
            else:
                return visitor.visitChildren(self)




    def condExpression(self):

        localctx = ZigParser.CondExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_condExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_thenExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThenExpression" ):
                return visitor.visitThenExpression(self)
            else:
                return visitor.visitChildren(self)




    def thenExpression(self):

        localctx = ZigParser.ThenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_thenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_elseExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseExpression" ):
                return visitor.visitElseExpression(self)
            else:
                return visitor.visitChildren(self)




    def elseExpression(self):

        localctx = ZigParser.ElseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_elseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(ZigParser.StatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_elseStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseStatement" ):
                return visitor.visitElseStatement(self)
            else:
                return visitor.visitChildren(self)




    def elseStatement(self):

        localctx = ZigParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(ZigParser.Switch, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def switchProngList(self):
            return self.getTypedRuleContext(ZigParser.SwitchProngListContext,0)


        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchExpression" ):
                return visitor.visitSwitchExpression(self)
            else:
                return visitor.visitChildren(self)




    def switchExpression(self):

        localctx = ZigParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_switchExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(ZigParser.Switch)
            self.state = 877
            self.match(ZigParser.LParen)
            self.state = 878
            self.expression()
            self.state = 879
            self.match(ZigParser.RParen)
            self.state = 880
            self.match(ZigParser.LBrace)
            self.state = 881
            self.switchProngList()
            self.state = 882
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(ZigParser.LabeledStatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_iterationStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = ZigParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_iterationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.labeledStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledExpression(self):
            return self.getTypedRuleContext(ZigParser.LabeledExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_iterationExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationExpression" ):
                return visitor.visitIterationExpression(self)
            else:
                return visitor.visitChildren(self)




    def iterationExpression(self):

        localctx = ZigParser.IterationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_iterationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.labeledExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.LabeledTypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_iterationTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationTypeExpression" ):
                return visitor.visitIterationTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def iterationTypeExpression(self):

        localctx = ZigParser.IterationTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_iterationTypeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.labeledTypeExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(ZigParser.LoopStatementContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = ZigParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_labeledStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 890
                self.blockLabel()


            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.state = 893
                self.block()
                pass
            elif token in [26]:
                self.state = 894
                self.loopStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopExpression(self):
            return self.getTypedRuleContext(ZigParser.LoopExpressionContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledExpression" ):
                return visitor.visitLabeledExpression(self)
            else:
                return visitor.visitChildren(self)




    def labeledExpression(self):

        localctx = ZigParser.LabeledExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_labeledExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 897
                self.blockLabel()


            self.state = 900
            self.loopExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def loopTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.LoopTypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_labeledTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledTypeExpression" ):
                return visitor.visitLabeledTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def labeledTypeExpression(self):

        localctx = ZigParser.LabeledTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_labeledTypeExpression)
        self._la = 0 # Token type
        try:
            self.state = 909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.blockLabel()
                self.state = 903
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 905
                    self.blockLabel()


                self.state = 908
                self.loopTypeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def forStatement(self):
            return self.getTypedRuleContext(ZigParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(ZigParser.WhileStatementContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_loopStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = ZigParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_loopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(ZigParser.Inline)
            self.state = 914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 912
                self.forStatement()
                pass
            elif token in [51]:
                self.state = 913
                self.whileStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpression(self):
            return self.getTypedRuleContext(ZigParser.ForExpressionContext,0)


        def whileExpression(self):
            return self.getTypedRuleContext(ZigParser.WhileExpressionContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_loopExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopExpression" ):
                return visitor.visitLoopExpression(self)
            else:
                return visitor.visitChildren(self)




    def loopExpression(self):

        localctx = ZigParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_loopExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 916
                self.match(ZigParser.Inline)


            self.state = 921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 919
                self.forExpression()
                pass
            elif token in [51]:
                self.state = 920
                self.whileExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def forTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.ForTypeExpressionContext,0)


        def whileTypeExpression(self):
            return self.getTypedRuleContext(ZigParser.WhileTypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_loopTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopTypeExpression" ):
                return visitor.visitLoopTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def loopTypeExpression(self):

        localctx = ZigParser.LoopTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_loopTypeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(ZigParser.Inline)
            self.state = 926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.state = 924
                self.forTypeExpression()
                pass
            elif token in [51]:
                self.state = 925
                self.whileTypeExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(ZigParser.StatementContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = ZigParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.forPrefix()
                self.state = 929
                self.blockExpression()
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 930
                    self.match(ZigParser.Else)
                    self.state = 931
                    self.statement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.forPrefix()
                self.state = 935
                self.assignExpression()
                self.state = 939
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 936
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 937
                    self.match(ZigParser.Else)
                    self.state = 938
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)




    def forExpression(self):

        localctx = ZigParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.forPrefix()
            self.state = 944
            self.expression()
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 945
                self.match(ZigParser.Else)
                self.state = 946
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forPrefix(self):
            return self.getTypedRuleContext(ZigParser.ForPrefixContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_forTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForTypeExpression" ):
                return visitor.visitForTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def forTypeExpression(self):

        localctx = ZigParser.ForTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_forTypeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.forPrefix()
            self.state = 950
            self.typeExpression()
            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 951
                self.match(ZigParser.Else)
                self.state = 952
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(ZigParser.For, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def forArgumentsList(self):
            return self.getTypedRuleContext(ZigParser.ForArgumentsListContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def ptrListPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrListPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_forPrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForPrefix" ):
                return visitor.visitForPrefix(self)
            else:
                return visitor.visitChildren(self)




    def forPrefix(self):

        localctx = ZigParser.ForPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(ZigParser.For)
            self.state = 956
            self.match(ZigParser.LParen)
            self.state = 957
            self.forArgumentsList()
            self.state = 958
            self.match(ZigParser.RParen)
            self.state = 959
            self.ptrListPayload()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(ZigParser.StatementContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_whileStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = ZigParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.whilePrefix()
                self.state = 962
                self.blockExpression()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 963
                    self.match(ZigParser.Else)
                    self.state = 964
                    self.statement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.whilePrefix()
                self.state = 968
                self.assignExpression()
                self.state = 972
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 969
                    self.match(ZigParser.Semi)
                    pass
                elif token in [17]:
                    self.state = 970
                    self.match(ZigParser.Else)
                    self.state = 971
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whileExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileExpression" ):
                return visitor.visitWhileExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileExpression(self):

        localctx = ZigParser.WhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_whileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.whilePrefix()
            self.state = 977
            self.expression()
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 978
                self.match(ZigParser.Else)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 979
                    self.payload()


                self.state = 982
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileTypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whilePrefix(self):
            return self.getTypedRuleContext(ZigParser.WhilePrefixContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.TypeExpressionContext,i)


        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whileTypeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileTypeExpression" ):
                return visitor.visitWhileTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileTypeExpression(self):

        localctx = ZigParser.WhileTypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_whileTypeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.whilePrefix()
            self.state = 986
            self.typeExpression()
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 987
                self.match(ZigParser.Else)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 988
                    self.payload()


                self.state = 991
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhilePrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(ZigParser.While, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def condExpression(self):
            return self.getTypedRuleContext(ZigParser.CondExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def ptrPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrPayloadContext,0)


        def whileContinueExpression(self):
            return self.getTypedRuleContext(ZigParser.WhileContinueExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_whilePrefix

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhilePrefix" ):
                return visitor.visitWhilePrefix(self)
            else:
                return visitor.visitChildren(self)




    def whilePrefix(self):

        localctx = ZigParser.WhilePrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_whilePrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(ZigParser.While)
            self.state = 995
            self.match(ZigParser.LParen)
            self.state = 996
            self.condExpression()
            self.state = 997
            self.match(ZigParser.RParen)
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 998
                self.ptrPayload()


            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1001
                self.whileContinueExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockExpression(self):
            return self.getTypedRuleContext(ZigParser.BlockExpressionContext,0)


        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_blockExpressionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockExpressionStatement" ):
                return visitor.visitBlockExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockExpressionStatement(self):

        localctx = ZigParser.BlockExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_blockExpressionStatement)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.blockExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.assignExpression()
                self.state = 1006
                self.match(ZigParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def blockLabel(self):
            return self.getTypedRuleContext(ZigParser.BlockLabelContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_blockExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockExpression" ):
                return visitor.visitBlockExpression(self)
            else:
                return visitor.visitChildren(self)




    def blockExpression(self):

        localctx = ZigParser.BlockExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_blockExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1010
                self.blockLabel()


            self.state = 1013
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def assignOpExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignOpExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_assignExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignExpression" ):
                return visitor.visitAssignExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignExpression(self):

        localctx = ZigParser.AssignExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_assignExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.expression()
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52 or _la==82:
                self.state = 1016
                self.assignOpExpression()
                self.state = 1017
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_breakLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakLabel" ):
                return visitor.visitBreakLabel(self)
            else:
                return visitor.visitChildren(self)




    def breakLabel(self):

        localctx = ZigParser.BreakLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_breakLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(ZigParser.Colon)
            self.state = 1022
            self.match(ZigParser.Ident)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_blockLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockLabel" ):
                return visitor.visitBlockLabel(self)
            else:
                return visitor.visitChildren(self)




    def blockLabel(self):

        localctx = ZigParser.BlockLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_blockLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(ZigParser.Ident)
            self.state = 1025
            self.match(ZigParser.Colon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrace(self):
            return self.getToken(ZigParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(ZigParser.RBrace, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.StatementContext)
            else:
                return self.getTypedRuleContext(ZigParser.StatementContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ZigParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(ZigParser.LBrace)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -285195917200595552) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2684387415) != 0):
                self.state = 1028
                self.statement()
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1034
            self.match(ZigParser.RBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def errorUnionExpression(self):
            return self.getTypedRuleContext(ZigParser.ErrorUnionExpressionContext,0)


        def prefixTypeOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PrefixTypeOpContext)
            else:
                return self.getTypedRuleContext(ZigParser.PrefixTypeOpContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_typeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeExpression(self):

        localctx = ZigParser.TypeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_typeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1036
                    self.prefixTypeOp() 
                self.state = 1041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 1042
            self.errorUnionExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorUnionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def suffixExpression(self):
            return self.getTypedRuleContext(ZigParser.SuffixExpressionContext,0)


        def Bang(self):
            return self.getToken(ZigParser.Bang, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(ZigParser.TypeExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_errorUnionExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorUnionExpression" ):
                return visitor.visitErrorUnionExpression(self)
            else:
                return visitor.visitChildren(self)




    def errorUnionExpression(self):

        localctx = ZigParser.ErrorUnionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_errorUnionExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.suffixExpression()
            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1045
                self.match(ZigParser.Bang)
                self.state = 1046
                self.typeExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(ZigParser.Integer, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_integerLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = ZigParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_integerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(ZigParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Float(self):
            return self.getToken(ZigParser.Float, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = ZigParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_floatingLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(ZigParser.Float)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Char(self):
            return self.getToken(ZigParser.Char, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_charLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharLiteral" ):
                return visitor.visitCharLiteral(self)
            else:
                return visitor.visitChildren(self)




    def charLiteral(self):

        localctx = ZigParser.CharLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_charLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(ZigParser.Char)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_singleStringLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStringLiteral" ):
                return visitor.visitSingleStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def singleStringLiteral(self):

        localctx = ZigParser.SingleStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_singleStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(ZigParser.SingleString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineString(self):
            return self.getToken(ZigParser.LineString, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_lineStringLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringLiteral" ):
                return visitor.visitLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def lineStringLiteral(self):

        localctx = ZigParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lineStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(ZigParser.LineString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_groupedExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupedExpression" ):
                return visitor.visitGroupedExpression(self)
            else:
                return visitor.visitChildren(self)




    def groupedExpression(self):

        localctx = ZigParser.GroupedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_groupedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(ZigParser.LParen)
            self.state = 1060
            self.expression()
            self.state = 1061
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_fieldInit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldInit" ):
                return visitor.visitFieldInit(self)
            else:
                return visitor.visitChildren(self)




    def fieldInit(self):

        localctx = ZigParser.FieldInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_fieldInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(ZigParser.Dot)
            self.state = 1064
            self.match(ZigParser.Ident)
            self.state = 1065
            self.match(ZigParser.Equal)
            self.state = 1066
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileContinueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_whileContinueExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileContinueExpression" ):
                return visitor.visitWhileContinueExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileContinueExpression(self):

        localctx = ZigParser.WhileContinueExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_whileContinueExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(ZigParser.Colon)
            self.state = 1069
            self.match(ZigParser.LParen)
            self.state = 1070
            self.assignExpression()
            self.state = 1071
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LinkSection(self):
            return self.getToken(ZigParser.LinkSection, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_linkSection

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkSection" ):
                return visitor.visitLinkSection(self)
            else:
                return visitor.visitChildren(self)




    def linkSection(self):

        localctx = ZigParser.LinkSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_linkSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(ZigParser.LinkSection)
            self.state = 1074
            self.match(ZigParser.LParen)
            self.state = 1075
            self.expression()
            self.state = 1076
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AddrSpace(self):
            return self.getToken(ZigParser.AddrSpace, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_addrSpace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddrSpace" ):
                return visitor.visitAddrSpace(self)
            else:
                return visitor.visitChildren(self)




    def addrSpace(self):

        localctx = ZigParser.AddrSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_addrSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(ZigParser.AddrSpace)
            self.state = 1079
            self.match(ZigParser.LParen)
            self.state = 1080
            self.expression()
            self.state = 1081
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallConvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CallConv(self):
            return self.getToken(ZigParser.CallConv, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_callConv

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallConv" ):
                return visitor.visitCallConv(self)
            else:
                return visitor.visitChildren(self)




    def callConv(self):

        localctx = ZigParser.CallConvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_callConv)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(ZigParser.CallConv)
            self.state = 1084
            self.match(ZigParser.LParen)
            self.state = 1085
            self.expression()
            self.state = 1086
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_payload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPayload" ):
                return visitor.visitPayload(self)
            else:
                return visitor.visitChildren(self)




    def payload(self):

        localctx = ZigParser.PayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_payload)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(ZigParser.Pipe)
            self.state = 1089
            self.match(ZigParser.Ident)
            self.state = 1090
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrPayload" ):
                return visitor.visitPtrPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrPayload(self):

        localctx = ZigParser.PtrPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_ptrPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(ZigParser.Pipe)
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1093
                self.match(ZigParser.Star)


            self.state = 1096
            self.match(ZigParser.Ident)
            self.state = 1097
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrIndexPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Star(self):
            return self.getToken(ZigParser.Star, 0)

        def Comma(self):
            return self.getToken(ZigParser.Comma, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrIndexPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrIndexPayload" ):
                return visitor.visitPtrIndexPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrIndexPayload(self):

        localctx = ZigParser.PtrIndexPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_ptrIndexPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(ZigParser.Pipe)
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1100
                self.match(ZigParser.Star)


            self.state = 1103
            self.match(ZigParser.Ident)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 1104
                self.match(ZigParser.Comma)
                self.state = 1105
                self.match(ZigParser.Ident)


            self.state = 1108
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrListPayloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Pipe)
            else:
                return self.getToken(ZigParser.Pipe, i)

        def Ident(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Ident)
            else:
                return self.getToken(ZigParser.Ident, i)

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Star)
            else:
                return self.getToken(ZigParser.Star, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrListPayload

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrListPayload" ):
                return visitor.visitPtrListPayload(self)
            else:
                return visitor.visitChildren(self)




    def ptrListPayload(self):

        localctx = ZigParser.PtrListPayloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_ptrListPayload)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(ZigParser.Pipe)
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 1111
                self.match(ZigParser.Star)


            self.state = 1114
            self.match(ZigParser.Ident)
            self.state = 1122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1115
                    self.match(ZigParser.Comma)
                    self.state = 1117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==93:
                        self.state = 1116
                        self.match(ZigParser.Star)


                    self.state = 1119
                    self.match(ZigParser.Ident) 
                self.state = 1124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 1125
                self.match(ZigParser.Comma)


            self.state = 1128
            self.match(ZigParser.Pipe)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchProngContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchCase(self):
            return self.getTypedRuleContext(ZigParser.SwitchCaseContext,0)


        def EqualArrow(self):
            return self.getToken(ZigParser.EqualArrow, 0)

        def assignExpression(self):
            return self.getTypedRuleContext(ZigParser.AssignExpressionContext,0)


        def Inline(self):
            return self.getToken(ZigParser.Inline, 0)

        def ptrIndexPayload(self):
            return self.getTypedRuleContext(ZigParser.PtrIndexPayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_switchProng

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchProng" ):
                return visitor.visitSwitchProng(self)
            else:
                return visitor.visitChildren(self)




    def switchProng(self):

        localctx = ZigParser.SwitchProngContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_switchProng)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1130
                self.match(ZigParser.Inline)


            self.state = 1133
            self.switchCase()
            self.state = 1134
            self.match(ZigParser.EqualArrow)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1135
                self.ptrIndexPayload()


            self.state = 1138
            self.assignExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SwitchItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.SwitchItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def Else(self):
            return self.getToken(ZigParser.Else, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchCase

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchCase" ):
                return visitor.visitSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def switchCase(self):

        localctx = ZigParser.SwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_switchCase)
        self._la = 0 # Token type
        try:
            self.state = 1152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 8, 10, 13, 15, 18, 20, 22, 23, 24, 25, 26, 32, 33, 36, 38, 39, 40, 42, 46, 47, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 79, 93, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.switchItem()
                self.state = 1145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1141
                        self.match(ZigParser.Comma)
                        self.state = 1142
                        self.switchItem() 
                    self.state = 1147
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1148
                    self.match(ZigParser.Comma)


                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.match(ZigParser.Else)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def Ellipsis(self):
            return self.getToken(ZigParser.Ellipsis, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_switchItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchItem" ):
                return visitor.visitSwitchItem(self)
            else:
                return visitor.visitChildren(self)




    def switchItem(self):

        localctx = ZigParser.SwitchItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_switchItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.expression()
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 1155
                self.match(ZigParser.Ellipsis)
                self.state = 1156
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForArgumentsListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ForItemContext)
            else:
                return self.getTypedRuleContext(ZigParser.ForItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_forArgumentsList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForArgumentsList" ):
                return visitor.visitForArgumentsList(self)
            else:
                return visitor.visitChildren(self)




    def forArgumentsList(self):

        localctx = ZigParser.ForArgumentsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_forArgumentsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.forItem()
            self.state = 1164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1160
                    self.match(ZigParser.Comma)
                    self.state = 1161
                    self.forItem() 
                self.state = 1166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 1167
                self.match(ZigParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_forItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForItem" ):
                return visitor.visitForItem(self)
            else:
                return visitor.visitChildren(self)




    def forItem(self):

        localctx = ZigParser.ForItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_forItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignOpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(ZigParser.Equal, 0)

        def AssignOp(self):
            return self.getToken(ZigParser.AssignOp, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_assignOpExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignOpExpression" ):
                return visitor.visitAssignOpExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignOpExpression(self):

        localctx = ZigParser.AssignOpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_assignOpExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            _la = self._input.LA(1)
            if not(_la==52 or _la==82):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareOpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal2(self):
            return self.getToken(ZigParser.Equal2, 0)

        def CompareOp(self):
            return self.getToken(ZigParser.CompareOp, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_compareOpExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareOpExpression" ):
                return visitor.visitCompareOpExpression(self)
            else:
                return visitor.visitChildren(self)




    def compareOpExpression(self):

        localctx = ZigParser.CompareOpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_compareOpExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            _la = self._input.LA(1)
            if not(_la==53 or _la==83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseOpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BitwiseOp(self):
            return self.getToken(ZigParser.BitwiseOp, 0)

        def bitwiseKwExpression(self):
            return self.getTypedRuleContext(ZigParser.BitwiseKwExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseOpExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseOpExpression" ):
                return visitor.visitBitwiseOpExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseOpExpression(self):

        localctx = ZigParser.BitwiseOpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_bitwiseOpExpression)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1176
                self.match(ZigParser.BitwiseOp)
                pass
            elif token in [12, 35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1177
                self.bitwiseKwExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseKwExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OrElse(self):
            return self.getToken(ZigParser.OrElse, 0)

        def Catch(self):
            return self.getToken(ZigParser.Catch, 0)

        def payload(self):
            return self.getTypedRuleContext(ZigParser.PayloadContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_bitwiseKwExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseKwExpression" ):
                return visitor.visitBitwiseKwExpression(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseKwExpression(self):

        localctx = ZigParser.BitwiseKwExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_bitwiseKwExpression)
        self._la = 0 # Token type
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.match(ZigParser.OrElse)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.match(ZigParser.Catch)
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1182
                    self.payload()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixTypeOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Question(self):
            return self.getToken(ZigParser.Question, 0)

        def AnyFrame(self):
            return self.getToken(ZigParser.AnyFrame, 0)

        def MinusArrow(self):
            return self.getToken(ZigParser.MinusArrow, 0)

        def sliceTypeStart(self):
            return self.getTypedRuleContext(ZigParser.SliceTypeStartContext,0)


        def sliceTypeRest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SliceTypeRestContext)
            else:
                return self.getTypedRuleContext(ZigParser.SliceTypeRestContext,i)


        def ptrTypeStart(self):
            return self.getTypedRuleContext(ZigParser.PtrTypeStartContext,0)


        def ptrTypeRest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.PtrTypeRestContext)
            else:
                return self.getTypedRuleContext(ZigParser.PtrTypeRestContext,i)


        def arrayTypeStart(self):
            return self.getTypedRuleContext(ZigParser.ArrayTypeStartContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_prefixTypeOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixTypeOp" ):
                return visitor.visitPrefixTypeOp(self)
            else:
                return visitor.visitChildren(self)




    def prefixTypeOp(self):

        localctx = ZigParser.PrefixTypeOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_prefixTypeOp)
        self._la = 0 # Token type
        try:
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.match(ZigParser.Question)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.match(ZigParser.AnyFrame)
                self.state = 1189
                self.match(ZigParser.MinusArrow)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1190
                self.sliceTypeStart()
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125899906859022) != 0):
                    self.state = 1191
                    self.sliceTypeRest()
                    self.state = 1196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1197
                self.ptrTypeStart()
                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125899906859022) != 0):
                    self.state = 1198
                    self.ptrTypeRest()
                    self.state = 1203
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1204
                self.arrayTypeStart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_arrayTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayTypeStart" ):
                return visitor.visitArrayTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def arrayTypeStart(self):

        localctx = ZigParser.ArrayTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_arrayTypeStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(ZigParser.LBrack)
            self.state = 1208
            self.expression()
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1209
                self.match(ZigParser.Colon)
                self.state = 1210
                self.expression()


            self.state = 1213
            self.match(ZigParser.RBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_sliceTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceTypeStart" ):
                return visitor.visitSliceTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def sliceTypeStart(self):

        localctx = ZigParser.SliceTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_sliceTypeStart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(ZigParser.LBrack)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1216
                self.match(ZigParser.Colon)
                self.state = 1217
                self.expression()


            self.state = 1220
            self.match(ZigParser.RBrack)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign(self):
            return self.getTypedRuleContext(ZigParser.ByteAlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def AllowZero(self):
            return self.getToken(ZigParser.AllowZero, 0)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_sliceTypeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceTypeRest" ):
                return visitor.visitSliceTypeRest(self)
            else:
                return visitor.visitChildren(self)




    def sliceTypeRest(self):

        localctx = ZigParser.SliceTypeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_sliceTypeRest)
        try:
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.byteAlign()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.addrSpace()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1224
                self.match(ZigParser.AllowZero)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1225
                self.match(ZigParser.Const)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1226
                self.match(ZigParser.Volatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrTypeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Star)
            else:
                return self.getToken(ZigParser.Star, i)

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def LetterC(self):
            return self.getToken(ZigParser.LetterC, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_ptrTypeStart

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrTypeStart" ):
                return visitor.visitPtrTypeStart(self)
            else:
                return visitor.visitChildren(self)




    def ptrTypeStart(self):

        localctx = ZigParser.PtrTypeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_ptrTypeStart)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1229
                self.match(ZigParser.Star)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1230
                self.match(ZigParser.Star)
                self.state = 1231
                self.match(ZigParser.Star)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1232
                self.match(ZigParser.LBrack)
                self.state = 1233
                self.match(ZigParser.Star)
                self.state = 1237
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [27]:
                    self.state = 1234
                    self.match(ZigParser.LetterC)
                    pass
                elif token in [77]:
                    self.state = 1235
                    self.match(ZigParser.Colon)
                    self.state = 1236
                    self.expression()
                    pass
                elif token in [71]:
                    pass
                else:
                    pass
                self.state = 1239
                self.match(ZigParser.RBrack)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrTypeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteAlign3(self):
            return self.getTypedRuleContext(ZigParser.ByteAlign3Context,0)


        def addrSpace(self):
            return self.getTypedRuleContext(ZigParser.AddrSpaceContext,0)


        def AllowZero(self):
            return self.getToken(ZigParser.AllowZero, 0)

        def Const(self):
            return self.getToken(ZigParser.Const, 0)

        def Volatile(self):
            return self.getToken(ZigParser.Volatile, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_ptrTypeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrTypeRest" ):
                return visitor.visitPtrTypeRest(self)
            else:
                return visitor.visitChildren(self)




    def ptrTypeRest(self):

        localctx = ZigParser.PtrTypeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_ptrTypeRest)
        try:
            self.state = 1247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1242
                self.byteAlign3()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1243
                self.addrSpace()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1244
                self.match(ZigParser.AllowZero)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1245
                self.match(ZigParser.Const)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1246
                self.match(ZigParser.Volatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBrack(self):
            return self.getToken(ZigParser.LBrack, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def RBrack(self):
            return self.getToken(ZigParser.RBrack, 0)

        def Dot2(self):
            return self.getToken(ZigParser.Dot2, 0)

        def Colon(self):
            return self.getToken(ZigParser.Colon, 0)

        def Dot(self):
            return self.getToken(ZigParser.Dot, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def DotStar(self):
            return self.getToken(ZigParser.DotStar, 0)

        def DotQue(self):
            return self.getToken(ZigParser.DotQue, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_suffixOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixOp" ):
                return visitor.visitSuffixOp(self)
            else:
                return visitor.visitChildren(self)




    def suffixOp(self):

        localctx = ZigParser.SuffixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_suffixOp)
        self._la = 0 # Token type
        try:
            self.state = 1267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1249
                self.match(ZigParser.LBrack)
                self.state = 1250
                self.expression()
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 1251
                    self.match(ZigParser.Dot2)
                    self.state = 1257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -285761066177878624) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2684387415) != 0):
                        self.state = 1252
                        self.expression()
                        self.state = 1255
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==77:
                            self.state = 1253
                            self.match(ZigParser.Colon)
                            self.state = 1254
                            self.expression()






                self.state = 1261
                self.match(ZigParser.RBrack)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.match(ZigParser.Dot)
                self.state = 1264
                self.match(ZigParser.Ident)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1265
                self.match(ZigParser.DotStar)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1266
                self.match(ZigParser.DotQue)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteAlignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Align(self):
            return self.getToken(ZigParser.Align, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self):
            return self.getTypedRuleContext(ZigParser.ExpressionContext,0)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_byteAlign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteAlign" ):
                return visitor.visitByteAlign(self)
            else:
                return visitor.visitChildren(self)




    def byteAlign(self):

        localctx = ZigParser.ByteAlignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_byteAlign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(ZigParser.Align)
            self.state = 1270
            self.match(ZigParser.LParen)
            self.state = 1271
            self.expression()
            self.state = 1272
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteAlign3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Align(self):
            return self.getToken(ZigParser.Align, 0)

        def LParen(self):
            return self.getToken(ZigParser.LParen, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ZigParser.ExpressionContext,i)


        def RParen(self):
            return self.getToken(ZigParser.RParen, 0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Colon)
            else:
                return self.getToken(ZigParser.Colon, i)

        def getRuleIndex(self):
            return ZigParser.RULE_byteAlign3

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteAlign3" ):
                return visitor.visitByteAlign3(self)
            else:
                return visitor.visitChildren(self)




    def byteAlign3(self):

        localctx = ZigParser.ByteAlign3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_byteAlign3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(ZigParser.Align)
            self.state = 1275
            self.match(ZigParser.LParen)
            self.state = 1276
            self.expression()
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1277
                self.match(ZigParser.Colon)
                self.state = 1278
                self.expression()
                self.state = 1279
                self.match(ZigParser.Colon)
                self.state = 1280
                self.expression()


            self.state = 1284
            self.match(ZigParser.RParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchProngListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchProng(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.SwitchProngContext)
            else:
                return self.getTypedRuleContext(ZigParser.SwitchProngContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_switchProngList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchProngList" ):
                return visitor.visitSwitchProngList(self)
            else:
                return visitor.visitChildren(self)




    def switchProngList(self):

        localctx = ZigParser.SwitchProngListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_switchProngList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1286
                    self.switchProng()
                    self.state = 1287
                    self.match(ZigParser.Comma) 
                self.state = 1293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -285761066177747552) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2684387415) != 0):
                self.state = 1294
                self.switchProng()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleString(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.SingleString)
            else:
                return self.getToken(ZigParser.SingleString, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.Comma)
            else:
                return self.getToken(ZigParser.Comma, i)

        def getRuleIndex(self):
            return ZigParser.RULE_stringList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringList" ):
                return visitor.visitStringList(self)
            else:
                return visitor.visitChildren(self)




    def stringList(self):

        localctx = ZigParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1297
                    self.match(ZigParser.SingleString)
                    self.state = 1298
                    self.match(ZigParser.Comma) 
                self.state = 1303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 1304
                self.match(ZigParser.SingleString)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def containerMembers(self):
            return self.getTypedRuleContext(ZigParser.ContainerMembersContext,0)


        def ContainerDocComment(self, i:int=None):
            if i is None:
                return self.getTokens(ZigParser.ContainerDocComment)
            else:
                return self.getToken(ZigParser.ContainerDocComment, i)

        def getRuleIndex(self):
            return ZigParser.RULE_containerUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerUnit" ):
                return visitor.visitContainerUnit(self)
            else:
                return visitor.visitChildren(self)




    def containerUnit(self):

        localctx = ZigParser.ContainerUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_containerUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98:
                self.state = 1307
                self.match(ZigParser.ContainerDocComment)
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1313
            self.containerMembers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldList(self):
            return self.getTypedRuleContext(ZigParser.FieldListContext,0)


        def containerDeclarationList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZigParser.ContainerDeclarationListContext)
            else:
                return self.getTypedRuleContext(ZigParser.ContainerDeclarationListContext,i)


        def getRuleIndex(self):
            return ZigParser.RULE_containerMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerMembers" ):
                return visitor.visitContainerMembers(self)
            else:
                return visitor.visitChildren(self)




    def containerMembers(self):

        localctx = ZigParser.ContainerMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_containerMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.fieldList()
            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 870951803707392) != 0) or _la==99:
                self.state = 1316
                self.containerDeclarationList()
                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainerDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testDeclaration(self):
            return self.getTypedRuleContext(ZigParser.TestDeclarationContext,0)


        def compTimeDeclaration(self):
            return self.getTypedRuleContext(ZigParser.CompTimeDeclarationContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ZigParser.DeclarationContext,0)


        def DocComment(self):
            return self.getToken(ZigParser.DocComment, 0)

        def Pub(self):
            return self.getToken(ZigParser.Pub, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_containerDeclarationList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainerDeclarationList" ):
                return visitor.visitContainerDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def containerDeclarationList(self):

        localctx = ZigParser.ContainerDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_containerDeclarationList)
        self._la = 0 # Token type
        try:
            self.state = 1331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.testDeclaration()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.compTimeDeclaration()
                pass
            elif token in [14, 21, 22, 23, 26, 30, 37, 44, 48, 49, 99]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 1324
                    self.match(ZigParser.DocComment)


                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==37:
                    self.state = 1327
                    self.match(ZigParser.Pub)


                self.state = 1330
                self.declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopFnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fnProtoDeclaration(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationContext,0)


        def Semi(self):
            return self.getToken(ZigParser.Semi, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def fnProtoDeclarationEx(self):
            return self.getTypedRuleContext(ZigParser.FnProtoDeclarationExContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_topFnDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopFnDefinition" ):
                return visitor.visitTopFnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def topFnDefinition(self):

        localctx = ZigParser.TopFnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_topFnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1147142144) != 0):
                self.state = 1333
                self.fnProtoDeclarationEx()


            self.state = 1336
            self.fnProtoDeclaration()
            self.state = 1339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91]:
                self.state = 1337
                self.match(ZigParser.Semi)
                pass
            elif token in [68]:
                self.state = 1338
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Test(self):
            return self.getToken(ZigParser.Test, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def SingleString(self):
            return self.getToken(ZigParser.SingleString, 0)

        def Ident(self):
            return self.getToken(ZigParser.Ident, 0)

        def getRuleIndex(self):
            return ZigParser.RULE_testDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestDeclaration" ):
                return visitor.visitTestDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def testDeclaration(self):

        localctx = ZigParser.TestDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_testDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(ZigParser.Test)
            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60 or _la==64:
                self.state = 1342
                _la = self._input.LA(1)
                if not(_la==60 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1345
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompTimeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CompTime(self):
            return self.getToken(ZigParser.CompTime, 0)

        def block(self):
            return self.getTypedRuleContext(ZigParser.BlockContext,0)


        def getRuleIndex(self):
            return ZigParser.RULE_compTimeDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompTimeDeclaration" ):
                return visitor.visitCompTimeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def compTimeDeclaration(self):

        localctx = ZigParser.CompTimeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_compTimeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(ZigParser.CompTime)
            self.state = 1348
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





